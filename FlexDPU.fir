circuit FlexDPU :
  module Muxes :
    input clock : Clock
    input reset : Reset
    output io : { flip mat1 : UInt<16>[4][4], flip mat2 : UInt<16>[4], flip counterMatrix1 : UInt<16>[4][4], flip counterMatrix2 : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], valid : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[Muxes.scala 19:40]
    prevStationary_matrix[0][0] <= io.mat1[0][0] @[Muxes.scala 19:40]
    prevStationary_matrix[0][1] <= io.mat1[0][1] @[Muxes.scala 19:40]
    prevStationary_matrix[0][2] <= io.mat1[0][2] @[Muxes.scala 19:40]
    prevStationary_matrix[0][3] <= io.mat1[0][3] @[Muxes.scala 19:40]
    prevStationary_matrix[1][0] <= io.mat1[1][0] @[Muxes.scala 19:40]
    prevStationary_matrix[1][1] <= io.mat1[1][1] @[Muxes.scala 19:40]
    prevStationary_matrix[1][2] <= io.mat1[1][2] @[Muxes.scala 19:40]
    prevStationary_matrix[1][3] <= io.mat1[1][3] @[Muxes.scala 19:40]
    prevStationary_matrix[2][0] <= io.mat1[2][0] @[Muxes.scala 19:40]
    prevStationary_matrix[2][1] <= io.mat1[2][1] @[Muxes.scala 19:40]
    prevStationary_matrix[2][2] <= io.mat1[2][2] @[Muxes.scala 19:40]
    prevStationary_matrix[2][3] <= io.mat1[2][3] @[Muxes.scala 19:40]
    prevStationary_matrix[3][0] <= io.mat1[3][0] @[Muxes.scala 19:40]
    prevStationary_matrix[3][1] <= io.mat1[3][1] @[Muxes.scala 19:40]
    prevStationary_matrix[3][2] <= io.mat1[3][2] @[Muxes.scala 19:40]
    prevStationary_matrix[3][3] <= io.mat1[3][3] @[Muxes.scala 19:40]
    reg prevStreaming_matrix : UInt<16>[4], clock with :
      reset => (UInt<1>("h0"), prevStreaming_matrix) @[Muxes.scala 20:39]
    prevStreaming_matrix[0] <= io.mat2[0] @[Muxes.scala 20:39]
    prevStreaming_matrix[1] <= io.mat2[1] @[Muxes.scala 20:39]
    prevStreaming_matrix[2] <= io.mat2[2] @[Muxes.scala 20:39]
    prevStreaming_matrix[3] <= io.mat2[3] @[Muxes.scala 20:39]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[Muxes.scala 21:31]
    matricesAreEqual <= UInt<1>("h1") @[Muxes.scala 22:22]
    reg jValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 27:25]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 28:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 29:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 30:20]
    reg counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 31:26]
    wire _mux_WIRE : UInt<4>[16] @[Muxes.scala 32:30]
    _mux_WIRE[0] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[1] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[2] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[3] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[4] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[5] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[6] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[7] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[8] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[9] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[10] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[11] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[12] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[13] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[14] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[15] <= UInt<4>("h0") @[Muxes.scala 32:30]
    reg mux : UInt<4>[16], clock with :
      reset => (reset, _mux_WIRE) @[Muxes.scala 32:22]
    wire _src_WIRE : UInt<16>[16] @[Muxes.scala 33:30]
    _src_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 33:30]
    reg src : UInt<16>[16], clock with :
      reset => (reset, _src_WIRE) @[Muxes.scala 33:22]
    wire _dest_WIRE : UInt<16>[16] @[Muxes.scala 34:31]
    _dest_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 34:31]
    reg dest : UInt<16>[16], clock with :
      reset => (reset, _dest_WIRE) @[Muxes.scala 34:23]
    io.i_mux_bus <= mux @[Muxes.scala 35:18]
    io.Source <= src @[Muxes.scala 36:15]
    io.destination <= dest @[Muxes.scala 37:20]
    node _T = neq(io.mat1[0][0], prevStationary_matrix[0][0]) @[Muxes.scala 45:28]
    when _T : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_1 = neq(io.mat1[0][1], prevStationary_matrix[0][1]) @[Muxes.scala 45:28]
    when _T_1 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_2 = neq(io.mat1[0][2], prevStationary_matrix[0][2]) @[Muxes.scala 45:28]
    when _T_2 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_3 = neq(io.mat1[0][3], prevStationary_matrix[0][3]) @[Muxes.scala 45:28]
    when _T_3 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_4 = neq(io.mat2[0], prevStreaming_matrix[0]) @[Muxes.scala 49:23]
    when _T_4 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_5 = neq(io.mat1[1][0], prevStationary_matrix[1][0]) @[Muxes.scala 45:28]
    when _T_5 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_6 = neq(io.mat1[1][1], prevStationary_matrix[1][1]) @[Muxes.scala 45:28]
    when _T_6 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_7 = neq(io.mat1[1][2], prevStationary_matrix[1][2]) @[Muxes.scala 45:28]
    when _T_7 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_8 = neq(io.mat1[1][3], prevStationary_matrix[1][3]) @[Muxes.scala 45:28]
    when _T_8 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_9 = neq(io.mat2[1], prevStreaming_matrix[1]) @[Muxes.scala 49:23]
    when _T_9 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_10 = neq(io.mat1[2][0], prevStationary_matrix[2][0]) @[Muxes.scala 45:28]
    when _T_10 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_11 = neq(io.mat1[2][1], prevStationary_matrix[2][1]) @[Muxes.scala 45:28]
    when _T_11 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_12 = neq(io.mat1[2][2], prevStationary_matrix[2][2]) @[Muxes.scala 45:28]
    when _T_12 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_13 = neq(io.mat1[2][3], prevStationary_matrix[2][3]) @[Muxes.scala 45:28]
    when _T_13 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_14 = neq(io.mat2[2], prevStreaming_matrix[2]) @[Muxes.scala 49:23]
    when _T_14 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_15 = neq(io.mat1[3][0], prevStationary_matrix[3][0]) @[Muxes.scala 45:28]
    when _T_15 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_16 = neq(io.mat1[3][1], prevStationary_matrix[3][1]) @[Muxes.scala 45:28]
    when _T_16 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_17 = neq(io.mat1[3][2], prevStationary_matrix[3][2]) @[Muxes.scala 45:28]
    when _T_17 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_18 = neq(io.mat1[3][3], prevStationary_matrix[3][3]) @[Muxes.scala 45:28]
    when _T_18 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_19 = neq(io.mat2[3], prevStreaming_matrix[3]) @[Muxes.scala 49:23]
    when _T_19 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_20 = bits(j, 1, 0)
    node _T_21 = bits(i, 1, 0)
    node _T_22 = neq(io.counterMatrix1[_T_20][_T_21], UInt<1>("h0")) @[Muxes.scala 54:36]
    node _T_23 = bits(i, 1, 0)
    node _T_24 = neq(io.mat2[_T_23], UInt<1>("h0")) @[Muxes.scala 54:60]
    node _T_25 = and(_T_22, _T_24) @[Muxes.scala 54:45]
    when _T_25 : @[Muxes.scala 54:70]
      node _T_26 = bits(j, 1, 0)
      node _T_27 = bits(i, 1, 0)
      node _T_28 = bits(i, 1, 0)
      node _T_29 = leq(io.counterMatrix1[_T_26][_T_27], io.counterMatrix2[_T_28]) @[Muxes.scala 56:38]
      when _T_29 : @[Muxes.scala 56:62]
        node _T_30 = bits(counter, 3, 0)
        node _mux_T = bits(i, 1, 0)
        node _mux_T_1 = sub(io.counterMatrix2[_mux_T], UInt<1>("h1")) @[Muxes.scala 57:51]
        node _mux_T_2 = tail(_mux_T_1, 1) @[Muxes.scala 57:51]
        node _mux_T_3 = bits(j, 1, 0)
        node _mux_T_4 = bits(i, 1, 0)
        node _mux_T_5 = sub(io.counterMatrix1[_mux_T_3][_mux_T_4], UInt<1>("h1")) @[Muxes.scala 57:85]
        node _mux_T_6 = tail(_mux_T_5, 1) @[Muxes.scala 57:85]
        node _mux_T_7 = sub(_mux_T_2, _mux_T_6) @[Muxes.scala 57:58]
        node _mux_T_8 = tail(_mux_T_7, 1) @[Muxes.scala 57:58]
        mux[_T_30] <= _mux_T_8 @[Muxes.scala 57:24]
        node _T_31 = bits(counter, 3, 0)
        node _src_T = bits(i, 1, 0)
        src[_T_31] <= io.mat2[_src_T] @[Muxes.scala 58:24]
        node _T_32 = bits(counter, 3, 0)
        node _dest_T = bits(j, 1, 0)
        node _dest_T_1 = bits(i, 1, 0)
        dest[_T_32] <= io.mat1[_dest_T][_dest_T_1] @[Muxes.scala 59:25]
      else :
        node _T_33 = bits(counter, 3, 0)
        node _mux_T_9 = bits(j, 1, 0)
        node _mux_T_10 = bits(i, 1, 0)
        node _mux_T_11 = sub(io.counterMatrix1[_mux_T_9][_mux_T_10], UInt<1>("h1")) @[Muxes.scala 61:54]
        node _mux_T_12 = tail(_mux_T_11, 1) @[Muxes.scala 61:54]
        node _mux_T_13 = bits(i, 1, 0)
        node _mux_T_14 = sub(io.counterMatrix2[_mux_T_13], UInt<1>("h1")) @[Muxes.scala 61:85]
        node _mux_T_15 = tail(_mux_T_14, 1) @[Muxes.scala 61:85]
        node _mux_T_16 = sub(_mux_T_12, _mux_T_15) @[Muxes.scala 61:61]
        node _mux_T_17 = tail(_mux_T_16, 1) @[Muxes.scala 61:61]
        mux[_T_33] <= _mux_T_17 @[Muxes.scala 61:24]
        node _T_34 = bits(counter, 3, 0)
        node _src_T_1 = bits(i, 1, 0)
        src[_T_34] <= io.mat2[_src_T_1] @[Muxes.scala 62:24]
        node _T_35 = bits(counter, 3, 0)
        node _dest_T_2 = bits(j, 1, 0)
        node _dest_T_3 = bits(i, 1, 0)
        dest[_T_35] <= io.mat1[_dest_T_2][_dest_T_3] @[Muxes.scala 63:25]
      node _T_36 = not(jValid) @[Muxes.scala 66:15]
      when _T_36 : @[Muxes.scala 66:24]
        node _T_37 = eq(j, UInt<2>("h3")) @[Muxes.scala 68:22]
        node _T_38 = eq(i, UInt<2>("h3")) @[Muxes.scala 68:56]
        node _T_39 = and(_T_37, _T_38) @[Muxes.scala 68:50]
        node _T_40 = not(_T_39) @[Muxes.scala 68:17]
        when _T_40 : @[Muxes.scala 68:85]
          node _counter_T = add(counter, UInt<1>("h1")) @[Muxes.scala 69:30]
          node _counter_T_1 = tail(_counter_T, 1) @[Muxes.scala 69:30]
          counter <= _counter_T_1 @[Muxes.scala 69:19]
    node _T_41 = eq(jValid, UInt<1>("h0")) @[Muxes.scala 76:19]
    when _T_41 : @[Muxes.scala 76:29]
      node _T_42 = lt(j, UInt<2>("h3")) @[Muxes.scala 78:14]
      when _T_42 : @[Muxes.scala 78:40]
        node _j_T = add(j, UInt<1>("h1")) @[Muxes.scala 79:16]
        node _j_T_1 = tail(_j_T, 1) @[Muxes.scala 79:16]
        j <= _j_T_1 @[Muxes.scala 79:11]
      else :
        node _T_43 = eq(j, UInt<2>("h3")) @[Muxes.scala 80:21]
        node _T_44 = eq(i, UInt<2>("h3")) @[Muxes.scala 80:55]
        node _T_45 = and(_T_43, _T_44) @[Muxes.scala 80:49]
        when _T_45 : @[Muxes.scala 80:83]
          jValid <= UInt<1>("h1") @[Muxes.scala 81:16]
        else :
          j <= UInt<1>("h0") @[Muxes.scala 83:11]
          node _T_46 = lt(i, UInt<2>("h3")) @[Muxes.scala 84:16]
          when _T_46 : @[Muxes.scala 84:42]
            node _i_T = add(i, UInt<1>("h1")) @[Muxes.scala 85:18]
            node _i_T_1 = tail(_i_T, 1) @[Muxes.scala 85:18]
            i <= _i_T_1 @[Muxes.scala 85:13]
    else :
      node _T_47 = eq(jValid, UInt<1>("h1")) @[Muxes.scala 89:25]
      node _T_48 = eq(matricesAreEqual, UInt<1>("h0")) @[Muxes.scala 89:55]
      node _T_49 = and(_T_47, _T_48) @[Muxes.scala 89:34]
      when _T_49 : @[Muxes.scala 89:64]
        i <= UInt<1>("h0") @[Muxes.scala 91:9]
        j <= UInt<1>("h0") @[Muxes.scala 92:9]
        jValid <= UInt<1>("h0") @[Muxes.scala 93:14]
        counter <= UInt<1>("h0") @[Muxes.scala 94:15]
        src[0] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[0] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[0] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[1] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[1] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[1] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[2] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[2] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[2] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[3] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[3] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[3] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[4] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[4] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[4] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[5] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[5] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[5] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[6] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[6] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[6] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[7] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[7] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[7] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[8] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[8] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[8] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[9] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[9] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[9] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[10] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[10] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[10] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[11] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[11] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[11] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[12] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[12] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[12] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[13] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[13] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[13] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[14] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[14] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[14] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[15] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[15] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[15] <= UInt<1>("h0") @[Muxes.scala 99:16]
    reg jNext : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 105:24]
    jNext <= j @[Muxes.scala 106:11]
    node _T_50 = neq(k, UInt<1>("h0")) @[Muxes.scala 108:14]
    node _T_51 = eq(j, UInt<2>("h3")) @[Muxes.scala 108:28]
    node _T_52 = and(_T_50, _T_51) @[Muxes.scala 108:22]
    node _T_53 = eq(i, UInt<2>("h3")) @[Muxes.scala 108:60]
    node _T_54 = and(_T_52, _T_53) @[Muxes.scala 108:54]
    node _T_55 = eq(jNext, UInt<2>("h2")) @[Muxes.scala 108:96]
    node _T_56 = and(_T_54, _T_55) @[Muxes.scala 108:86]
    when _T_56 : @[Muxes.scala 108:122]
      io.valid <= UInt<1>("h1") @[Muxes.scala 109:16]
    else :
      io.valid <= UInt<1>("h0") @[Muxes.scala 111:16]
    node _T_57 = eq(i, UInt<2>("h3")) @[Muxes.scala 113:14]
    node _T_58 = eq(j, UInt<2>("h3")) @[Muxes.scala 113:48]
    node _T_59 = and(_T_57, _T_58) @[Muxes.scala 113:42]
    when _T_59 : @[Muxes.scala 113:76]
      node _k_T = add(k, UInt<1>("h1")) @[Muxes.scala 114:14]
      node _k_T_1 = tail(_k_T, 1) @[Muxes.scala 114:14]
      k <= _k_T_1 @[Muxes.scala 114:9]

  module SourceDestination :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], counterMatrix1 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4][4]}, counterMatrix2 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4]}, valid : UInt<1>, flip start : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[SourceDestination.scala 15:40]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[SourceDestination.scala 16:31]
    wire _counterRegs1_WIRE : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_1 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_2 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_3 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[SourceDestination.scala 17:39]
    reg counterRegs1 : UInt<16>[4][4], clock with :
      reset => (reset, _counterRegs1_WIRE_4) @[SourceDestination.scala 17:31]
    wire _counterRegs2_WIRE : UInt<16>[4] @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    reg counterRegs2 : UInt<16>[4], clock with :
      reset => (reset, _counterRegs2_WIRE) @[SourceDestination.scala 18:31]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 20:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 21:20]
    reg valid1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SourceDestination.scala 24:25]
    reg jValid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), jValid) @[SourceDestination.scala 25:21]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 26:20]
    reg counter1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 28:27]
    reg counter2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 29:27]
    node _reg_i_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 31:29]
    node _reg_i_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 31:63]
    node _reg_i_T_2 = and(_reg_i_T, _reg_i_T_1) @[SourceDestination.scala 31:57]
    reg reg_i : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SourceDestination.scala 31:24]
    reg_i <= _reg_i_T_2 @[SourceDestination.scala 31:24]
    when io.start : @[SourceDestination.scala 34:17]
      matricesAreEqual <= UInt<1>("h1") @[SourceDestination.scala 36:22]
      node _T = neq(io.Stationary_matrix[0][0], prevStationary_matrix[0][0]) @[SourceDestination.scala 40:41]
      when _T : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_1 = neq(io.Stationary_matrix[0][1], prevStationary_matrix[0][1]) @[SourceDestination.scala 40:41]
      when _T_1 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_2 = neq(io.Stationary_matrix[0][2], prevStationary_matrix[0][2]) @[SourceDestination.scala 40:41]
      when _T_2 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_3 = neq(io.Stationary_matrix[0][3], prevStationary_matrix[0][3]) @[SourceDestination.scala 40:41]
      when _T_3 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_4 = neq(io.Stationary_matrix[1][0], prevStationary_matrix[1][0]) @[SourceDestination.scala 40:41]
      when _T_4 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_5 = neq(io.Stationary_matrix[1][1], prevStationary_matrix[1][1]) @[SourceDestination.scala 40:41]
      when _T_5 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_6 = neq(io.Stationary_matrix[1][2], prevStationary_matrix[1][2]) @[SourceDestination.scala 40:41]
      when _T_6 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_7 = neq(io.Stationary_matrix[1][3], prevStationary_matrix[1][3]) @[SourceDestination.scala 40:41]
      when _T_7 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_8 = neq(io.Stationary_matrix[2][0], prevStationary_matrix[2][0]) @[SourceDestination.scala 40:41]
      when _T_8 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_9 = neq(io.Stationary_matrix[2][1], prevStationary_matrix[2][1]) @[SourceDestination.scala 40:41]
      when _T_9 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_10 = neq(io.Stationary_matrix[2][2], prevStationary_matrix[2][2]) @[SourceDestination.scala 40:41]
      when _T_10 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_11 = neq(io.Stationary_matrix[2][3], prevStationary_matrix[2][3]) @[SourceDestination.scala 40:41]
      when _T_11 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_12 = neq(io.Stationary_matrix[3][0], prevStationary_matrix[3][0]) @[SourceDestination.scala 40:41]
      when _T_12 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_13 = neq(io.Stationary_matrix[3][1], prevStationary_matrix[3][1]) @[SourceDestination.scala 40:41]
      when _T_13 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_14 = neq(io.Stationary_matrix[3][2], prevStationary_matrix[3][2]) @[SourceDestination.scala 40:41]
      when _T_14 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_15 = neq(io.Stationary_matrix[3][3], prevStationary_matrix[3][3]) @[SourceDestination.scala 40:41]
      when _T_15 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      jValid <= UInt<1>("h0") @[SourceDestination.scala 49:12]
      node _T_16 = bits(i, 1, 0)
      node _T_17 = bits(j, 1, 0)
      node _T_18 = neq(io.Stationary_matrix[_T_16][_T_17], UInt<1>("h0")) @[SourceDestination.scala 53:38]
      when _T_18 : @[SourceDestination.scala 53:47]
        node _T_19 = lt(counter1, UInt<3>("h5")) @[SourceDestination.scala 54:22]
        when _T_19 : @[SourceDestination.scala 54:48]
          node _T_20 = bits(i, 1, 0)
          node _T_21 = bits(j, 1, 0)
          counterRegs1[_T_20][_T_21] <= counter1 @[SourceDestination.scala 55:28]
          node _T_22 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 56:20]
          node _T_23 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 56:54]
          node _T_24 = and(_T_22, _T_23) @[SourceDestination.scala 56:48]
          node _T_25 = not(_T_24) @[SourceDestination.scala 56:15]
          when _T_25 : @[SourceDestination.scala 56:83]
            node _counter1_T = add(counter1, UInt<1>("h1")) @[SourceDestination.scala 57:32]
            node _counter1_T_1 = tail(_counter1_T, 1) @[SourceDestination.scala 57:32]
            counter1 <= _counter1_T_1 @[SourceDestination.scala 57:20]
        else :
          node _T_26 = bits(i, 1, 0)
          node _T_27 = bits(j, 1, 0)
          counterRegs1[_T_26][_T_27] <= UInt<1>("h1") @[SourceDestination.scala 60:28]
          counter1 <= UInt<2>("h2") @[SourceDestination.scala 61:18]
      else :
        node _T_28 = bits(i, 1, 0)
        node _T_29 = bits(j, 1, 0)
        counterRegs1[_T_28][_T_29] <= UInt<1>("h0") @[SourceDestination.scala 64:26]
      node _T_30 = bits(k, 1, 0)
      node _T_31 = neq(io.Streaming_matrix[_T_30], UInt<1>("h0")) @[SourceDestination.scala 67:34]
      when _T_31 : @[SourceDestination.scala 67:43]
        node _T_32 = bits(k, 1, 0)
        counterRegs2[_T_32] <= counter2 @[SourceDestination.scala 68:23]
        node _counter2_T = add(counter2, UInt<1>("h1")) @[SourceDestination.scala 69:28]
        node _counter2_T_1 = tail(_counter2_T, 1) @[SourceDestination.scala 69:28]
        counter2 <= _counter2_T_1 @[SourceDestination.scala 69:16]
      node _valid1_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 71:23]
      node _valid1_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 71:57]
      node _valid1_T_2 = and(_valid1_T, _valid1_T_1) @[SourceDestination.scala 71:51]
      node _valid1_T_3 = eq(_valid1_T_2, reg_i) @[SourceDestination.scala 71:86]
      node _valid1_T_4 = mux(_valid1_T_3, UInt<1>("h1"), UInt<1>("h0")) @[SourceDestination.scala 71:18]
      valid1 <= _valid1_T_4 @[SourceDestination.scala 71:12]
      node _T_33 = eq(k, UInt<2>("h3")) @[SourceDestination.scala 73:12]
      when _T_33 : @[SourceDestination.scala 73:37]
        k <= k @[SourceDestination.scala 74:9]
        counter2 <= counter2 @[SourceDestination.scala 75:16]
      else :
        node _T_34 = geq(k, UInt<1>("h0")) @[SourceDestination.scala 76:19]
        when _T_34 : @[SourceDestination.scala 76:26]
          node _k_T = add(k, UInt<1>("h1")) @[SourceDestination.scala 77:16]
          node _k_T_1 = tail(_k_T, 1) @[SourceDestination.scala 77:16]
          k <= _k_T_1 @[SourceDestination.scala 77:11]
      node _T_35 = eq(jValid, UInt<1>("h0")) @[SourceDestination.scala 79:18]
      when _T_35 : @[SourceDestination.scala 79:26]
        node _T_36 = lt(j, UInt<2>("h3")) @[SourceDestination.scala 80:14]
        when _T_36 : @[SourceDestination.scala 80:40]
          node _j_T = add(j, UInt<1>("h1")) @[SourceDestination.scala 81:16]
          node _j_T_1 = tail(_j_T, 1) @[SourceDestination.scala 81:16]
          j <= _j_T_1 @[SourceDestination.scala 81:11]
        else :
          node _T_37 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 82:21]
          node _T_38 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 82:55]
          node _T_39 = and(_T_37, _T_38) @[SourceDestination.scala 82:49]
          when _T_39 : @[SourceDestination.scala 82:83]
            jValid <= UInt<1>("h1") @[SourceDestination.scala 83:16]
          else :
            j <= UInt<1>("h0") @[SourceDestination.scala 85:11]
            node _T_40 = lt(i, UInt<2>("h3")) @[SourceDestination.scala 86:16]
            when _T_40 : @[SourceDestination.scala 86:42]
              node _i_T = add(i, UInt<1>("h1")) @[SourceDestination.scala 87:18]
              node _i_T_1 = tail(_i_T, 1) @[SourceDestination.scala 87:18]
              i <= _i_T_1 @[SourceDestination.scala 87:13]
      else :
        node _T_41 = eq(jValid, UInt<1>("h1")) @[SourceDestination.scala 90:25]
        node _T_42 = eq(matricesAreEqual, UInt<1>("h0")) @[SourceDestination.scala 90:55]
        node _T_43 = and(_T_41, _T_42) @[SourceDestination.scala 90:34]
        when _T_43 : @[SourceDestination.scala 90:64]
          i <= UInt<1>("h0") @[SourceDestination.scala 91:9]
          j <= UInt<1>("h0") @[SourceDestination.scala 92:9]
          k <= UInt<1>("h0") @[SourceDestination.scala 93:9]
          counter1 <= UInt<1>("h1") @[SourceDestination.scala 94:16]
          counter2 <= UInt<1>("h1") @[SourceDestination.scala 95:16]
          counterRegs1[0][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[0] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[1][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[1] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[2][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[2] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[3][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[3] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
      node _io_valid_T = eq(i, UInt<2>("h3")) @[SourceDestination.scala 104:19]
      node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 104:34]
      node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[SourceDestination.scala 104:28]
      io.valid <= _io_valid_T_2 @[SourceDestination.scala 104:14]
      node _T_44 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 106:14]
      node _T_45 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 106:48]
      node _T_46 = and(_T_44, _T_45) @[SourceDestination.scala 106:42]
      when _T_46 : @[SourceDestination.scala 106:76]
        io.counterMatrix1.valid <= UInt<1>("h1") @[SourceDestination.scala 107:31]
        io.counterMatrix2.valid <= UInt<1>("h1") @[SourceDestination.scala 108:31]
      else :
        io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 110:31]
        io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 111:31]
      io.counterMatrix1.bits <= counterRegs1 @[SourceDestination.scala 114:28]
      io.counterMatrix2.bits <= counterRegs2 @[SourceDestination.scala 115:28]
    else :
      wire _WIRE : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_1 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_1[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_2 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_2[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_3 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_3[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_4 : UInt<32>[4][4] @[SourceDestination.scala 118:36]
      _WIRE_4[0] <= _WIRE @[SourceDestination.scala 118:36]
      _WIRE_4[1] <= _WIRE_1 @[SourceDestination.scala 118:36]
      _WIRE_4[2] <= _WIRE_2 @[SourceDestination.scala 118:36]
      _WIRE_4[3] <= _WIRE_3 @[SourceDestination.scala 118:36]
      io.counterMatrix1.bits <= _WIRE_4 @[SourceDestination.scala 118:26]
      wire _WIRE_5 : UInt<32>[4] @[SourceDestination.scala 119:36]
      _WIRE_5[0] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[1] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[2] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[3] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      io.counterMatrix2.bits <= _WIRE_5 @[SourceDestination.scala 119:26]
      io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 120:27]
      io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 121:27]
      io.valid <= UInt<1>("h0") @[SourceDestination.scala 122:12]

  module abc2 :
    input clock : Clock
    input reset : Reset
    output io : { flip IDex : UInt<32>, flip JDex : UInt<32>, flip valid : UInt<1>, flip mat : UInt<32>[4][4], OutMat : UInt<32>[4][4], Ovalid : UInt<1>, ProcessValid : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_1 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_2 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_3 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[singleLoop.scala 19:28]
    _b_WIRE_4[0] <= _b_WIRE @[singleLoop.scala 19:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[singleLoop.scala 19:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[singleLoop.scala 19:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[singleLoop.scala 19:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[singleLoop.scala 19:20]
    io.OutMat <= b @[singleLoop.scala 20:15]
    reg j : UInt<32>, clock with :
      reset => (UInt<1>("h0"), j) @[singleLoop.scala 21:16]
    j <= io.JDex @[singleLoop.scala 22:7]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[singleLoop.scala 23:20]
    node _T = neq(a, UInt<1>("h0")) @[singleLoop.scala 24:25]
    node _T_1 = and(io.valid, _T) @[singleLoop.scala 24:19]
    when _T_1 : @[singleLoop.scala 24:34]
      node _T_2 = bits(io.IDex, 1, 0)
      node _T_3 = bits(j, 1, 0)
      node _b_T = bits(io.IDex, 1, 0)
      node _b_T_1 = bits(j, 1, 0)
      b[_T_2][_T_3] <= io.mat[_b_T][_b_T_1] @[singleLoop.scala 25:19]
    node _T_4 = eq(j, UInt<2>("h3")) @[singleLoop.scala 26:13]
    when _T_4 : @[singleLoop.scala 26:21]
      node _io_Ovalid_T = bits(io.IDex, 1, 0)
      node _io_Ovalid_T_1 = eq(io.mat[_io_Ovalid_T][3], UInt<3>("h4")) @[singleLoop.scala 27:45]
      reg io_Ovalid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), io_Ovalid_REG) @[singleLoop.scala 27:25]
      io_Ovalid_REG <= _io_Ovalid_T_1 @[singleLoop.scala 27:25]
      io.Ovalid <= io_Ovalid_REG @[singleLoop.scala 27:15]
    else :
      io.Ovalid <= UInt<1>("h0") @[singleLoop.scala 29:19]
    node _io_ProcessValid_T = eq(j, UInt<2>("h3")) @[singleLoop.scala 31:35]
    wire _io_ProcessValid_WIRE : UInt<1>
    _io_ProcessValid_WIRE <= _io_ProcessValid_T
    io.ProcessValid <= _io_ProcessValid_WIRE @[singleLoop.scala 31:21]
    when io.valid : @[singleLoop.scala 45:20]
      node _a_T = add(a, UInt<1>("h1")) @[singleLoop.scala 46:12]
      node _a_T_1 = tail(_a_T, 1) @[singleLoop.scala 46:12]
      a <= _a_T_1 @[singleLoop.scala 46:7]
    node _T_5 = neq(a, UInt<1>("h0")) @[singleLoop.scala 48:26]
    node _T_6 = and(io.valid, _T_5) @[singleLoop.scala 48:20]
    node _T_7 = lt(j, UInt<2>("h3")) @[singleLoop.scala 48:41]
    node _T_8 = and(_T_6, _T_7) @[singleLoop.scala 48:35]
    when _T_8 : @[singleLoop.scala 48:65]
      node _j_T = add(j, UInt<1>("h1")) @[singleLoop.scala 49:16]
      node _j_T_1 = tail(_j_T, 1) @[singleLoop.scala 49:16]
      j <= _j_T_1 @[singleLoop.scala 49:11]
    else :
      node _T_9 = eq(j, UInt<2>("h3")) @[singleLoop.scala 50:18]
      when _T_9 : @[singleLoop.scala 50:43]
        j <= j @[singleLoop.scala 51:11]

  module abc3 :
    input clock : Clock
    input reset : Reset
    output io : { flip PreMat : UInt<32>[4][4], flip IDex : UInt<32>, flip JDex : UInt<32>, flip mat : UInt<32>[4][4], flip i_valid : UInt<1>, valid : UInt<1>, Omat : UInt<32>[4][4], flip merge : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_1 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_2 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_3 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[0] <= _b_WIRE @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[MergeDIstribution.scala 18:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[MergeDIstribution.scala 18:20]
    io.Omat <= b @[MergeDIstribution.scala 19:13]
    reg check : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 20:24]
    wire counter : UInt<1>
    counter <= UInt<1>("h0")
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 22:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 23:20]
    node _io_valid_T = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 24:20]
    node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 24:35]
    node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[MergeDIstribution.scala 24:29]
    io.valid <= _io_valid_T_2 @[MergeDIstribution.scala 24:14]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 25:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 26:20]
    reg l : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 27:20]
    reg delay : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 29:24]
    node _T = leq(delay, UInt<2>("h3")) @[MergeDIstribution.scala 31:17]
    node _T_1 = and(_T, io.merge) @[MergeDIstribution.scala 31:41]
    when _T_1 : @[MergeDIstribution.scala 31:53]
      node _delay_T = add(delay, UInt<1>("h1")) @[MergeDIstribution.scala 32:24]
      node _delay_T_1 = tail(_delay_T, 1) @[MergeDIstribution.scala 32:24]
      delay <= _delay_T_1 @[MergeDIstribution.scala 32:15]
    node _T_2 = eq(delay, UInt<3>("h4")) @[MergeDIstribution.scala 41:29]
    node _T_3 = and(io.merge, _T_2) @[MergeDIstribution.scala 41:19]
    when _T_3 : @[MergeDIstribution.scala 41:53]
      node _T_4 = lt(k, io.IDex) @[MergeDIstribution.scala 43:14]
      node _T_5 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 43:30]
      node _T_6 = and(_T_4, _T_5) @[MergeDIstribution.scala 43:24]
      when _T_6 : @[MergeDIstribution.scala 43:56]
        node _k_T = add(k, UInt<1>("h1")) @[MergeDIstribution.scala 44:16]
        node _k_T_1 = tail(_k_T, 1) @[MergeDIstribution.scala 44:16]
        k <= _k_T_1 @[MergeDIstribution.scala 44:11]
        l <= UInt<1>("h0") @[MergeDIstribution.scala 45:11]
      else :
        node _T_7 = leq(k, io.IDex) @[MergeDIstribution.scala 46:20]
        node _T_8 = lt(l, UInt<2>("h3")) @[MergeDIstribution.scala 46:37]
        node _T_9 = and(_T_7, _T_8) @[MergeDIstribution.scala 46:31]
        when _T_9 : @[MergeDIstribution.scala 46:61]
          node _l_T = add(l, UInt<1>("h1")) @[MergeDIstribution.scala 47:16]
          node _l_T_1 = tail(_l_T, 1) @[MergeDIstribution.scala 47:16]
          l <= _l_T_1 @[MergeDIstribution.scala 47:11]
        else :
          node _T_10 = eq(k, io.IDex) @[MergeDIstribution.scala 48:18]
          node _T_11 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 48:36]
          node _T_12 = and(_T_10, _T_11) @[MergeDIstribution.scala 48:30]
          when _T_12 : @[MergeDIstribution.scala 48:62]
            l <= l @[MergeDIstribution.scala 49:11]
      node _T_13 = bits(k, 1, 0)
      node _T_14 = bits(l, 1, 0)
      node _b_T = bits(k, 1, 0)
      node _b_T_1 = bits(l, 1, 0)
      b[_T_13][_T_14] <= io.PreMat[_b_T][_b_T_1] @[MergeDIstribution.scala 52:13]
    node _T_15 = eq(i, UInt<1>("h0")) @[MergeDIstribution.scala 54:28]
    node _T_16 = and(io.i_valid, _T_15) @[MergeDIstribution.scala 54:22]
    node _T_17 = eq(j, UInt<1>("h0")) @[MergeDIstribution.scala 54:44]
    node _T_18 = and(_T_16, _T_17) @[MergeDIstribution.scala 54:37]
    when _T_18 : @[MergeDIstribution.scala 54:53]
      node _i_T = add(io.IDex, UInt<1>("h1")) @[MergeDIstribution.scala 55:22]
      node _i_T_1 = tail(_i_T, 1) @[MergeDIstribution.scala 55:22]
      i <= _i_T_1 @[MergeDIstribution.scala 55:11]
      j <= UInt<1>("h0") @[MergeDIstribution.scala 56:11]
      node _check_T = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 57:24]
      node _check_T_1 = tail(_check_T, 1) @[MergeDIstribution.scala 57:24]
      check <= _check_T_1 @[MergeDIstribution.scala 57:15]
    node _T_19 = geq(check, UInt<1>("h1")) @[MergeDIstribution.scala 60:17]
    when _T_19 : @[MergeDIstribution.scala 60:24]
      counter <= UInt<1>("h1") @[MergeDIstribution.scala 61:17]
      node _check_T_2 = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 62:24]
      node _check_T_3 = tail(_check_T_2, 1) @[MergeDIstribution.scala 62:24]
      check <= _check_T_3 @[MergeDIstribution.scala 62:15]
    when io.merge : @[MergeDIstribution.scala 67:19]
      node _T_20 = bits(i, 1, 0)
      node _T_21 = bits(j, 1, 0)
      node _b_T_2 = bits(i, 1, 0)
      node _b_T_3 = bits(j, 1, 0)
      b[_T_20][_T_21] <= io.mat[_b_T_2][_b_T_3] @[MergeDIstribution.scala 68:13]
    when counter : @[MergeDIstribution.scala 97:14]
      node _T_22 = bits(i, 1, 0)
      node _T_23 = bits(j, 1, 0)
      node _T_24 = eq(io.mat[_T_22][_T_23], UInt<3>("h4")) @[MergeDIstribution.scala 100:23]
      when _T_24 : @[MergeDIstribution.scala 100:44]
        i <= i @[MergeDIstribution.scala 101:11]
        j <= j @[MergeDIstribution.scala 102:11]
        io.valid <= UInt<1>("h1") @[MergeDIstribution.scala 103:18]
      else :
        node _T_25 = lt(i, UInt<2>("h3")) @[MergeDIstribution.scala 104:20]
        node _T_26 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 104:49]
        node _T_27 = and(_T_25, _T_26) @[MergeDIstribution.scala 104:43]
        when _T_27 : @[MergeDIstribution.scala 104:75]
          node _i_T_2 = add(i, UInt<1>("h1")) @[MergeDIstribution.scala 105:16]
          node _i_T_3 = tail(_i_T_2, 1) @[MergeDIstribution.scala 105:16]
          i <= _i_T_3 @[MergeDIstribution.scala 105:11]
          j <= UInt<1>("h0") @[MergeDIstribution.scala 106:11]
        else :
          node _T_28 = leq(i, UInt<2>("h3")) @[MergeDIstribution.scala 107:20]
          node _T_29 = lt(j, UInt<2>("h3")) @[MergeDIstribution.scala 107:50]
          node _T_30 = and(_T_28, _T_29) @[MergeDIstribution.scala 107:44]
          when _T_30 : @[MergeDIstribution.scala 107:74]
            node _j_T = add(j, UInt<1>("h1")) @[MergeDIstribution.scala 108:16]
            node _j_T_1 = tail(_j_T, 1) @[MergeDIstribution.scala 108:16]
            j <= _j_T_1 @[MergeDIstribution.scala 108:11]
          else :
            node _T_31 = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 109:18]
            node _T_32 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 109:49]
            node _T_33 = and(_T_31, _T_32) @[MergeDIstribution.scala 109:43]
            when _T_33 : @[MergeDIstribution.scala 109:75]
              j <= j @[MergeDIstribution.scala 110:11]

  module Distribution :
    input clock : Clock
    input reset : Reset
    output io : { flip matrix : UInt<32>[4][4], flip s : UInt<32>, out : UInt<32>[4][4], ProcessValid : UInt<1>, flip valid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 19:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 20:20]
    reg count : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 21:24]
    wire _Idex_WIRE : UInt<32>[4] @[DIstribution.scala 22:31]
    _Idex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    reg Idex : UInt<32>[4], clock with :
      reset => (reset, _Idex_WIRE) @[DIstribution.scala 22:23]
    wire _Jdex_WIRE : UInt<32>[4] @[DIstribution.scala 23:31]
    _Jdex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    reg Jdex : UInt<32>[4], clock with :
      reset => (reset, _Jdex_WIRE) @[DIstribution.scala 23:23]
    wire _mat_WIRE : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_1 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_2 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_3 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 24:30]
    _mat_WIRE_4[0] <= _mat_WIRE @[DIstribution.scala 24:30]
    _mat_WIRE_4[1] <= _mat_WIRE_1 @[DIstribution.scala 24:30]
    _mat_WIRE_4[2] <= _mat_WIRE_2 @[DIstribution.scala 24:30]
    _mat_WIRE_4[3] <= _mat_WIRE_3 @[DIstribution.scala 24:30]
    reg mat : UInt<1>[4][4], clock with :
      reset => (reset, _mat_WIRE_4) @[DIstribution.scala 24:22]
    reg iterationNo : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 25:30]
    when io.valid : @[DIstribution.scala 27:21]
      node _io_validIteration_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 30:29]
      node _io_validIteration_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 30:62]
      node _io_validIteration_T_2 = and(_io_validIteration_T, _io_validIteration_T_1) @[DIstribution.scala 30:56]
      io.validIteration <= _io_validIteration_T_2 @[DIstribution.scala 30:23]
      io.iteration <= iterationNo @[DIstribution.scala 31:18]
      node _T = bits(i, 1, 0)
      node _T_1 = bits(j, 1, 0)
      node _T_2 = eq(io.matrix[_T][_T_1], UInt<1>("h1")) @[DIstribution.scala 34:27]
      when _T_2 : @[DIstribution.scala 34:35]
        node _iterationNo_T = add(iterationNo, UInt<1>("h1")) @[DIstribution.scala 35:34]
        node _iterationNo_T_1 = tail(_iterationNo_T, 1) @[DIstribution.scala 35:34]
        iterationNo <= _iterationNo_T_1 @[DIstribution.scala 35:19]
      mat <= io.matrix @[DIstribution.scala 38:9]
      node _T_3 = bits(i, 1, 0)
      node _T_4 = bits(j, 1, 0)
      node _T_5 = eq(io.matrix[_T_3][_T_4], UInt<1>("h1")) @[DIstribution.scala 47:28]
      when _T_5 : @[DIstribution.scala 47:38]
        node _count_T = add(count, UInt<1>("h1")) @[DIstribution.scala 48:24]
        node _count_T_1 = tail(_count_T, 1) @[DIstribution.scala 48:24]
        count <= _count_T_1 @[DIstribution.scala 48:15]
        node _T_6 = bits(count, 1, 0)
        Idex[_T_6] <= i @[DIstribution.scala 49:21]
        node _T_7 = bits(count, 1, 0)
        Jdex[_T_7] <= j @[DIstribution.scala 50:21]
      else :
        node _T_8 = bits(i, 1, 0)
        node _T_9 = bits(j, 1, 0)
        node _T_10 = eq(io.matrix[_T_8][_T_9], UInt<1>("h1")) @[DIstribution.scala 51:33]
        node _T_11 = eq(i, UInt<2>("h3")) @[DIstribution.scala 51:48]
        node _T_12 = and(_T_10, _T_11) @[DIstribution.scala 51:42]
        node _T_13 = eq(j, UInt<2>("h3")) @[DIstribution.scala 51:80]
        node _T_14 = and(_T_12, _T_13) @[DIstribution.scala 51:74]
        when _T_14 : @[DIstribution.scala 51:106]
          node _T_15 = bits(count, 1, 0)
          Idex[_T_15] <= i @[DIstribution.scala 52:21]
          node _T_16 = bits(count, 1, 0)
          Jdex[_T_16] <= j @[DIstribution.scala 53:21]
      inst part2 of abc2 @[DIstribution.scala 55:19]
      part2.clock <= clock
      part2.reset <= reset
      part2.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 56:14]
      part2.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 56:14]
      part2.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 56:14]
      part2.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 56:14]
      part2.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 56:14]
      part2.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 56:14]
      part2.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 56:14]
      part2.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 56:14]
      part2.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 56:14]
      part2.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 56:14]
      part2.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 56:14]
      part2.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 56:14]
      part2.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 56:14]
      part2.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 56:14]
      part2.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 56:14]
      part2.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 56:14]
      node _c_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 57:23]
      node _c_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 57:54]
      node _c_T_2 = and(_c_T, _c_T_1) @[DIstribution.scala 57:48]
      reg c : UInt<1>, clock with :
        reset => (UInt<1>("h0"), c) @[DIstribution.scala 57:20]
      c <= _c_T_2 @[DIstribution.scala 57:20]
      part2.io.valid <= c @[DIstribution.scala 58:20]
      when c : @[DIstribution.scala 59:13]
        node _part2_io_IDex_T = bits(io.s, 1, 0)
        part2.io.IDex <= Idex[_part2_io_IDex_T] @[DIstribution.scala 60:19]
        node _part2_io_JDex_T = bits(io.s, 1, 0)
        part2.io.JDex <= Jdex[_part2_io_JDex_T] @[DIstribution.scala 61:19]
      else :
        part2.io.IDex <= UInt<1>("h0") @[DIstribution.scala 63:19]
        part2.io.JDex <= UInt<1>("h0") @[DIstribution.scala 64:19]
      inst part3 of abc3 @[DIstribution.scala 69:23]
      part3.clock <= clock
      part3.reset <= reset
      wire check : UInt<1>
      check <= UInt<1>("h0")
      when part2.io.Ovalid : @[DIstribution.scala 75:26]
        check <= UInt<1>("h0") @[DIstribution.scala 76:15]
      else :
        check <= UInt<1>("h1") @[DIstribution.scala 78:15]
      node _e_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 80:17]
      node _e_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 80:49]
      node _e_T_2 = and(_e_T, _e_T_1) @[DIstribution.scala 80:43]
      node _e_T_3 = sub(count, UInt<1>("h1")) @[DIstribution.scala 80:85]
      node _e_T_4 = tail(_e_T_3, 1) @[DIstribution.scala 80:85]
      node _e_T_5 = lt(_e_T_4, io.s) @[DIstribution.scala 80:91]
      node e = and(_e_T_2, _e_T_5) @[DIstribution.scala 80:75]
      node _T_17 = and(part2.io.ProcessValid, check) @[DIstribution.scala 82:33]
      when _T_17 : @[DIstribution.scala 82:42]
        reg part3_io_merge_REG : UInt<1>, clock with :
          reset => (UInt<1>("h0"), part3_io_merge_REG) @[DIstribution.scala 83:30]
        part3_io_merge_REG <= c @[DIstribution.scala 83:30]
        part3.io.merge <= part3_io_merge_REG @[DIstribution.scala 83:20]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 84:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 84:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 84:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 84:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 84:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 84:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 84:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 84:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 84:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 84:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 84:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 84:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 84:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 84:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 84:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 84:18]
        part3.io.i_valid <= part2.io.ProcessValid @[DIstribution.scala 85:22]
        part3.io.PreMat[0][0] <= part2.io.OutMat[0][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][1] <= part2.io.OutMat[0][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][2] <= part2.io.OutMat[0][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][3] <= part2.io.OutMat[0][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][0] <= part2.io.OutMat[1][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][1] <= part2.io.OutMat[1][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][2] <= part2.io.OutMat[1][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][3] <= part2.io.OutMat[1][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][0] <= part2.io.OutMat[2][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][1] <= part2.io.OutMat[2][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][2] <= part2.io.OutMat[2][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][3] <= part2.io.OutMat[2][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][0] <= part2.io.OutMat[3][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][1] <= part2.io.OutMat[3][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][2] <= part2.io.OutMat[3][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][3] <= part2.io.OutMat[3][3] @[DIstribution.scala 86:21]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 87:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 87:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 87:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 87:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 87:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 87:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 87:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 87:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 87:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 87:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 87:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 87:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 87:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 87:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 87:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 87:18]
        node _part3_io_IDex_T = bits(io.s, 1, 0)
        part3.io.IDex <= Idex[_part3_io_IDex_T] @[DIstribution.scala 88:19]
        node _part3_io_JDex_T = bits(io.s, 1, 0)
        part3.io.JDex <= Jdex[_part3_io_JDex_T] @[DIstribution.scala 89:19]
        node _T_18 = eq(i, UInt<2>("h3")) @[DIstribution.scala 90:14]
        node _T_19 = eq(j, UInt<2>("h3")) @[DIstribution.scala 90:46]
        node _T_20 = and(_T_18, _T_19) @[DIstribution.scala 90:40]
        node _T_21 = sub(count, UInt<1>("h1")) @[DIstribution.scala 90:82]
        node _T_22 = tail(_T_21, 1) @[DIstribution.scala 90:82]
        node _T_23 = lt(_T_22, io.s) @[DIstribution.scala 90:88]
        node _T_24 = and(_T_20, _T_23) @[DIstribution.scala 90:72]
        when _T_24 : @[DIstribution.scala 90:96]
          wire _WIRE : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_1 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_2 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_3 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 91:35]
          _WIRE_4[0] <= _WIRE @[DIstribution.scala 91:35]
          _WIRE_4[1] <= _WIRE_1 @[DIstribution.scala 91:35]
          _WIRE_4[2] <= _WIRE_2 @[DIstribution.scala 91:35]
          _WIRE_4[3] <= _WIRE_3 @[DIstribution.scala 91:35]
          wire _WIRE_5 : UInt<1>[4][4]
          _WIRE_5 <= _WIRE_4
          io.out <= _WIRE_5 @[DIstribution.scala 91:16]
        else :
          io.out <= part3.io.Omat @[DIstribution.scala 93:12]
        io.ProcessValid <= part3.io.valid @[DIstribution.scala 94:21]
      else :
        part3.io.merge <= UInt<1>("h0") @[DIstribution.scala 96:24]
        wire _WIRE_6 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_6[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_7 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_7[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_8 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_8[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_9 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_9[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_10 : UInt<32>[4][4] @[DIstribution.scala 97:31]
        _WIRE_10[0] <= _WIRE_6 @[DIstribution.scala 97:31]
        _WIRE_10[1] <= _WIRE_7 @[DIstribution.scala 97:31]
        _WIRE_10[2] <= _WIRE_8 @[DIstribution.scala 97:31]
        _WIRE_10[3] <= _WIRE_9 @[DIstribution.scala 97:31]
        part3.io.mat[0][0] <= _WIRE_10[0][0] @[DIstribution.scala 97:22]
        part3.io.mat[0][1] <= _WIRE_10[0][1] @[DIstribution.scala 97:22]
        part3.io.mat[0][2] <= _WIRE_10[0][2] @[DIstribution.scala 97:22]
        part3.io.mat[0][3] <= _WIRE_10[0][3] @[DIstribution.scala 97:22]
        part3.io.mat[1][0] <= _WIRE_10[1][0] @[DIstribution.scala 97:22]
        part3.io.mat[1][1] <= _WIRE_10[1][1] @[DIstribution.scala 97:22]
        part3.io.mat[1][2] <= _WIRE_10[1][2] @[DIstribution.scala 97:22]
        part3.io.mat[1][3] <= _WIRE_10[1][3] @[DIstribution.scala 97:22]
        part3.io.mat[2][0] <= _WIRE_10[2][0] @[DIstribution.scala 97:22]
        part3.io.mat[2][1] <= _WIRE_10[2][1] @[DIstribution.scala 97:22]
        part3.io.mat[2][2] <= _WIRE_10[2][2] @[DIstribution.scala 97:22]
        part3.io.mat[2][3] <= _WIRE_10[2][3] @[DIstribution.scala 97:22]
        part3.io.mat[3][0] <= _WIRE_10[3][0] @[DIstribution.scala 97:22]
        part3.io.mat[3][1] <= _WIRE_10[3][1] @[DIstribution.scala 97:22]
        part3.io.mat[3][2] <= _WIRE_10[3][2] @[DIstribution.scala 97:22]
        part3.io.mat[3][3] <= _WIRE_10[3][3] @[DIstribution.scala 97:22]
        part3.io.i_valid <= UInt<1>("h0") @[DIstribution.scala 98:26]
        wire _WIRE_11 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_11[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_12 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_12[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_13 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_13[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_14 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_14[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_15 : UInt<32>[4][4] @[DIstribution.scala 99:31]
        _WIRE_15[0] <= _WIRE_11 @[DIstribution.scala 99:31]
        _WIRE_15[1] <= _WIRE_12 @[DIstribution.scala 99:31]
        _WIRE_15[2] <= _WIRE_13 @[DIstribution.scala 99:31]
        _WIRE_15[3] <= _WIRE_14 @[DIstribution.scala 99:31]
        part3.io.PreMat[0][0] <= _WIRE_15[0][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][1] <= _WIRE_15[0][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][2] <= _WIRE_15[0][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][3] <= _WIRE_15[0][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][0] <= _WIRE_15[1][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][1] <= _WIRE_15[1][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][2] <= _WIRE_15[1][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][3] <= _WIRE_15[1][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][0] <= _WIRE_15[2][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][1] <= _WIRE_15[2][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][2] <= _WIRE_15[2][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][3] <= _WIRE_15[2][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][0] <= _WIRE_15[3][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][1] <= _WIRE_15[3][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][2] <= _WIRE_15[3][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][3] <= _WIRE_15[3][3] @[DIstribution.scala 99:21]
        part3.io.IDex <= UInt<1>("h0") @[DIstribution.scala 100:19]
        part3.io.JDex <= UInt<1>("h0") @[DIstribution.scala 101:19]
        node _T_25 = eq(i, UInt<2>("h3")) @[DIstribution.scala 102:14]
        node _T_26 = eq(j, UInt<2>("h3")) @[DIstribution.scala 102:46]
        node _T_27 = and(_T_25, _T_26) @[DIstribution.scala 102:40]
        node _T_28 = sub(count, UInt<1>("h1")) @[DIstribution.scala 102:82]
        node _T_29 = tail(_T_28, 1) @[DIstribution.scala 102:82]
        node _T_30 = lt(_T_29, io.s) @[DIstribution.scala 102:88]
        node _T_31 = and(_T_27, _T_30) @[DIstribution.scala 102:72]
        when _T_31 : @[DIstribution.scala 102:96]
          wire _WIRE_16 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_16[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_17 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_17[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_18 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_18[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_19 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_19[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_20 : UInt<1>[4][4] @[DIstribution.scala 103:35]
          _WIRE_20[0] <= _WIRE_16 @[DIstribution.scala 103:35]
          _WIRE_20[1] <= _WIRE_17 @[DIstribution.scala 103:35]
          _WIRE_20[2] <= _WIRE_18 @[DIstribution.scala 103:35]
          _WIRE_20[3] <= _WIRE_19 @[DIstribution.scala 103:35]
          wire _WIRE_21 : UInt<1>[4][4]
          _WIRE_21 <= _WIRE_20
          io.out <= _WIRE_21 @[DIstribution.scala 103:16]
        else :
          io.out <= part2.io.OutMat @[DIstribution.scala 105:12]
        io.ProcessValid <= part2.io.Ovalid @[DIstribution.scala 106:21]
      node _T_32 = lt(i, UInt<2>("h3")) @[DIstribution.scala 113:14]
      node _T_33 = eq(j, UInt<2>("h3")) @[DIstribution.scala 113:43]
      node _T_34 = and(_T_32, _T_33) @[DIstribution.scala 113:37]
      when _T_34 : @[DIstribution.scala 113:69]
        node _i_T = add(i, UInt<1>("h1")) @[DIstribution.scala 114:16]
        node _i_T_1 = tail(_i_T, 1) @[DIstribution.scala 114:16]
        i <= _i_T_1 @[DIstribution.scala 114:11]
      node _ab_T = leq(i, UInt<2>("h3")) @[DIstribution.scala 117:18]
      node _ab_T_1 = lt(j, UInt<2>("h3")) @[DIstribution.scala 117:48]
      node ab = and(_ab_T, _ab_T_1) @[DIstribution.scala 117:42]
      node _T_35 = leq(i, UInt<2>("h3")) @[DIstribution.scala 119:14]
      node _T_36 = lt(j, UInt<2>("h3")) @[DIstribution.scala 119:44]
      node _T_37 = and(_T_35, _T_36) @[DIstribution.scala 119:38]
      when _T_37 : @[DIstribution.scala 119:68]
        node _j_T = add(j, UInt<1>("h1")) @[DIstribution.scala 120:16]
        node _j_T_1 = tail(_j_T, 1) @[DIstribution.scala 120:16]
        j <= _j_T_1 @[DIstribution.scala 120:11]
      else :
        node _T_38 = eq(i, UInt<2>("h3")) @[DIstribution.scala 121:18]
        node _T_39 = eq(j, UInt<2>("h3")) @[DIstribution.scala 121:49]
        node _T_40 = and(_T_38, _T_39) @[DIstribution.scala 121:43]
        when _T_40 : @[DIstribution.scala 121:75]
          j <= j @[DIstribution.scala 122:11]
        else :
          j <= UInt<1>("h0") @[DIstribution.scala 124:11]
    else :
      wire _WIRE_22 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_22[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_23 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_23[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_24 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_24[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_25 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_25[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_26 : UInt<1>[4][4] @[DIstribution.scala 131:35]
      _WIRE_26[0] <= _WIRE_22 @[DIstribution.scala 131:35]
      _WIRE_26[1] <= _WIRE_23 @[DIstribution.scala 131:35]
      _WIRE_26[2] <= _WIRE_24 @[DIstribution.scala 131:35]
      _WIRE_26[3] <= _WIRE_25 @[DIstribution.scala 131:35]
      wire _WIRE_27 : UInt<1>[4][4]
      _WIRE_27 <= _WIRE_26
      io.out <= _WIRE_27 @[DIstribution.scala 131:16]
      io.ProcessValid <= UInt<1>("h0") @[DIstribution.scala 132:25]
      io.iteration <= UInt<1>("h0") @[DIstribution.scala 133:22]
      io.validIteration <= UInt<1>("h0") @[DIstribution.scala 134:27]

  module PathFinder :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], PF_Valid : UInt<1>, flip NoDPE : UInt<32>, flip DataValid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    when io.DataValid : @[PathFinder.scala 20:20]
      wire _counterRegs1_WIRE : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_1 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_2 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_3 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[PathFinder.scala 21:37]
      reg counterRegs1 : UInt<16>[4][4], clock with :
        reset => (reset, _counterRegs1_WIRE_4) @[PathFinder.scala 21:29]
      wire _counterRegs2_WIRE : UInt<16>[4] @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      reg counterRegs2 : UInt<16>[4], clock with :
        reset => (reset, _counterRegs2_WIRE) @[PathFinder.scala 22:29]
      reg delay : UInt<32>, clock with :
        reset => (reset, UInt<32>("h0")) @[PathFinder.scala 25:22]
      inst myMuxes of Muxes @[PathFinder.scala 26:23]
      myMuxes.clock <= clock
      myMuxes.reset <= reset
      inst myCounter of SourceDestination @[PathFinder.scala 32:25]
      myCounter.clock <= clock
      myCounter.reset <= reset
      reg myCounter_io_start_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), myCounter_io_start_REG) @[PathFinder.scala 33:32]
      myCounter_io_start_REG <= io.DataValid @[PathFinder.scala 33:32]
      myCounter.io.start <= myCounter_io_start_REG @[PathFinder.scala 33:22]
      myCounter.io.Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 34:34]
      myCounter.io.Streaming_matrix[0] <= io.Streaming_matrix[0] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[1] <= io.Streaming_matrix[1] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[2] <= io.Streaming_matrix[2] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[3] <= io.Streaming_matrix[3] @[PathFinder.scala 35:33]
      inst Distribution of Distribution @[PathFinder.scala 37:28]
      Distribution.clock <= clock
      Distribution.reset <= reset
      Distribution.io.valid <= myCounter.io.valid @[PathFinder.scala 39:25]
      Distribution.io.s <= io.NoDPE @[PathFinder.scala 40:21]
      io.iteration <= Distribution.io.iteration @[PathFinder.scala 41:16]
      io.validIteration <= Distribution.io.validIteration @[PathFinder.scala 42:21]
      Distribution.io.matrix[0][0] <= myCounter.io.counterMatrix1.bits[0][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][1] <= myCounter.io.counterMatrix1.bits[0][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][2] <= myCounter.io.counterMatrix1.bits[0][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][3] <= myCounter.io.counterMatrix1.bits[0][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][0] <= myCounter.io.counterMatrix1.bits[1][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][1] <= myCounter.io.counterMatrix1.bits[1][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][2] <= myCounter.io.counterMatrix1.bits[1][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][3] <= myCounter.io.counterMatrix1.bits[1][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][0] <= myCounter.io.counterMatrix1.bits[2][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][1] <= myCounter.io.counterMatrix1.bits[2][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][2] <= myCounter.io.counterMatrix1.bits[2][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][3] <= myCounter.io.counterMatrix1.bits[2][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][0] <= myCounter.io.counterMatrix1.bits[3][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][1] <= myCounter.io.counterMatrix1.bits[3][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][2] <= myCounter.io.counterMatrix1.bits[3][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][3] <= myCounter.io.counterMatrix1.bits[3][3] @[PathFinder.scala 43:26]
      when Distribution.io.ProcessValid : @[PathFinder.scala 52:40]
        myCounter.io.counterMatrix1.ready <= UInt<1>("h1") @[PathFinder.scala 53:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h1") @[PathFinder.scala 54:39]
        myMuxes.io.mat1[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat2[0] <= io.Streaming_matrix[0] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[1] <= io.Streaming_matrix[1] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[2] <= io.Streaming_matrix[2] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[3] <= io.Streaming_matrix[3] @[PathFinder.scala 57:21]
        myMuxes.io.counterMatrix1 <= Distribution.io.out @[PathFinder.scala 58:31]
        myMuxes.io.counterMatrix2 <= myCounter.io.counterMatrix2.bits @[PathFinder.scala 59:31]
      else :
        myCounter.io.counterMatrix1.ready <= UInt<1>("h0") @[PathFinder.scala 62:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h0") @[PathFinder.scala 64:39]
        myMuxes.io.mat1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat2[0] <= counterRegs2[0] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[1] <= counterRegs2[1] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[2] <= counterRegs2[2] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[3] <= counterRegs2[3] @[PathFinder.scala 66:21]
        myMuxes.io.counterMatrix1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix2[0] <= counterRegs2[0] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[1] <= counterRegs2[1] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[2] <= counterRegs2[2] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[3] <= counterRegs2[3] @[PathFinder.scala 68:31]
      io.PF_Valid <= myMuxes.io.valid @[PathFinder.scala 74:15]
      io.i_mux_bus <= myMuxes.io.i_mux_bus @[PathFinder.scala 75:16]
      io.Source <= myMuxes.io.Source @[PathFinder.scala 76:13]
      io.destination <= myMuxes.io.destination @[PathFinder.scala 77:18]
    else :
      io.validIteration <= UInt<1>("h0") @[PathFinder.scala 79:21]
      io.iteration <= UInt<1>("h0") @[PathFinder.scala 80:16]
      io.PF_Valid <= UInt<1>("h0") @[PathFinder.scala 81:15]
      wire _WIRE : UInt<32>[16] @[PathFinder.scala 82:35]
      _WIRE[0] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[1] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[2] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[3] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[4] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[5] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[6] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[7] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[8] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[9] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[10] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[11] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[12] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[13] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[14] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[15] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      wire _WIRE_1 : UInt<32>[16]
      _WIRE_1 <= _WIRE
      io.i_mux_bus <= _WIRE_1 @[PathFinder.scala 82:16]
      wire _WIRE_2 : UInt<32>[16] @[PathFinder.scala 83:32]
      _WIRE_2[0] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[1] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[2] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[3] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[4] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[5] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[6] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[7] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[8] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[9] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[10] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[11] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[12] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[13] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[14] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[15] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      wire _WIRE_3 : UInt<32>[16]
      _WIRE_3 <= _WIRE_2
      io.Source <= _WIRE_3 @[PathFinder.scala 83:13]
      wire _WIRE_4 : UInt<32>[16] @[PathFinder.scala 84:37]
      _WIRE_4[0] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[1] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[2] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[3] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[4] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[5] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[6] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[7] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[8] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[9] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[10] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[11] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[12] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[13] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[14] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[15] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      wire _WIRE_5 : UInt<32>[16]
      _WIRE_5 <= _WIRE_4
      io.destination <= _WIRE_5 @[PathFinder.scala 84:18]

  module Muxes_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip mat1 : UInt<16>[4][4], flip mat2 : UInt<16>[4], flip counterMatrix1 : UInt<16>[4][4], flip counterMatrix2 : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], valid : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[Muxes.scala 19:40]
    prevStationary_matrix[0][0] <= io.mat1[0][0] @[Muxes.scala 19:40]
    prevStationary_matrix[0][1] <= io.mat1[0][1] @[Muxes.scala 19:40]
    prevStationary_matrix[0][2] <= io.mat1[0][2] @[Muxes.scala 19:40]
    prevStationary_matrix[0][3] <= io.mat1[0][3] @[Muxes.scala 19:40]
    prevStationary_matrix[1][0] <= io.mat1[1][0] @[Muxes.scala 19:40]
    prevStationary_matrix[1][1] <= io.mat1[1][1] @[Muxes.scala 19:40]
    prevStationary_matrix[1][2] <= io.mat1[1][2] @[Muxes.scala 19:40]
    prevStationary_matrix[1][3] <= io.mat1[1][3] @[Muxes.scala 19:40]
    prevStationary_matrix[2][0] <= io.mat1[2][0] @[Muxes.scala 19:40]
    prevStationary_matrix[2][1] <= io.mat1[2][1] @[Muxes.scala 19:40]
    prevStationary_matrix[2][2] <= io.mat1[2][2] @[Muxes.scala 19:40]
    prevStationary_matrix[2][3] <= io.mat1[2][3] @[Muxes.scala 19:40]
    prevStationary_matrix[3][0] <= io.mat1[3][0] @[Muxes.scala 19:40]
    prevStationary_matrix[3][1] <= io.mat1[3][1] @[Muxes.scala 19:40]
    prevStationary_matrix[3][2] <= io.mat1[3][2] @[Muxes.scala 19:40]
    prevStationary_matrix[3][3] <= io.mat1[3][3] @[Muxes.scala 19:40]
    reg prevStreaming_matrix : UInt<16>[4], clock with :
      reset => (UInt<1>("h0"), prevStreaming_matrix) @[Muxes.scala 20:39]
    prevStreaming_matrix[0] <= io.mat2[0] @[Muxes.scala 20:39]
    prevStreaming_matrix[1] <= io.mat2[1] @[Muxes.scala 20:39]
    prevStreaming_matrix[2] <= io.mat2[2] @[Muxes.scala 20:39]
    prevStreaming_matrix[3] <= io.mat2[3] @[Muxes.scala 20:39]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[Muxes.scala 21:31]
    matricesAreEqual <= UInt<1>("h1") @[Muxes.scala 22:22]
    reg jValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 27:25]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 28:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 29:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 30:20]
    reg counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 31:26]
    wire _mux_WIRE : UInt<4>[16] @[Muxes.scala 32:30]
    _mux_WIRE[0] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[1] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[2] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[3] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[4] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[5] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[6] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[7] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[8] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[9] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[10] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[11] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[12] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[13] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[14] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[15] <= UInt<4>("h0") @[Muxes.scala 32:30]
    reg mux : UInt<4>[16], clock with :
      reset => (reset, _mux_WIRE) @[Muxes.scala 32:22]
    wire _src_WIRE : UInt<16>[16] @[Muxes.scala 33:30]
    _src_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 33:30]
    reg src : UInt<16>[16], clock with :
      reset => (reset, _src_WIRE) @[Muxes.scala 33:22]
    wire _dest_WIRE : UInt<16>[16] @[Muxes.scala 34:31]
    _dest_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 34:31]
    reg dest : UInt<16>[16], clock with :
      reset => (reset, _dest_WIRE) @[Muxes.scala 34:23]
    io.i_mux_bus <= mux @[Muxes.scala 35:18]
    io.Source <= src @[Muxes.scala 36:15]
    io.destination <= dest @[Muxes.scala 37:20]
    node _T = neq(io.mat1[0][0], prevStationary_matrix[0][0]) @[Muxes.scala 45:28]
    when _T : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_1 = neq(io.mat1[0][1], prevStationary_matrix[0][1]) @[Muxes.scala 45:28]
    when _T_1 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_2 = neq(io.mat1[0][2], prevStationary_matrix[0][2]) @[Muxes.scala 45:28]
    when _T_2 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_3 = neq(io.mat1[0][3], prevStationary_matrix[0][3]) @[Muxes.scala 45:28]
    when _T_3 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_4 = neq(io.mat2[0], prevStreaming_matrix[0]) @[Muxes.scala 49:23]
    when _T_4 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_5 = neq(io.mat1[1][0], prevStationary_matrix[1][0]) @[Muxes.scala 45:28]
    when _T_5 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_6 = neq(io.mat1[1][1], prevStationary_matrix[1][1]) @[Muxes.scala 45:28]
    when _T_6 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_7 = neq(io.mat1[1][2], prevStationary_matrix[1][2]) @[Muxes.scala 45:28]
    when _T_7 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_8 = neq(io.mat1[1][3], prevStationary_matrix[1][3]) @[Muxes.scala 45:28]
    when _T_8 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_9 = neq(io.mat2[1], prevStreaming_matrix[1]) @[Muxes.scala 49:23]
    when _T_9 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_10 = neq(io.mat1[2][0], prevStationary_matrix[2][0]) @[Muxes.scala 45:28]
    when _T_10 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_11 = neq(io.mat1[2][1], prevStationary_matrix[2][1]) @[Muxes.scala 45:28]
    when _T_11 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_12 = neq(io.mat1[2][2], prevStationary_matrix[2][2]) @[Muxes.scala 45:28]
    when _T_12 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_13 = neq(io.mat1[2][3], prevStationary_matrix[2][3]) @[Muxes.scala 45:28]
    when _T_13 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_14 = neq(io.mat2[2], prevStreaming_matrix[2]) @[Muxes.scala 49:23]
    when _T_14 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_15 = neq(io.mat1[3][0], prevStationary_matrix[3][0]) @[Muxes.scala 45:28]
    when _T_15 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_16 = neq(io.mat1[3][1], prevStationary_matrix[3][1]) @[Muxes.scala 45:28]
    when _T_16 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_17 = neq(io.mat1[3][2], prevStationary_matrix[3][2]) @[Muxes.scala 45:28]
    when _T_17 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_18 = neq(io.mat1[3][3], prevStationary_matrix[3][3]) @[Muxes.scala 45:28]
    when _T_18 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_19 = neq(io.mat2[3], prevStreaming_matrix[3]) @[Muxes.scala 49:23]
    when _T_19 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_20 = bits(j, 1, 0)
    node _T_21 = bits(i, 1, 0)
    node _T_22 = neq(io.counterMatrix1[_T_20][_T_21], UInt<1>("h0")) @[Muxes.scala 54:36]
    node _T_23 = bits(i, 1, 0)
    node _T_24 = neq(io.mat2[_T_23], UInt<1>("h0")) @[Muxes.scala 54:60]
    node _T_25 = and(_T_22, _T_24) @[Muxes.scala 54:45]
    when _T_25 : @[Muxes.scala 54:70]
      node _T_26 = bits(j, 1, 0)
      node _T_27 = bits(i, 1, 0)
      node _T_28 = bits(i, 1, 0)
      node _T_29 = leq(io.counterMatrix1[_T_26][_T_27], io.counterMatrix2[_T_28]) @[Muxes.scala 56:38]
      when _T_29 : @[Muxes.scala 56:62]
        node _T_30 = bits(counter, 3, 0)
        node _mux_T = bits(i, 1, 0)
        node _mux_T_1 = sub(io.counterMatrix2[_mux_T], UInt<1>("h1")) @[Muxes.scala 57:51]
        node _mux_T_2 = tail(_mux_T_1, 1) @[Muxes.scala 57:51]
        node _mux_T_3 = bits(j, 1, 0)
        node _mux_T_4 = bits(i, 1, 0)
        node _mux_T_5 = sub(io.counterMatrix1[_mux_T_3][_mux_T_4], UInt<1>("h1")) @[Muxes.scala 57:85]
        node _mux_T_6 = tail(_mux_T_5, 1) @[Muxes.scala 57:85]
        node _mux_T_7 = sub(_mux_T_2, _mux_T_6) @[Muxes.scala 57:58]
        node _mux_T_8 = tail(_mux_T_7, 1) @[Muxes.scala 57:58]
        mux[_T_30] <= _mux_T_8 @[Muxes.scala 57:24]
        node _T_31 = bits(counter, 3, 0)
        node _src_T = bits(i, 1, 0)
        src[_T_31] <= io.mat2[_src_T] @[Muxes.scala 58:24]
        node _T_32 = bits(counter, 3, 0)
        node _dest_T = bits(j, 1, 0)
        node _dest_T_1 = bits(i, 1, 0)
        dest[_T_32] <= io.mat1[_dest_T][_dest_T_1] @[Muxes.scala 59:25]
      else :
        node _T_33 = bits(counter, 3, 0)
        node _mux_T_9 = bits(j, 1, 0)
        node _mux_T_10 = bits(i, 1, 0)
        node _mux_T_11 = sub(io.counterMatrix1[_mux_T_9][_mux_T_10], UInt<1>("h1")) @[Muxes.scala 61:54]
        node _mux_T_12 = tail(_mux_T_11, 1) @[Muxes.scala 61:54]
        node _mux_T_13 = bits(i, 1, 0)
        node _mux_T_14 = sub(io.counterMatrix2[_mux_T_13], UInt<1>("h1")) @[Muxes.scala 61:85]
        node _mux_T_15 = tail(_mux_T_14, 1) @[Muxes.scala 61:85]
        node _mux_T_16 = sub(_mux_T_12, _mux_T_15) @[Muxes.scala 61:61]
        node _mux_T_17 = tail(_mux_T_16, 1) @[Muxes.scala 61:61]
        mux[_T_33] <= _mux_T_17 @[Muxes.scala 61:24]
        node _T_34 = bits(counter, 3, 0)
        node _src_T_1 = bits(i, 1, 0)
        src[_T_34] <= io.mat2[_src_T_1] @[Muxes.scala 62:24]
        node _T_35 = bits(counter, 3, 0)
        node _dest_T_2 = bits(j, 1, 0)
        node _dest_T_3 = bits(i, 1, 0)
        dest[_T_35] <= io.mat1[_dest_T_2][_dest_T_3] @[Muxes.scala 63:25]
      node _T_36 = not(jValid) @[Muxes.scala 66:15]
      when _T_36 : @[Muxes.scala 66:24]
        node _T_37 = eq(j, UInt<2>("h3")) @[Muxes.scala 68:22]
        node _T_38 = eq(i, UInt<2>("h3")) @[Muxes.scala 68:56]
        node _T_39 = and(_T_37, _T_38) @[Muxes.scala 68:50]
        node _T_40 = not(_T_39) @[Muxes.scala 68:17]
        when _T_40 : @[Muxes.scala 68:85]
          node _counter_T = add(counter, UInt<1>("h1")) @[Muxes.scala 69:30]
          node _counter_T_1 = tail(_counter_T, 1) @[Muxes.scala 69:30]
          counter <= _counter_T_1 @[Muxes.scala 69:19]
    node _T_41 = eq(jValid, UInt<1>("h0")) @[Muxes.scala 76:19]
    when _T_41 : @[Muxes.scala 76:29]
      node _T_42 = lt(j, UInt<2>("h3")) @[Muxes.scala 78:14]
      when _T_42 : @[Muxes.scala 78:40]
        node _j_T = add(j, UInt<1>("h1")) @[Muxes.scala 79:16]
        node _j_T_1 = tail(_j_T, 1) @[Muxes.scala 79:16]
        j <= _j_T_1 @[Muxes.scala 79:11]
      else :
        node _T_43 = eq(j, UInt<2>("h3")) @[Muxes.scala 80:21]
        node _T_44 = eq(i, UInt<2>("h3")) @[Muxes.scala 80:55]
        node _T_45 = and(_T_43, _T_44) @[Muxes.scala 80:49]
        when _T_45 : @[Muxes.scala 80:83]
          jValid <= UInt<1>("h1") @[Muxes.scala 81:16]
        else :
          j <= UInt<1>("h0") @[Muxes.scala 83:11]
          node _T_46 = lt(i, UInt<2>("h3")) @[Muxes.scala 84:16]
          when _T_46 : @[Muxes.scala 84:42]
            node _i_T = add(i, UInt<1>("h1")) @[Muxes.scala 85:18]
            node _i_T_1 = tail(_i_T, 1) @[Muxes.scala 85:18]
            i <= _i_T_1 @[Muxes.scala 85:13]
    else :
      node _T_47 = eq(jValid, UInt<1>("h1")) @[Muxes.scala 89:25]
      node _T_48 = eq(matricesAreEqual, UInt<1>("h0")) @[Muxes.scala 89:55]
      node _T_49 = and(_T_47, _T_48) @[Muxes.scala 89:34]
      when _T_49 : @[Muxes.scala 89:64]
        i <= UInt<1>("h0") @[Muxes.scala 91:9]
        j <= UInt<1>("h0") @[Muxes.scala 92:9]
        jValid <= UInt<1>("h0") @[Muxes.scala 93:14]
        counter <= UInt<1>("h0") @[Muxes.scala 94:15]
        src[0] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[0] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[0] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[1] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[1] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[1] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[2] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[2] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[2] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[3] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[3] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[3] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[4] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[4] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[4] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[5] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[5] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[5] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[6] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[6] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[6] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[7] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[7] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[7] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[8] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[8] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[8] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[9] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[9] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[9] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[10] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[10] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[10] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[11] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[11] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[11] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[12] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[12] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[12] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[13] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[13] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[13] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[14] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[14] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[14] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[15] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[15] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[15] <= UInt<1>("h0") @[Muxes.scala 99:16]
    reg jNext : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 105:24]
    jNext <= j @[Muxes.scala 106:11]
    node _T_50 = neq(k, UInt<1>("h0")) @[Muxes.scala 108:14]
    node _T_51 = eq(j, UInt<2>("h3")) @[Muxes.scala 108:28]
    node _T_52 = and(_T_50, _T_51) @[Muxes.scala 108:22]
    node _T_53 = eq(i, UInt<2>("h3")) @[Muxes.scala 108:60]
    node _T_54 = and(_T_52, _T_53) @[Muxes.scala 108:54]
    node _T_55 = eq(jNext, UInt<2>("h2")) @[Muxes.scala 108:96]
    node _T_56 = and(_T_54, _T_55) @[Muxes.scala 108:86]
    when _T_56 : @[Muxes.scala 108:122]
      io.valid <= UInt<1>("h1") @[Muxes.scala 109:16]
    else :
      io.valid <= UInt<1>("h0") @[Muxes.scala 111:16]
    node _T_57 = eq(i, UInt<2>("h3")) @[Muxes.scala 113:14]
    node _T_58 = eq(j, UInt<2>("h3")) @[Muxes.scala 113:48]
    node _T_59 = and(_T_57, _T_58) @[Muxes.scala 113:42]
    when _T_59 : @[Muxes.scala 113:76]
      node _k_T = add(k, UInt<1>("h1")) @[Muxes.scala 114:14]
      node _k_T_1 = tail(_k_T, 1) @[Muxes.scala 114:14]
      k <= _k_T_1 @[Muxes.scala 114:9]

  module SourceDestination_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], counterMatrix1 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4][4]}, counterMatrix2 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4]}, valid : UInt<1>, flip start : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[SourceDestination.scala 15:40]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[SourceDestination.scala 16:31]
    wire _counterRegs1_WIRE : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_1 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_2 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_3 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[SourceDestination.scala 17:39]
    reg counterRegs1 : UInt<16>[4][4], clock with :
      reset => (reset, _counterRegs1_WIRE_4) @[SourceDestination.scala 17:31]
    wire _counterRegs2_WIRE : UInt<16>[4] @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    reg counterRegs2 : UInt<16>[4], clock with :
      reset => (reset, _counterRegs2_WIRE) @[SourceDestination.scala 18:31]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 20:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 21:20]
    reg valid1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SourceDestination.scala 24:25]
    reg jValid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), jValid) @[SourceDestination.scala 25:21]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 26:20]
    reg counter1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 28:27]
    reg counter2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 29:27]
    node _reg_i_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 31:29]
    node _reg_i_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 31:63]
    node _reg_i_T_2 = and(_reg_i_T, _reg_i_T_1) @[SourceDestination.scala 31:57]
    reg reg_i : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SourceDestination.scala 31:24]
    reg_i <= _reg_i_T_2 @[SourceDestination.scala 31:24]
    when io.start : @[SourceDestination.scala 34:17]
      matricesAreEqual <= UInt<1>("h1") @[SourceDestination.scala 36:22]
      node _T = neq(io.Stationary_matrix[0][0], prevStationary_matrix[0][0]) @[SourceDestination.scala 40:41]
      when _T : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_1 = neq(io.Stationary_matrix[0][1], prevStationary_matrix[0][1]) @[SourceDestination.scala 40:41]
      when _T_1 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_2 = neq(io.Stationary_matrix[0][2], prevStationary_matrix[0][2]) @[SourceDestination.scala 40:41]
      when _T_2 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_3 = neq(io.Stationary_matrix[0][3], prevStationary_matrix[0][3]) @[SourceDestination.scala 40:41]
      when _T_3 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_4 = neq(io.Stationary_matrix[1][0], prevStationary_matrix[1][0]) @[SourceDestination.scala 40:41]
      when _T_4 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_5 = neq(io.Stationary_matrix[1][1], prevStationary_matrix[1][1]) @[SourceDestination.scala 40:41]
      when _T_5 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_6 = neq(io.Stationary_matrix[1][2], prevStationary_matrix[1][2]) @[SourceDestination.scala 40:41]
      when _T_6 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_7 = neq(io.Stationary_matrix[1][3], prevStationary_matrix[1][3]) @[SourceDestination.scala 40:41]
      when _T_7 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_8 = neq(io.Stationary_matrix[2][0], prevStationary_matrix[2][0]) @[SourceDestination.scala 40:41]
      when _T_8 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_9 = neq(io.Stationary_matrix[2][1], prevStationary_matrix[2][1]) @[SourceDestination.scala 40:41]
      when _T_9 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_10 = neq(io.Stationary_matrix[2][2], prevStationary_matrix[2][2]) @[SourceDestination.scala 40:41]
      when _T_10 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_11 = neq(io.Stationary_matrix[2][3], prevStationary_matrix[2][3]) @[SourceDestination.scala 40:41]
      when _T_11 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_12 = neq(io.Stationary_matrix[3][0], prevStationary_matrix[3][0]) @[SourceDestination.scala 40:41]
      when _T_12 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_13 = neq(io.Stationary_matrix[3][1], prevStationary_matrix[3][1]) @[SourceDestination.scala 40:41]
      when _T_13 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_14 = neq(io.Stationary_matrix[3][2], prevStationary_matrix[3][2]) @[SourceDestination.scala 40:41]
      when _T_14 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_15 = neq(io.Stationary_matrix[3][3], prevStationary_matrix[3][3]) @[SourceDestination.scala 40:41]
      when _T_15 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      jValid <= UInt<1>("h0") @[SourceDestination.scala 49:12]
      node _T_16 = bits(i, 1, 0)
      node _T_17 = bits(j, 1, 0)
      node _T_18 = neq(io.Stationary_matrix[_T_16][_T_17], UInt<1>("h0")) @[SourceDestination.scala 53:38]
      when _T_18 : @[SourceDestination.scala 53:47]
        node _T_19 = lt(counter1, UInt<3>("h5")) @[SourceDestination.scala 54:22]
        when _T_19 : @[SourceDestination.scala 54:48]
          node _T_20 = bits(i, 1, 0)
          node _T_21 = bits(j, 1, 0)
          counterRegs1[_T_20][_T_21] <= counter1 @[SourceDestination.scala 55:28]
          node _T_22 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 56:20]
          node _T_23 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 56:54]
          node _T_24 = and(_T_22, _T_23) @[SourceDestination.scala 56:48]
          node _T_25 = not(_T_24) @[SourceDestination.scala 56:15]
          when _T_25 : @[SourceDestination.scala 56:83]
            node _counter1_T = add(counter1, UInt<1>("h1")) @[SourceDestination.scala 57:32]
            node _counter1_T_1 = tail(_counter1_T, 1) @[SourceDestination.scala 57:32]
            counter1 <= _counter1_T_1 @[SourceDestination.scala 57:20]
        else :
          node _T_26 = bits(i, 1, 0)
          node _T_27 = bits(j, 1, 0)
          counterRegs1[_T_26][_T_27] <= UInt<1>("h1") @[SourceDestination.scala 60:28]
          counter1 <= UInt<2>("h2") @[SourceDestination.scala 61:18]
      else :
        node _T_28 = bits(i, 1, 0)
        node _T_29 = bits(j, 1, 0)
        counterRegs1[_T_28][_T_29] <= UInt<1>("h0") @[SourceDestination.scala 64:26]
      node _T_30 = bits(k, 1, 0)
      node _T_31 = neq(io.Streaming_matrix[_T_30], UInt<1>("h0")) @[SourceDestination.scala 67:34]
      when _T_31 : @[SourceDestination.scala 67:43]
        node _T_32 = bits(k, 1, 0)
        counterRegs2[_T_32] <= counter2 @[SourceDestination.scala 68:23]
        node _counter2_T = add(counter2, UInt<1>("h1")) @[SourceDestination.scala 69:28]
        node _counter2_T_1 = tail(_counter2_T, 1) @[SourceDestination.scala 69:28]
        counter2 <= _counter2_T_1 @[SourceDestination.scala 69:16]
      node _valid1_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 71:23]
      node _valid1_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 71:57]
      node _valid1_T_2 = and(_valid1_T, _valid1_T_1) @[SourceDestination.scala 71:51]
      node _valid1_T_3 = eq(_valid1_T_2, reg_i) @[SourceDestination.scala 71:86]
      node _valid1_T_4 = mux(_valid1_T_3, UInt<1>("h1"), UInt<1>("h0")) @[SourceDestination.scala 71:18]
      valid1 <= _valid1_T_4 @[SourceDestination.scala 71:12]
      node _T_33 = eq(k, UInt<2>("h3")) @[SourceDestination.scala 73:12]
      when _T_33 : @[SourceDestination.scala 73:37]
        k <= k @[SourceDestination.scala 74:9]
        counter2 <= counter2 @[SourceDestination.scala 75:16]
      else :
        node _T_34 = geq(k, UInt<1>("h0")) @[SourceDestination.scala 76:19]
        when _T_34 : @[SourceDestination.scala 76:26]
          node _k_T = add(k, UInt<1>("h1")) @[SourceDestination.scala 77:16]
          node _k_T_1 = tail(_k_T, 1) @[SourceDestination.scala 77:16]
          k <= _k_T_1 @[SourceDestination.scala 77:11]
      node _T_35 = eq(jValid, UInt<1>("h0")) @[SourceDestination.scala 79:18]
      when _T_35 : @[SourceDestination.scala 79:26]
        node _T_36 = lt(j, UInt<2>("h3")) @[SourceDestination.scala 80:14]
        when _T_36 : @[SourceDestination.scala 80:40]
          node _j_T = add(j, UInt<1>("h1")) @[SourceDestination.scala 81:16]
          node _j_T_1 = tail(_j_T, 1) @[SourceDestination.scala 81:16]
          j <= _j_T_1 @[SourceDestination.scala 81:11]
        else :
          node _T_37 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 82:21]
          node _T_38 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 82:55]
          node _T_39 = and(_T_37, _T_38) @[SourceDestination.scala 82:49]
          when _T_39 : @[SourceDestination.scala 82:83]
            jValid <= UInt<1>("h1") @[SourceDestination.scala 83:16]
          else :
            j <= UInt<1>("h0") @[SourceDestination.scala 85:11]
            node _T_40 = lt(i, UInt<2>("h3")) @[SourceDestination.scala 86:16]
            when _T_40 : @[SourceDestination.scala 86:42]
              node _i_T = add(i, UInt<1>("h1")) @[SourceDestination.scala 87:18]
              node _i_T_1 = tail(_i_T, 1) @[SourceDestination.scala 87:18]
              i <= _i_T_1 @[SourceDestination.scala 87:13]
      else :
        node _T_41 = eq(jValid, UInt<1>("h1")) @[SourceDestination.scala 90:25]
        node _T_42 = eq(matricesAreEqual, UInt<1>("h0")) @[SourceDestination.scala 90:55]
        node _T_43 = and(_T_41, _T_42) @[SourceDestination.scala 90:34]
        when _T_43 : @[SourceDestination.scala 90:64]
          i <= UInt<1>("h0") @[SourceDestination.scala 91:9]
          j <= UInt<1>("h0") @[SourceDestination.scala 92:9]
          k <= UInt<1>("h0") @[SourceDestination.scala 93:9]
          counter1 <= UInt<1>("h1") @[SourceDestination.scala 94:16]
          counter2 <= UInt<1>("h1") @[SourceDestination.scala 95:16]
          counterRegs1[0][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[0] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[1][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[1] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[2][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[2] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[3][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[3] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
      node _io_valid_T = eq(i, UInt<2>("h3")) @[SourceDestination.scala 104:19]
      node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 104:34]
      node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[SourceDestination.scala 104:28]
      io.valid <= _io_valid_T_2 @[SourceDestination.scala 104:14]
      node _T_44 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 106:14]
      node _T_45 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 106:48]
      node _T_46 = and(_T_44, _T_45) @[SourceDestination.scala 106:42]
      when _T_46 : @[SourceDestination.scala 106:76]
        io.counterMatrix1.valid <= UInt<1>("h1") @[SourceDestination.scala 107:31]
        io.counterMatrix2.valid <= UInt<1>("h1") @[SourceDestination.scala 108:31]
      else :
        io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 110:31]
        io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 111:31]
      io.counterMatrix1.bits <= counterRegs1 @[SourceDestination.scala 114:28]
      io.counterMatrix2.bits <= counterRegs2 @[SourceDestination.scala 115:28]
    else :
      wire _WIRE : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_1 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_1[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_2 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_2[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_3 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_3[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_4 : UInt<32>[4][4] @[SourceDestination.scala 118:36]
      _WIRE_4[0] <= _WIRE @[SourceDestination.scala 118:36]
      _WIRE_4[1] <= _WIRE_1 @[SourceDestination.scala 118:36]
      _WIRE_4[2] <= _WIRE_2 @[SourceDestination.scala 118:36]
      _WIRE_4[3] <= _WIRE_3 @[SourceDestination.scala 118:36]
      io.counterMatrix1.bits <= _WIRE_4 @[SourceDestination.scala 118:26]
      wire _WIRE_5 : UInt<32>[4] @[SourceDestination.scala 119:36]
      _WIRE_5[0] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[1] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[2] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[3] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      io.counterMatrix2.bits <= _WIRE_5 @[SourceDestination.scala 119:26]
      io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 120:27]
      io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 121:27]
      io.valid <= UInt<1>("h0") @[SourceDestination.scala 122:12]

  module abc2_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip IDex : UInt<32>, flip JDex : UInt<32>, flip valid : UInt<1>, flip mat : UInt<32>[4][4], OutMat : UInt<32>[4][4], Ovalid : UInt<1>, ProcessValid : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_1 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_2 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_3 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[singleLoop.scala 19:28]
    _b_WIRE_4[0] <= _b_WIRE @[singleLoop.scala 19:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[singleLoop.scala 19:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[singleLoop.scala 19:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[singleLoop.scala 19:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[singleLoop.scala 19:20]
    io.OutMat <= b @[singleLoop.scala 20:15]
    reg j : UInt<32>, clock with :
      reset => (UInt<1>("h0"), j) @[singleLoop.scala 21:16]
    j <= io.JDex @[singleLoop.scala 22:7]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[singleLoop.scala 23:20]
    node _T = neq(a, UInt<1>("h0")) @[singleLoop.scala 24:25]
    node _T_1 = and(io.valid, _T) @[singleLoop.scala 24:19]
    when _T_1 : @[singleLoop.scala 24:34]
      node _T_2 = bits(io.IDex, 1, 0)
      node _T_3 = bits(j, 1, 0)
      node _b_T = bits(io.IDex, 1, 0)
      node _b_T_1 = bits(j, 1, 0)
      b[_T_2][_T_3] <= io.mat[_b_T][_b_T_1] @[singleLoop.scala 25:19]
    node _T_4 = eq(j, UInt<2>("h3")) @[singleLoop.scala 26:13]
    when _T_4 : @[singleLoop.scala 26:21]
      node _io_Ovalid_T = bits(io.IDex, 1, 0)
      node _io_Ovalid_T_1 = eq(io.mat[_io_Ovalid_T][3], UInt<3>("h4")) @[singleLoop.scala 27:45]
      reg io_Ovalid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), io_Ovalid_REG) @[singleLoop.scala 27:25]
      io_Ovalid_REG <= _io_Ovalid_T_1 @[singleLoop.scala 27:25]
      io.Ovalid <= io_Ovalid_REG @[singleLoop.scala 27:15]
    else :
      io.Ovalid <= UInt<1>("h0") @[singleLoop.scala 29:19]
    node _io_ProcessValid_T = eq(j, UInt<2>("h3")) @[singleLoop.scala 31:35]
    wire _io_ProcessValid_WIRE : UInt<1>
    _io_ProcessValid_WIRE <= _io_ProcessValid_T
    io.ProcessValid <= _io_ProcessValid_WIRE @[singleLoop.scala 31:21]
    when io.valid : @[singleLoop.scala 45:20]
      node _a_T = add(a, UInt<1>("h1")) @[singleLoop.scala 46:12]
      node _a_T_1 = tail(_a_T, 1) @[singleLoop.scala 46:12]
      a <= _a_T_1 @[singleLoop.scala 46:7]
    node _T_5 = neq(a, UInt<1>("h0")) @[singleLoop.scala 48:26]
    node _T_6 = and(io.valid, _T_5) @[singleLoop.scala 48:20]
    node _T_7 = lt(j, UInt<2>("h3")) @[singleLoop.scala 48:41]
    node _T_8 = and(_T_6, _T_7) @[singleLoop.scala 48:35]
    when _T_8 : @[singleLoop.scala 48:65]
      node _j_T = add(j, UInt<1>("h1")) @[singleLoop.scala 49:16]
      node _j_T_1 = tail(_j_T, 1) @[singleLoop.scala 49:16]
      j <= _j_T_1 @[singleLoop.scala 49:11]
    else :
      node _T_9 = eq(j, UInt<2>("h3")) @[singleLoop.scala 50:18]
      when _T_9 : @[singleLoop.scala 50:43]
        j <= j @[singleLoop.scala 51:11]

  module abc3_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip PreMat : UInt<32>[4][4], flip IDex : UInt<32>, flip JDex : UInt<32>, flip mat : UInt<32>[4][4], flip i_valid : UInt<1>, valid : UInt<1>, Omat : UInt<32>[4][4], flip merge : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_1 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_2 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_3 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[0] <= _b_WIRE @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[MergeDIstribution.scala 18:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[MergeDIstribution.scala 18:20]
    io.Omat <= b @[MergeDIstribution.scala 19:13]
    reg check : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 20:24]
    wire counter : UInt<1>
    counter <= UInt<1>("h0")
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 22:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 23:20]
    node _io_valid_T = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 24:20]
    node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 24:35]
    node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[MergeDIstribution.scala 24:29]
    io.valid <= _io_valid_T_2 @[MergeDIstribution.scala 24:14]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 25:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 26:20]
    reg l : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 27:20]
    reg delay : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 29:24]
    node _T = leq(delay, UInt<2>("h3")) @[MergeDIstribution.scala 31:17]
    node _T_1 = and(_T, io.merge) @[MergeDIstribution.scala 31:41]
    when _T_1 : @[MergeDIstribution.scala 31:53]
      node _delay_T = add(delay, UInt<1>("h1")) @[MergeDIstribution.scala 32:24]
      node _delay_T_1 = tail(_delay_T, 1) @[MergeDIstribution.scala 32:24]
      delay <= _delay_T_1 @[MergeDIstribution.scala 32:15]
    node _T_2 = eq(delay, UInt<3>("h4")) @[MergeDIstribution.scala 41:29]
    node _T_3 = and(io.merge, _T_2) @[MergeDIstribution.scala 41:19]
    when _T_3 : @[MergeDIstribution.scala 41:53]
      node _T_4 = lt(k, io.IDex) @[MergeDIstribution.scala 43:14]
      node _T_5 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 43:30]
      node _T_6 = and(_T_4, _T_5) @[MergeDIstribution.scala 43:24]
      when _T_6 : @[MergeDIstribution.scala 43:56]
        node _k_T = add(k, UInt<1>("h1")) @[MergeDIstribution.scala 44:16]
        node _k_T_1 = tail(_k_T, 1) @[MergeDIstribution.scala 44:16]
        k <= _k_T_1 @[MergeDIstribution.scala 44:11]
        l <= UInt<1>("h0") @[MergeDIstribution.scala 45:11]
      else :
        node _T_7 = leq(k, io.IDex) @[MergeDIstribution.scala 46:20]
        node _T_8 = lt(l, UInt<2>("h3")) @[MergeDIstribution.scala 46:37]
        node _T_9 = and(_T_7, _T_8) @[MergeDIstribution.scala 46:31]
        when _T_9 : @[MergeDIstribution.scala 46:61]
          node _l_T = add(l, UInt<1>("h1")) @[MergeDIstribution.scala 47:16]
          node _l_T_1 = tail(_l_T, 1) @[MergeDIstribution.scala 47:16]
          l <= _l_T_1 @[MergeDIstribution.scala 47:11]
        else :
          node _T_10 = eq(k, io.IDex) @[MergeDIstribution.scala 48:18]
          node _T_11 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 48:36]
          node _T_12 = and(_T_10, _T_11) @[MergeDIstribution.scala 48:30]
          when _T_12 : @[MergeDIstribution.scala 48:62]
            l <= l @[MergeDIstribution.scala 49:11]
      node _T_13 = bits(k, 1, 0)
      node _T_14 = bits(l, 1, 0)
      node _b_T = bits(k, 1, 0)
      node _b_T_1 = bits(l, 1, 0)
      b[_T_13][_T_14] <= io.PreMat[_b_T][_b_T_1] @[MergeDIstribution.scala 52:13]
    node _T_15 = eq(i, UInt<1>("h0")) @[MergeDIstribution.scala 54:28]
    node _T_16 = and(io.i_valid, _T_15) @[MergeDIstribution.scala 54:22]
    node _T_17 = eq(j, UInt<1>("h0")) @[MergeDIstribution.scala 54:44]
    node _T_18 = and(_T_16, _T_17) @[MergeDIstribution.scala 54:37]
    when _T_18 : @[MergeDIstribution.scala 54:53]
      node _i_T = add(io.IDex, UInt<1>("h1")) @[MergeDIstribution.scala 55:22]
      node _i_T_1 = tail(_i_T, 1) @[MergeDIstribution.scala 55:22]
      i <= _i_T_1 @[MergeDIstribution.scala 55:11]
      j <= UInt<1>("h0") @[MergeDIstribution.scala 56:11]
      node _check_T = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 57:24]
      node _check_T_1 = tail(_check_T, 1) @[MergeDIstribution.scala 57:24]
      check <= _check_T_1 @[MergeDIstribution.scala 57:15]
    node _T_19 = geq(check, UInt<1>("h1")) @[MergeDIstribution.scala 60:17]
    when _T_19 : @[MergeDIstribution.scala 60:24]
      counter <= UInt<1>("h1") @[MergeDIstribution.scala 61:17]
      node _check_T_2 = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 62:24]
      node _check_T_3 = tail(_check_T_2, 1) @[MergeDIstribution.scala 62:24]
      check <= _check_T_3 @[MergeDIstribution.scala 62:15]
    when io.merge : @[MergeDIstribution.scala 67:19]
      node _T_20 = bits(i, 1, 0)
      node _T_21 = bits(j, 1, 0)
      node _b_T_2 = bits(i, 1, 0)
      node _b_T_3 = bits(j, 1, 0)
      b[_T_20][_T_21] <= io.mat[_b_T_2][_b_T_3] @[MergeDIstribution.scala 68:13]
    when counter : @[MergeDIstribution.scala 97:14]
      node _T_22 = bits(i, 1, 0)
      node _T_23 = bits(j, 1, 0)
      node _T_24 = eq(io.mat[_T_22][_T_23], UInt<3>("h4")) @[MergeDIstribution.scala 100:23]
      when _T_24 : @[MergeDIstribution.scala 100:44]
        i <= i @[MergeDIstribution.scala 101:11]
        j <= j @[MergeDIstribution.scala 102:11]
        io.valid <= UInt<1>("h1") @[MergeDIstribution.scala 103:18]
      else :
        node _T_25 = lt(i, UInt<2>("h3")) @[MergeDIstribution.scala 104:20]
        node _T_26 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 104:49]
        node _T_27 = and(_T_25, _T_26) @[MergeDIstribution.scala 104:43]
        when _T_27 : @[MergeDIstribution.scala 104:75]
          node _i_T_2 = add(i, UInt<1>("h1")) @[MergeDIstribution.scala 105:16]
          node _i_T_3 = tail(_i_T_2, 1) @[MergeDIstribution.scala 105:16]
          i <= _i_T_3 @[MergeDIstribution.scala 105:11]
          j <= UInt<1>("h0") @[MergeDIstribution.scala 106:11]
        else :
          node _T_28 = leq(i, UInt<2>("h3")) @[MergeDIstribution.scala 107:20]
          node _T_29 = lt(j, UInt<2>("h3")) @[MergeDIstribution.scala 107:50]
          node _T_30 = and(_T_28, _T_29) @[MergeDIstribution.scala 107:44]
          when _T_30 : @[MergeDIstribution.scala 107:74]
            node _j_T = add(j, UInt<1>("h1")) @[MergeDIstribution.scala 108:16]
            node _j_T_1 = tail(_j_T, 1) @[MergeDIstribution.scala 108:16]
            j <= _j_T_1 @[MergeDIstribution.scala 108:11]
          else :
            node _T_31 = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 109:18]
            node _T_32 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 109:49]
            node _T_33 = and(_T_31, _T_32) @[MergeDIstribution.scala 109:43]
            when _T_33 : @[MergeDIstribution.scala 109:75]
              j <= j @[MergeDIstribution.scala 110:11]

  module Distribution_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip matrix : UInt<32>[4][4], flip s : UInt<32>, out : UInt<32>[4][4], ProcessValid : UInt<1>, flip valid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 19:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 20:20]
    reg count : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 21:24]
    wire _Idex_WIRE : UInt<32>[4] @[DIstribution.scala 22:31]
    _Idex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    reg Idex : UInt<32>[4], clock with :
      reset => (reset, _Idex_WIRE) @[DIstribution.scala 22:23]
    wire _Jdex_WIRE : UInt<32>[4] @[DIstribution.scala 23:31]
    _Jdex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    reg Jdex : UInt<32>[4], clock with :
      reset => (reset, _Jdex_WIRE) @[DIstribution.scala 23:23]
    wire _mat_WIRE : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_1 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_2 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_3 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 24:30]
    _mat_WIRE_4[0] <= _mat_WIRE @[DIstribution.scala 24:30]
    _mat_WIRE_4[1] <= _mat_WIRE_1 @[DIstribution.scala 24:30]
    _mat_WIRE_4[2] <= _mat_WIRE_2 @[DIstribution.scala 24:30]
    _mat_WIRE_4[3] <= _mat_WIRE_3 @[DIstribution.scala 24:30]
    reg mat : UInt<1>[4][4], clock with :
      reset => (reset, _mat_WIRE_4) @[DIstribution.scala 24:22]
    reg iterationNo : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 25:30]
    when io.valid : @[DIstribution.scala 27:21]
      node _io_validIteration_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 30:29]
      node _io_validIteration_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 30:62]
      node _io_validIteration_T_2 = and(_io_validIteration_T, _io_validIteration_T_1) @[DIstribution.scala 30:56]
      io.validIteration <= _io_validIteration_T_2 @[DIstribution.scala 30:23]
      io.iteration <= iterationNo @[DIstribution.scala 31:18]
      node _T = bits(i, 1, 0)
      node _T_1 = bits(j, 1, 0)
      node _T_2 = eq(io.matrix[_T][_T_1], UInt<1>("h1")) @[DIstribution.scala 34:27]
      when _T_2 : @[DIstribution.scala 34:35]
        node _iterationNo_T = add(iterationNo, UInt<1>("h1")) @[DIstribution.scala 35:34]
        node _iterationNo_T_1 = tail(_iterationNo_T, 1) @[DIstribution.scala 35:34]
        iterationNo <= _iterationNo_T_1 @[DIstribution.scala 35:19]
      mat <= io.matrix @[DIstribution.scala 38:9]
      node _T_3 = bits(i, 1, 0)
      node _T_4 = bits(j, 1, 0)
      node _T_5 = eq(io.matrix[_T_3][_T_4], UInt<1>("h1")) @[DIstribution.scala 47:28]
      when _T_5 : @[DIstribution.scala 47:38]
        node _count_T = add(count, UInt<1>("h1")) @[DIstribution.scala 48:24]
        node _count_T_1 = tail(_count_T, 1) @[DIstribution.scala 48:24]
        count <= _count_T_1 @[DIstribution.scala 48:15]
        node _T_6 = bits(count, 1, 0)
        Idex[_T_6] <= i @[DIstribution.scala 49:21]
        node _T_7 = bits(count, 1, 0)
        Jdex[_T_7] <= j @[DIstribution.scala 50:21]
      else :
        node _T_8 = bits(i, 1, 0)
        node _T_9 = bits(j, 1, 0)
        node _T_10 = eq(io.matrix[_T_8][_T_9], UInt<1>("h1")) @[DIstribution.scala 51:33]
        node _T_11 = eq(i, UInt<2>("h3")) @[DIstribution.scala 51:48]
        node _T_12 = and(_T_10, _T_11) @[DIstribution.scala 51:42]
        node _T_13 = eq(j, UInt<2>("h3")) @[DIstribution.scala 51:80]
        node _T_14 = and(_T_12, _T_13) @[DIstribution.scala 51:74]
        when _T_14 : @[DIstribution.scala 51:106]
          node _T_15 = bits(count, 1, 0)
          Idex[_T_15] <= i @[DIstribution.scala 52:21]
          node _T_16 = bits(count, 1, 0)
          Jdex[_T_16] <= j @[DIstribution.scala 53:21]
      inst part2 of abc2_1 @[DIstribution.scala 55:19]
      part2.clock <= clock
      part2.reset <= reset
      part2.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 56:14]
      part2.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 56:14]
      part2.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 56:14]
      part2.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 56:14]
      part2.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 56:14]
      part2.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 56:14]
      part2.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 56:14]
      part2.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 56:14]
      part2.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 56:14]
      part2.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 56:14]
      part2.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 56:14]
      part2.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 56:14]
      part2.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 56:14]
      part2.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 56:14]
      part2.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 56:14]
      part2.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 56:14]
      node _c_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 57:23]
      node _c_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 57:54]
      node _c_T_2 = and(_c_T, _c_T_1) @[DIstribution.scala 57:48]
      reg c : UInt<1>, clock with :
        reset => (UInt<1>("h0"), c) @[DIstribution.scala 57:20]
      c <= _c_T_2 @[DIstribution.scala 57:20]
      part2.io.valid <= c @[DIstribution.scala 58:20]
      when c : @[DIstribution.scala 59:13]
        node _part2_io_IDex_T = bits(io.s, 1, 0)
        part2.io.IDex <= Idex[_part2_io_IDex_T] @[DIstribution.scala 60:19]
        node _part2_io_JDex_T = bits(io.s, 1, 0)
        part2.io.JDex <= Jdex[_part2_io_JDex_T] @[DIstribution.scala 61:19]
      else :
        part2.io.IDex <= UInt<1>("h0") @[DIstribution.scala 63:19]
        part2.io.JDex <= UInt<1>("h0") @[DIstribution.scala 64:19]
      inst part3 of abc3_1 @[DIstribution.scala 69:23]
      part3.clock <= clock
      part3.reset <= reset
      wire check : UInt<1>
      check <= UInt<1>("h0")
      when part2.io.Ovalid : @[DIstribution.scala 75:26]
        check <= UInt<1>("h0") @[DIstribution.scala 76:15]
      else :
        check <= UInt<1>("h1") @[DIstribution.scala 78:15]
      node _e_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 80:17]
      node _e_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 80:49]
      node _e_T_2 = and(_e_T, _e_T_1) @[DIstribution.scala 80:43]
      node _e_T_3 = sub(count, UInt<1>("h1")) @[DIstribution.scala 80:85]
      node _e_T_4 = tail(_e_T_3, 1) @[DIstribution.scala 80:85]
      node _e_T_5 = lt(_e_T_4, io.s) @[DIstribution.scala 80:91]
      node e = and(_e_T_2, _e_T_5) @[DIstribution.scala 80:75]
      node _T_17 = and(part2.io.ProcessValid, check) @[DIstribution.scala 82:33]
      when _T_17 : @[DIstribution.scala 82:42]
        reg part3_io_merge_REG : UInt<1>, clock with :
          reset => (UInt<1>("h0"), part3_io_merge_REG) @[DIstribution.scala 83:30]
        part3_io_merge_REG <= c @[DIstribution.scala 83:30]
        part3.io.merge <= part3_io_merge_REG @[DIstribution.scala 83:20]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 84:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 84:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 84:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 84:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 84:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 84:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 84:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 84:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 84:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 84:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 84:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 84:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 84:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 84:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 84:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 84:18]
        part3.io.i_valid <= part2.io.ProcessValid @[DIstribution.scala 85:22]
        part3.io.PreMat[0][0] <= part2.io.OutMat[0][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][1] <= part2.io.OutMat[0][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][2] <= part2.io.OutMat[0][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][3] <= part2.io.OutMat[0][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][0] <= part2.io.OutMat[1][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][1] <= part2.io.OutMat[1][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][2] <= part2.io.OutMat[1][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][3] <= part2.io.OutMat[1][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][0] <= part2.io.OutMat[2][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][1] <= part2.io.OutMat[2][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][2] <= part2.io.OutMat[2][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][3] <= part2.io.OutMat[2][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][0] <= part2.io.OutMat[3][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][1] <= part2.io.OutMat[3][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][2] <= part2.io.OutMat[3][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][3] <= part2.io.OutMat[3][3] @[DIstribution.scala 86:21]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 87:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 87:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 87:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 87:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 87:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 87:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 87:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 87:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 87:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 87:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 87:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 87:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 87:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 87:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 87:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 87:18]
        node _part3_io_IDex_T = bits(io.s, 1, 0)
        part3.io.IDex <= Idex[_part3_io_IDex_T] @[DIstribution.scala 88:19]
        node _part3_io_JDex_T = bits(io.s, 1, 0)
        part3.io.JDex <= Jdex[_part3_io_JDex_T] @[DIstribution.scala 89:19]
        node _T_18 = eq(i, UInt<2>("h3")) @[DIstribution.scala 90:14]
        node _T_19 = eq(j, UInt<2>("h3")) @[DIstribution.scala 90:46]
        node _T_20 = and(_T_18, _T_19) @[DIstribution.scala 90:40]
        node _T_21 = sub(count, UInt<1>("h1")) @[DIstribution.scala 90:82]
        node _T_22 = tail(_T_21, 1) @[DIstribution.scala 90:82]
        node _T_23 = lt(_T_22, io.s) @[DIstribution.scala 90:88]
        node _T_24 = and(_T_20, _T_23) @[DIstribution.scala 90:72]
        when _T_24 : @[DIstribution.scala 90:96]
          wire _WIRE : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_1 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_2 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_3 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 91:35]
          _WIRE_4[0] <= _WIRE @[DIstribution.scala 91:35]
          _WIRE_4[1] <= _WIRE_1 @[DIstribution.scala 91:35]
          _WIRE_4[2] <= _WIRE_2 @[DIstribution.scala 91:35]
          _WIRE_4[3] <= _WIRE_3 @[DIstribution.scala 91:35]
          wire _WIRE_5 : UInt<1>[4][4]
          _WIRE_5 <= _WIRE_4
          io.out <= _WIRE_5 @[DIstribution.scala 91:16]
        else :
          io.out <= part3.io.Omat @[DIstribution.scala 93:12]
        io.ProcessValid <= part3.io.valid @[DIstribution.scala 94:21]
      else :
        part3.io.merge <= UInt<1>("h0") @[DIstribution.scala 96:24]
        wire _WIRE_6 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_6[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_7 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_7[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_8 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_8[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_9 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_9[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_10 : UInt<32>[4][4] @[DIstribution.scala 97:31]
        _WIRE_10[0] <= _WIRE_6 @[DIstribution.scala 97:31]
        _WIRE_10[1] <= _WIRE_7 @[DIstribution.scala 97:31]
        _WIRE_10[2] <= _WIRE_8 @[DIstribution.scala 97:31]
        _WIRE_10[3] <= _WIRE_9 @[DIstribution.scala 97:31]
        part3.io.mat[0][0] <= _WIRE_10[0][0] @[DIstribution.scala 97:22]
        part3.io.mat[0][1] <= _WIRE_10[0][1] @[DIstribution.scala 97:22]
        part3.io.mat[0][2] <= _WIRE_10[0][2] @[DIstribution.scala 97:22]
        part3.io.mat[0][3] <= _WIRE_10[0][3] @[DIstribution.scala 97:22]
        part3.io.mat[1][0] <= _WIRE_10[1][0] @[DIstribution.scala 97:22]
        part3.io.mat[1][1] <= _WIRE_10[1][1] @[DIstribution.scala 97:22]
        part3.io.mat[1][2] <= _WIRE_10[1][2] @[DIstribution.scala 97:22]
        part3.io.mat[1][3] <= _WIRE_10[1][3] @[DIstribution.scala 97:22]
        part3.io.mat[2][0] <= _WIRE_10[2][0] @[DIstribution.scala 97:22]
        part3.io.mat[2][1] <= _WIRE_10[2][1] @[DIstribution.scala 97:22]
        part3.io.mat[2][2] <= _WIRE_10[2][2] @[DIstribution.scala 97:22]
        part3.io.mat[2][3] <= _WIRE_10[2][3] @[DIstribution.scala 97:22]
        part3.io.mat[3][0] <= _WIRE_10[3][0] @[DIstribution.scala 97:22]
        part3.io.mat[3][1] <= _WIRE_10[3][1] @[DIstribution.scala 97:22]
        part3.io.mat[3][2] <= _WIRE_10[3][2] @[DIstribution.scala 97:22]
        part3.io.mat[3][3] <= _WIRE_10[3][3] @[DIstribution.scala 97:22]
        part3.io.i_valid <= UInt<1>("h0") @[DIstribution.scala 98:26]
        wire _WIRE_11 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_11[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_12 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_12[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_13 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_13[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_14 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_14[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_15 : UInt<32>[4][4] @[DIstribution.scala 99:31]
        _WIRE_15[0] <= _WIRE_11 @[DIstribution.scala 99:31]
        _WIRE_15[1] <= _WIRE_12 @[DIstribution.scala 99:31]
        _WIRE_15[2] <= _WIRE_13 @[DIstribution.scala 99:31]
        _WIRE_15[3] <= _WIRE_14 @[DIstribution.scala 99:31]
        part3.io.PreMat[0][0] <= _WIRE_15[0][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][1] <= _WIRE_15[0][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][2] <= _WIRE_15[0][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][3] <= _WIRE_15[0][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][0] <= _WIRE_15[1][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][1] <= _WIRE_15[1][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][2] <= _WIRE_15[1][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][3] <= _WIRE_15[1][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][0] <= _WIRE_15[2][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][1] <= _WIRE_15[2][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][2] <= _WIRE_15[2][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][3] <= _WIRE_15[2][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][0] <= _WIRE_15[3][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][1] <= _WIRE_15[3][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][2] <= _WIRE_15[3][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][3] <= _WIRE_15[3][3] @[DIstribution.scala 99:21]
        part3.io.IDex <= UInt<1>("h0") @[DIstribution.scala 100:19]
        part3.io.JDex <= UInt<1>("h0") @[DIstribution.scala 101:19]
        node _T_25 = eq(i, UInt<2>("h3")) @[DIstribution.scala 102:14]
        node _T_26 = eq(j, UInt<2>("h3")) @[DIstribution.scala 102:46]
        node _T_27 = and(_T_25, _T_26) @[DIstribution.scala 102:40]
        node _T_28 = sub(count, UInt<1>("h1")) @[DIstribution.scala 102:82]
        node _T_29 = tail(_T_28, 1) @[DIstribution.scala 102:82]
        node _T_30 = lt(_T_29, io.s) @[DIstribution.scala 102:88]
        node _T_31 = and(_T_27, _T_30) @[DIstribution.scala 102:72]
        when _T_31 : @[DIstribution.scala 102:96]
          wire _WIRE_16 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_16[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_17 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_17[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_18 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_18[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_19 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_19[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_20 : UInt<1>[4][4] @[DIstribution.scala 103:35]
          _WIRE_20[0] <= _WIRE_16 @[DIstribution.scala 103:35]
          _WIRE_20[1] <= _WIRE_17 @[DIstribution.scala 103:35]
          _WIRE_20[2] <= _WIRE_18 @[DIstribution.scala 103:35]
          _WIRE_20[3] <= _WIRE_19 @[DIstribution.scala 103:35]
          wire _WIRE_21 : UInt<1>[4][4]
          _WIRE_21 <= _WIRE_20
          io.out <= _WIRE_21 @[DIstribution.scala 103:16]
        else :
          io.out <= part2.io.OutMat @[DIstribution.scala 105:12]
        io.ProcessValid <= part2.io.Ovalid @[DIstribution.scala 106:21]
      node _T_32 = lt(i, UInt<2>("h3")) @[DIstribution.scala 113:14]
      node _T_33 = eq(j, UInt<2>("h3")) @[DIstribution.scala 113:43]
      node _T_34 = and(_T_32, _T_33) @[DIstribution.scala 113:37]
      when _T_34 : @[DIstribution.scala 113:69]
        node _i_T = add(i, UInt<1>("h1")) @[DIstribution.scala 114:16]
        node _i_T_1 = tail(_i_T, 1) @[DIstribution.scala 114:16]
        i <= _i_T_1 @[DIstribution.scala 114:11]
      node _ab_T = leq(i, UInt<2>("h3")) @[DIstribution.scala 117:18]
      node _ab_T_1 = lt(j, UInt<2>("h3")) @[DIstribution.scala 117:48]
      node ab = and(_ab_T, _ab_T_1) @[DIstribution.scala 117:42]
      node _T_35 = leq(i, UInt<2>("h3")) @[DIstribution.scala 119:14]
      node _T_36 = lt(j, UInt<2>("h3")) @[DIstribution.scala 119:44]
      node _T_37 = and(_T_35, _T_36) @[DIstribution.scala 119:38]
      when _T_37 : @[DIstribution.scala 119:68]
        node _j_T = add(j, UInt<1>("h1")) @[DIstribution.scala 120:16]
        node _j_T_1 = tail(_j_T, 1) @[DIstribution.scala 120:16]
        j <= _j_T_1 @[DIstribution.scala 120:11]
      else :
        node _T_38 = eq(i, UInt<2>("h3")) @[DIstribution.scala 121:18]
        node _T_39 = eq(j, UInt<2>("h3")) @[DIstribution.scala 121:49]
        node _T_40 = and(_T_38, _T_39) @[DIstribution.scala 121:43]
        when _T_40 : @[DIstribution.scala 121:75]
          j <= j @[DIstribution.scala 122:11]
        else :
          j <= UInt<1>("h0") @[DIstribution.scala 124:11]
    else :
      wire _WIRE_22 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_22[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_23 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_23[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_24 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_24[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_25 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_25[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_26 : UInt<1>[4][4] @[DIstribution.scala 131:35]
      _WIRE_26[0] <= _WIRE_22 @[DIstribution.scala 131:35]
      _WIRE_26[1] <= _WIRE_23 @[DIstribution.scala 131:35]
      _WIRE_26[2] <= _WIRE_24 @[DIstribution.scala 131:35]
      _WIRE_26[3] <= _WIRE_25 @[DIstribution.scala 131:35]
      wire _WIRE_27 : UInt<1>[4][4]
      _WIRE_27 <= _WIRE_26
      io.out <= _WIRE_27 @[DIstribution.scala 131:16]
      io.ProcessValid <= UInt<1>("h0") @[DIstribution.scala 132:25]
      io.iteration <= UInt<1>("h0") @[DIstribution.scala 133:22]
      io.validIteration <= UInt<1>("h0") @[DIstribution.scala 134:27]

  module PathFinder_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], PF_Valid : UInt<1>, flip NoDPE : UInt<32>, flip DataValid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    when io.DataValid : @[PathFinder.scala 20:20]
      wire _counterRegs1_WIRE : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_1 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_2 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_3 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[PathFinder.scala 21:37]
      reg counterRegs1 : UInt<16>[4][4], clock with :
        reset => (reset, _counterRegs1_WIRE_4) @[PathFinder.scala 21:29]
      wire _counterRegs2_WIRE : UInt<16>[4] @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      reg counterRegs2 : UInt<16>[4], clock with :
        reset => (reset, _counterRegs2_WIRE) @[PathFinder.scala 22:29]
      reg delay : UInt<32>, clock with :
        reset => (reset, UInt<32>("h0")) @[PathFinder.scala 25:22]
      inst myMuxes of Muxes_1 @[PathFinder.scala 26:23]
      myMuxes.clock <= clock
      myMuxes.reset <= reset
      inst myCounter of SourceDestination_1 @[PathFinder.scala 32:25]
      myCounter.clock <= clock
      myCounter.reset <= reset
      reg myCounter_io_start_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), myCounter_io_start_REG) @[PathFinder.scala 33:32]
      myCounter_io_start_REG <= io.DataValid @[PathFinder.scala 33:32]
      myCounter.io.start <= myCounter_io_start_REG @[PathFinder.scala 33:22]
      myCounter.io.Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 34:34]
      myCounter.io.Streaming_matrix[0] <= io.Streaming_matrix[0] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[1] <= io.Streaming_matrix[1] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[2] <= io.Streaming_matrix[2] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[3] <= io.Streaming_matrix[3] @[PathFinder.scala 35:33]
      inst Distribution of Distribution_1 @[PathFinder.scala 37:28]
      Distribution.clock <= clock
      Distribution.reset <= reset
      Distribution.io.valid <= myCounter.io.valid @[PathFinder.scala 39:25]
      Distribution.io.s <= io.NoDPE @[PathFinder.scala 40:21]
      io.iteration <= Distribution.io.iteration @[PathFinder.scala 41:16]
      io.validIteration <= Distribution.io.validIteration @[PathFinder.scala 42:21]
      Distribution.io.matrix[0][0] <= myCounter.io.counterMatrix1.bits[0][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][1] <= myCounter.io.counterMatrix1.bits[0][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][2] <= myCounter.io.counterMatrix1.bits[0][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][3] <= myCounter.io.counterMatrix1.bits[0][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][0] <= myCounter.io.counterMatrix1.bits[1][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][1] <= myCounter.io.counterMatrix1.bits[1][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][2] <= myCounter.io.counterMatrix1.bits[1][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][3] <= myCounter.io.counterMatrix1.bits[1][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][0] <= myCounter.io.counterMatrix1.bits[2][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][1] <= myCounter.io.counterMatrix1.bits[2][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][2] <= myCounter.io.counterMatrix1.bits[2][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][3] <= myCounter.io.counterMatrix1.bits[2][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][0] <= myCounter.io.counterMatrix1.bits[3][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][1] <= myCounter.io.counterMatrix1.bits[3][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][2] <= myCounter.io.counterMatrix1.bits[3][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][3] <= myCounter.io.counterMatrix1.bits[3][3] @[PathFinder.scala 43:26]
      when Distribution.io.ProcessValid : @[PathFinder.scala 52:40]
        myCounter.io.counterMatrix1.ready <= UInt<1>("h1") @[PathFinder.scala 53:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h1") @[PathFinder.scala 54:39]
        myMuxes.io.mat1[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat2[0] <= io.Streaming_matrix[0] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[1] <= io.Streaming_matrix[1] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[2] <= io.Streaming_matrix[2] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[3] <= io.Streaming_matrix[3] @[PathFinder.scala 57:21]
        myMuxes.io.counterMatrix1 <= Distribution.io.out @[PathFinder.scala 58:31]
        myMuxes.io.counterMatrix2 <= myCounter.io.counterMatrix2.bits @[PathFinder.scala 59:31]
      else :
        myCounter.io.counterMatrix1.ready <= UInt<1>("h0") @[PathFinder.scala 62:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h0") @[PathFinder.scala 64:39]
        myMuxes.io.mat1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat2[0] <= counterRegs2[0] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[1] <= counterRegs2[1] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[2] <= counterRegs2[2] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[3] <= counterRegs2[3] @[PathFinder.scala 66:21]
        myMuxes.io.counterMatrix1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix2[0] <= counterRegs2[0] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[1] <= counterRegs2[1] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[2] <= counterRegs2[2] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[3] <= counterRegs2[3] @[PathFinder.scala 68:31]
      io.PF_Valid <= myMuxes.io.valid @[PathFinder.scala 74:15]
      io.i_mux_bus <= myMuxes.io.i_mux_bus @[PathFinder.scala 75:16]
      io.Source <= myMuxes.io.Source @[PathFinder.scala 76:13]
      io.destination <= myMuxes.io.destination @[PathFinder.scala 77:18]
    else :
      io.validIteration <= UInt<1>("h0") @[PathFinder.scala 79:21]
      io.iteration <= UInt<1>("h0") @[PathFinder.scala 80:16]
      io.PF_Valid <= UInt<1>("h0") @[PathFinder.scala 81:15]
      wire _WIRE : UInt<32>[16] @[PathFinder.scala 82:35]
      _WIRE[0] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[1] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[2] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[3] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[4] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[5] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[6] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[7] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[8] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[9] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[10] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[11] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[12] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[13] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[14] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[15] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      wire _WIRE_1 : UInt<32>[16]
      _WIRE_1 <= _WIRE
      io.i_mux_bus <= _WIRE_1 @[PathFinder.scala 82:16]
      wire _WIRE_2 : UInt<32>[16] @[PathFinder.scala 83:32]
      _WIRE_2[0] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[1] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[2] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[3] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[4] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[5] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[6] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[7] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[8] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[9] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[10] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[11] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[12] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[13] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[14] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[15] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      wire _WIRE_3 : UInt<32>[16]
      _WIRE_3 <= _WIRE_2
      io.Source <= _WIRE_3 @[PathFinder.scala 83:13]
      wire _WIRE_4 : UInt<32>[16] @[PathFinder.scala 84:37]
      _WIRE_4[0] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[1] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[2] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[3] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[4] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[5] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[6] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[7] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[8] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[9] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[10] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[11] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[12] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[13] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[14] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[15] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      wire _WIRE_5 : UInt<32>[16]
      _WIRE_5 <= _WIRE_4
      io.destination <= _WIRE_5 @[PathFinder.scala 84:18]

  module Muxes_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip mat1 : UInt<16>[4][4], flip mat2 : UInt<16>[4], flip counterMatrix1 : UInt<16>[4][4], flip counterMatrix2 : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], valid : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[Muxes.scala 19:40]
    prevStationary_matrix[0][0] <= io.mat1[0][0] @[Muxes.scala 19:40]
    prevStationary_matrix[0][1] <= io.mat1[0][1] @[Muxes.scala 19:40]
    prevStationary_matrix[0][2] <= io.mat1[0][2] @[Muxes.scala 19:40]
    prevStationary_matrix[0][3] <= io.mat1[0][3] @[Muxes.scala 19:40]
    prevStationary_matrix[1][0] <= io.mat1[1][0] @[Muxes.scala 19:40]
    prevStationary_matrix[1][1] <= io.mat1[1][1] @[Muxes.scala 19:40]
    prevStationary_matrix[1][2] <= io.mat1[1][2] @[Muxes.scala 19:40]
    prevStationary_matrix[1][3] <= io.mat1[1][3] @[Muxes.scala 19:40]
    prevStationary_matrix[2][0] <= io.mat1[2][0] @[Muxes.scala 19:40]
    prevStationary_matrix[2][1] <= io.mat1[2][1] @[Muxes.scala 19:40]
    prevStationary_matrix[2][2] <= io.mat1[2][2] @[Muxes.scala 19:40]
    prevStationary_matrix[2][3] <= io.mat1[2][3] @[Muxes.scala 19:40]
    prevStationary_matrix[3][0] <= io.mat1[3][0] @[Muxes.scala 19:40]
    prevStationary_matrix[3][1] <= io.mat1[3][1] @[Muxes.scala 19:40]
    prevStationary_matrix[3][2] <= io.mat1[3][2] @[Muxes.scala 19:40]
    prevStationary_matrix[3][3] <= io.mat1[3][3] @[Muxes.scala 19:40]
    reg prevStreaming_matrix : UInt<16>[4], clock with :
      reset => (UInt<1>("h0"), prevStreaming_matrix) @[Muxes.scala 20:39]
    prevStreaming_matrix[0] <= io.mat2[0] @[Muxes.scala 20:39]
    prevStreaming_matrix[1] <= io.mat2[1] @[Muxes.scala 20:39]
    prevStreaming_matrix[2] <= io.mat2[2] @[Muxes.scala 20:39]
    prevStreaming_matrix[3] <= io.mat2[3] @[Muxes.scala 20:39]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[Muxes.scala 21:31]
    matricesAreEqual <= UInt<1>("h1") @[Muxes.scala 22:22]
    reg jValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 27:25]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 28:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 29:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 30:20]
    reg counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 31:26]
    wire _mux_WIRE : UInt<4>[16] @[Muxes.scala 32:30]
    _mux_WIRE[0] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[1] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[2] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[3] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[4] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[5] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[6] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[7] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[8] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[9] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[10] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[11] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[12] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[13] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[14] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[15] <= UInt<4>("h0") @[Muxes.scala 32:30]
    reg mux : UInt<4>[16], clock with :
      reset => (reset, _mux_WIRE) @[Muxes.scala 32:22]
    wire _src_WIRE : UInt<16>[16] @[Muxes.scala 33:30]
    _src_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 33:30]
    reg src : UInt<16>[16], clock with :
      reset => (reset, _src_WIRE) @[Muxes.scala 33:22]
    wire _dest_WIRE : UInt<16>[16] @[Muxes.scala 34:31]
    _dest_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 34:31]
    reg dest : UInt<16>[16], clock with :
      reset => (reset, _dest_WIRE) @[Muxes.scala 34:23]
    io.i_mux_bus <= mux @[Muxes.scala 35:18]
    io.Source <= src @[Muxes.scala 36:15]
    io.destination <= dest @[Muxes.scala 37:20]
    node _T = neq(io.mat1[0][0], prevStationary_matrix[0][0]) @[Muxes.scala 45:28]
    when _T : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_1 = neq(io.mat1[0][1], prevStationary_matrix[0][1]) @[Muxes.scala 45:28]
    when _T_1 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_2 = neq(io.mat1[0][2], prevStationary_matrix[0][2]) @[Muxes.scala 45:28]
    when _T_2 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_3 = neq(io.mat1[0][3], prevStationary_matrix[0][3]) @[Muxes.scala 45:28]
    when _T_3 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_4 = neq(io.mat2[0], prevStreaming_matrix[0]) @[Muxes.scala 49:23]
    when _T_4 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_5 = neq(io.mat1[1][0], prevStationary_matrix[1][0]) @[Muxes.scala 45:28]
    when _T_5 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_6 = neq(io.mat1[1][1], prevStationary_matrix[1][1]) @[Muxes.scala 45:28]
    when _T_6 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_7 = neq(io.mat1[1][2], prevStationary_matrix[1][2]) @[Muxes.scala 45:28]
    when _T_7 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_8 = neq(io.mat1[1][3], prevStationary_matrix[1][3]) @[Muxes.scala 45:28]
    when _T_8 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_9 = neq(io.mat2[1], prevStreaming_matrix[1]) @[Muxes.scala 49:23]
    when _T_9 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_10 = neq(io.mat1[2][0], prevStationary_matrix[2][0]) @[Muxes.scala 45:28]
    when _T_10 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_11 = neq(io.mat1[2][1], prevStationary_matrix[2][1]) @[Muxes.scala 45:28]
    when _T_11 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_12 = neq(io.mat1[2][2], prevStationary_matrix[2][2]) @[Muxes.scala 45:28]
    when _T_12 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_13 = neq(io.mat1[2][3], prevStationary_matrix[2][3]) @[Muxes.scala 45:28]
    when _T_13 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_14 = neq(io.mat2[2], prevStreaming_matrix[2]) @[Muxes.scala 49:23]
    when _T_14 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_15 = neq(io.mat1[3][0], prevStationary_matrix[3][0]) @[Muxes.scala 45:28]
    when _T_15 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_16 = neq(io.mat1[3][1], prevStationary_matrix[3][1]) @[Muxes.scala 45:28]
    when _T_16 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_17 = neq(io.mat1[3][2], prevStationary_matrix[3][2]) @[Muxes.scala 45:28]
    when _T_17 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_18 = neq(io.mat1[3][3], prevStationary_matrix[3][3]) @[Muxes.scala 45:28]
    when _T_18 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_19 = neq(io.mat2[3], prevStreaming_matrix[3]) @[Muxes.scala 49:23]
    when _T_19 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_20 = bits(j, 1, 0)
    node _T_21 = bits(i, 1, 0)
    node _T_22 = neq(io.counterMatrix1[_T_20][_T_21], UInt<1>("h0")) @[Muxes.scala 54:36]
    node _T_23 = bits(i, 1, 0)
    node _T_24 = neq(io.mat2[_T_23], UInt<1>("h0")) @[Muxes.scala 54:60]
    node _T_25 = and(_T_22, _T_24) @[Muxes.scala 54:45]
    when _T_25 : @[Muxes.scala 54:70]
      node _T_26 = bits(j, 1, 0)
      node _T_27 = bits(i, 1, 0)
      node _T_28 = bits(i, 1, 0)
      node _T_29 = leq(io.counterMatrix1[_T_26][_T_27], io.counterMatrix2[_T_28]) @[Muxes.scala 56:38]
      when _T_29 : @[Muxes.scala 56:62]
        node _T_30 = bits(counter, 3, 0)
        node _mux_T = bits(i, 1, 0)
        node _mux_T_1 = sub(io.counterMatrix2[_mux_T], UInt<1>("h1")) @[Muxes.scala 57:51]
        node _mux_T_2 = tail(_mux_T_1, 1) @[Muxes.scala 57:51]
        node _mux_T_3 = bits(j, 1, 0)
        node _mux_T_4 = bits(i, 1, 0)
        node _mux_T_5 = sub(io.counterMatrix1[_mux_T_3][_mux_T_4], UInt<1>("h1")) @[Muxes.scala 57:85]
        node _mux_T_6 = tail(_mux_T_5, 1) @[Muxes.scala 57:85]
        node _mux_T_7 = sub(_mux_T_2, _mux_T_6) @[Muxes.scala 57:58]
        node _mux_T_8 = tail(_mux_T_7, 1) @[Muxes.scala 57:58]
        mux[_T_30] <= _mux_T_8 @[Muxes.scala 57:24]
        node _T_31 = bits(counter, 3, 0)
        node _src_T = bits(i, 1, 0)
        src[_T_31] <= io.mat2[_src_T] @[Muxes.scala 58:24]
        node _T_32 = bits(counter, 3, 0)
        node _dest_T = bits(j, 1, 0)
        node _dest_T_1 = bits(i, 1, 0)
        dest[_T_32] <= io.mat1[_dest_T][_dest_T_1] @[Muxes.scala 59:25]
      else :
        node _T_33 = bits(counter, 3, 0)
        node _mux_T_9 = bits(j, 1, 0)
        node _mux_T_10 = bits(i, 1, 0)
        node _mux_T_11 = sub(io.counterMatrix1[_mux_T_9][_mux_T_10], UInt<1>("h1")) @[Muxes.scala 61:54]
        node _mux_T_12 = tail(_mux_T_11, 1) @[Muxes.scala 61:54]
        node _mux_T_13 = bits(i, 1, 0)
        node _mux_T_14 = sub(io.counterMatrix2[_mux_T_13], UInt<1>("h1")) @[Muxes.scala 61:85]
        node _mux_T_15 = tail(_mux_T_14, 1) @[Muxes.scala 61:85]
        node _mux_T_16 = sub(_mux_T_12, _mux_T_15) @[Muxes.scala 61:61]
        node _mux_T_17 = tail(_mux_T_16, 1) @[Muxes.scala 61:61]
        mux[_T_33] <= _mux_T_17 @[Muxes.scala 61:24]
        node _T_34 = bits(counter, 3, 0)
        node _src_T_1 = bits(i, 1, 0)
        src[_T_34] <= io.mat2[_src_T_1] @[Muxes.scala 62:24]
        node _T_35 = bits(counter, 3, 0)
        node _dest_T_2 = bits(j, 1, 0)
        node _dest_T_3 = bits(i, 1, 0)
        dest[_T_35] <= io.mat1[_dest_T_2][_dest_T_3] @[Muxes.scala 63:25]
      node _T_36 = not(jValid) @[Muxes.scala 66:15]
      when _T_36 : @[Muxes.scala 66:24]
        node _T_37 = eq(j, UInt<2>("h3")) @[Muxes.scala 68:22]
        node _T_38 = eq(i, UInt<2>("h3")) @[Muxes.scala 68:56]
        node _T_39 = and(_T_37, _T_38) @[Muxes.scala 68:50]
        node _T_40 = not(_T_39) @[Muxes.scala 68:17]
        when _T_40 : @[Muxes.scala 68:85]
          node _counter_T = add(counter, UInt<1>("h1")) @[Muxes.scala 69:30]
          node _counter_T_1 = tail(_counter_T, 1) @[Muxes.scala 69:30]
          counter <= _counter_T_1 @[Muxes.scala 69:19]
    node _T_41 = eq(jValid, UInt<1>("h0")) @[Muxes.scala 76:19]
    when _T_41 : @[Muxes.scala 76:29]
      node _T_42 = lt(j, UInt<2>("h3")) @[Muxes.scala 78:14]
      when _T_42 : @[Muxes.scala 78:40]
        node _j_T = add(j, UInt<1>("h1")) @[Muxes.scala 79:16]
        node _j_T_1 = tail(_j_T, 1) @[Muxes.scala 79:16]
        j <= _j_T_1 @[Muxes.scala 79:11]
      else :
        node _T_43 = eq(j, UInt<2>("h3")) @[Muxes.scala 80:21]
        node _T_44 = eq(i, UInt<2>("h3")) @[Muxes.scala 80:55]
        node _T_45 = and(_T_43, _T_44) @[Muxes.scala 80:49]
        when _T_45 : @[Muxes.scala 80:83]
          jValid <= UInt<1>("h1") @[Muxes.scala 81:16]
        else :
          j <= UInt<1>("h0") @[Muxes.scala 83:11]
          node _T_46 = lt(i, UInt<2>("h3")) @[Muxes.scala 84:16]
          when _T_46 : @[Muxes.scala 84:42]
            node _i_T = add(i, UInt<1>("h1")) @[Muxes.scala 85:18]
            node _i_T_1 = tail(_i_T, 1) @[Muxes.scala 85:18]
            i <= _i_T_1 @[Muxes.scala 85:13]
    else :
      node _T_47 = eq(jValid, UInt<1>("h1")) @[Muxes.scala 89:25]
      node _T_48 = eq(matricesAreEqual, UInt<1>("h0")) @[Muxes.scala 89:55]
      node _T_49 = and(_T_47, _T_48) @[Muxes.scala 89:34]
      when _T_49 : @[Muxes.scala 89:64]
        i <= UInt<1>("h0") @[Muxes.scala 91:9]
        j <= UInt<1>("h0") @[Muxes.scala 92:9]
        jValid <= UInt<1>("h0") @[Muxes.scala 93:14]
        counter <= UInt<1>("h0") @[Muxes.scala 94:15]
        src[0] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[0] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[0] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[1] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[1] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[1] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[2] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[2] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[2] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[3] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[3] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[3] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[4] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[4] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[4] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[5] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[5] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[5] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[6] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[6] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[6] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[7] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[7] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[7] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[8] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[8] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[8] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[9] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[9] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[9] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[10] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[10] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[10] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[11] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[11] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[11] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[12] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[12] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[12] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[13] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[13] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[13] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[14] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[14] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[14] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[15] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[15] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[15] <= UInt<1>("h0") @[Muxes.scala 99:16]
    reg jNext : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 105:24]
    jNext <= j @[Muxes.scala 106:11]
    node _T_50 = neq(k, UInt<1>("h0")) @[Muxes.scala 108:14]
    node _T_51 = eq(j, UInt<2>("h3")) @[Muxes.scala 108:28]
    node _T_52 = and(_T_50, _T_51) @[Muxes.scala 108:22]
    node _T_53 = eq(i, UInt<2>("h3")) @[Muxes.scala 108:60]
    node _T_54 = and(_T_52, _T_53) @[Muxes.scala 108:54]
    node _T_55 = eq(jNext, UInt<2>("h2")) @[Muxes.scala 108:96]
    node _T_56 = and(_T_54, _T_55) @[Muxes.scala 108:86]
    when _T_56 : @[Muxes.scala 108:122]
      io.valid <= UInt<1>("h1") @[Muxes.scala 109:16]
    else :
      io.valid <= UInt<1>("h0") @[Muxes.scala 111:16]
    node _T_57 = eq(i, UInt<2>("h3")) @[Muxes.scala 113:14]
    node _T_58 = eq(j, UInt<2>("h3")) @[Muxes.scala 113:48]
    node _T_59 = and(_T_57, _T_58) @[Muxes.scala 113:42]
    when _T_59 : @[Muxes.scala 113:76]
      node _k_T = add(k, UInt<1>("h1")) @[Muxes.scala 114:14]
      node _k_T_1 = tail(_k_T, 1) @[Muxes.scala 114:14]
      k <= _k_T_1 @[Muxes.scala 114:9]

  module SourceDestination_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], counterMatrix1 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4][4]}, counterMatrix2 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4]}, valid : UInt<1>, flip start : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[SourceDestination.scala 15:40]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[SourceDestination.scala 16:31]
    wire _counterRegs1_WIRE : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_1 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_2 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_3 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[SourceDestination.scala 17:39]
    reg counterRegs1 : UInt<16>[4][4], clock with :
      reset => (reset, _counterRegs1_WIRE_4) @[SourceDestination.scala 17:31]
    wire _counterRegs2_WIRE : UInt<16>[4] @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    reg counterRegs2 : UInt<16>[4], clock with :
      reset => (reset, _counterRegs2_WIRE) @[SourceDestination.scala 18:31]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 20:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 21:20]
    reg valid1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SourceDestination.scala 24:25]
    reg jValid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), jValid) @[SourceDestination.scala 25:21]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 26:20]
    reg counter1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 28:27]
    reg counter2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 29:27]
    node _reg_i_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 31:29]
    node _reg_i_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 31:63]
    node _reg_i_T_2 = and(_reg_i_T, _reg_i_T_1) @[SourceDestination.scala 31:57]
    reg reg_i : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SourceDestination.scala 31:24]
    reg_i <= _reg_i_T_2 @[SourceDestination.scala 31:24]
    when io.start : @[SourceDestination.scala 34:17]
      matricesAreEqual <= UInt<1>("h1") @[SourceDestination.scala 36:22]
      node _T = neq(io.Stationary_matrix[0][0], prevStationary_matrix[0][0]) @[SourceDestination.scala 40:41]
      when _T : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_1 = neq(io.Stationary_matrix[0][1], prevStationary_matrix[0][1]) @[SourceDestination.scala 40:41]
      when _T_1 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_2 = neq(io.Stationary_matrix[0][2], prevStationary_matrix[0][2]) @[SourceDestination.scala 40:41]
      when _T_2 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_3 = neq(io.Stationary_matrix[0][3], prevStationary_matrix[0][3]) @[SourceDestination.scala 40:41]
      when _T_3 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_4 = neq(io.Stationary_matrix[1][0], prevStationary_matrix[1][0]) @[SourceDestination.scala 40:41]
      when _T_4 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_5 = neq(io.Stationary_matrix[1][1], prevStationary_matrix[1][1]) @[SourceDestination.scala 40:41]
      when _T_5 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_6 = neq(io.Stationary_matrix[1][2], prevStationary_matrix[1][2]) @[SourceDestination.scala 40:41]
      when _T_6 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_7 = neq(io.Stationary_matrix[1][3], prevStationary_matrix[1][3]) @[SourceDestination.scala 40:41]
      when _T_7 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_8 = neq(io.Stationary_matrix[2][0], prevStationary_matrix[2][0]) @[SourceDestination.scala 40:41]
      when _T_8 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_9 = neq(io.Stationary_matrix[2][1], prevStationary_matrix[2][1]) @[SourceDestination.scala 40:41]
      when _T_9 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_10 = neq(io.Stationary_matrix[2][2], prevStationary_matrix[2][2]) @[SourceDestination.scala 40:41]
      when _T_10 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_11 = neq(io.Stationary_matrix[2][3], prevStationary_matrix[2][3]) @[SourceDestination.scala 40:41]
      when _T_11 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_12 = neq(io.Stationary_matrix[3][0], prevStationary_matrix[3][0]) @[SourceDestination.scala 40:41]
      when _T_12 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_13 = neq(io.Stationary_matrix[3][1], prevStationary_matrix[3][1]) @[SourceDestination.scala 40:41]
      when _T_13 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_14 = neq(io.Stationary_matrix[3][2], prevStationary_matrix[3][2]) @[SourceDestination.scala 40:41]
      when _T_14 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_15 = neq(io.Stationary_matrix[3][3], prevStationary_matrix[3][3]) @[SourceDestination.scala 40:41]
      when _T_15 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      jValid <= UInt<1>("h0") @[SourceDestination.scala 49:12]
      node _T_16 = bits(i, 1, 0)
      node _T_17 = bits(j, 1, 0)
      node _T_18 = neq(io.Stationary_matrix[_T_16][_T_17], UInt<1>("h0")) @[SourceDestination.scala 53:38]
      when _T_18 : @[SourceDestination.scala 53:47]
        node _T_19 = lt(counter1, UInt<3>("h5")) @[SourceDestination.scala 54:22]
        when _T_19 : @[SourceDestination.scala 54:48]
          node _T_20 = bits(i, 1, 0)
          node _T_21 = bits(j, 1, 0)
          counterRegs1[_T_20][_T_21] <= counter1 @[SourceDestination.scala 55:28]
          node _T_22 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 56:20]
          node _T_23 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 56:54]
          node _T_24 = and(_T_22, _T_23) @[SourceDestination.scala 56:48]
          node _T_25 = not(_T_24) @[SourceDestination.scala 56:15]
          when _T_25 : @[SourceDestination.scala 56:83]
            node _counter1_T = add(counter1, UInt<1>("h1")) @[SourceDestination.scala 57:32]
            node _counter1_T_1 = tail(_counter1_T, 1) @[SourceDestination.scala 57:32]
            counter1 <= _counter1_T_1 @[SourceDestination.scala 57:20]
        else :
          node _T_26 = bits(i, 1, 0)
          node _T_27 = bits(j, 1, 0)
          counterRegs1[_T_26][_T_27] <= UInt<1>("h1") @[SourceDestination.scala 60:28]
          counter1 <= UInt<2>("h2") @[SourceDestination.scala 61:18]
      else :
        node _T_28 = bits(i, 1, 0)
        node _T_29 = bits(j, 1, 0)
        counterRegs1[_T_28][_T_29] <= UInt<1>("h0") @[SourceDestination.scala 64:26]
      node _T_30 = bits(k, 1, 0)
      node _T_31 = neq(io.Streaming_matrix[_T_30], UInt<1>("h0")) @[SourceDestination.scala 67:34]
      when _T_31 : @[SourceDestination.scala 67:43]
        node _T_32 = bits(k, 1, 0)
        counterRegs2[_T_32] <= counter2 @[SourceDestination.scala 68:23]
        node _counter2_T = add(counter2, UInt<1>("h1")) @[SourceDestination.scala 69:28]
        node _counter2_T_1 = tail(_counter2_T, 1) @[SourceDestination.scala 69:28]
        counter2 <= _counter2_T_1 @[SourceDestination.scala 69:16]
      node _valid1_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 71:23]
      node _valid1_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 71:57]
      node _valid1_T_2 = and(_valid1_T, _valid1_T_1) @[SourceDestination.scala 71:51]
      node _valid1_T_3 = eq(_valid1_T_2, reg_i) @[SourceDestination.scala 71:86]
      node _valid1_T_4 = mux(_valid1_T_3, UInt<1>("h1"), UInt<1>("h0")) @[SourceDestination.scala 71:18]
      valid1 <= _valid1_T_4 @[SourceDestination.scala 71:12]
      node _T_33 = eq(k, UInt<2>("h3")) @[SourceDestination.scala 73:12]
      when _T_33 : @[SourceDestination.scala 73:37]
        k <= k @[SourceDestination.scala 74:9]
        counter2 <= counter2 @[SourceDestination.scala 75:16]
      else :
        node _T_34 = geq(k, UInt<1>("h0")) @[SourceDestination.scala 76:19]
        when _T_34 : @[SourceDestination.scala 76:26]
          node _k_T = add(k, UInt<1>("h1")) @[SourceDestination.scala 77:16]
          node _k_T_1 = tail(_k_T, 1) @[SourceDestination.scala 77:16]
          k <= _k_T_1 @[SourceDestination.scala 77:11]
      node _T_35 = eq(jValid, UInt<1>("h0")) @[SourceDestination.scala 79:18]
      when _T_35 : @[SourceDestination.scala 79:26]
        node _T_36 = lt(j, UInt<2>("h3")) @[SourceDestination.scala 80:14]
        when _T_36 : @[SourceDestination.scala 80:40]
          node _j_T = add(j, UInt<1>("h1")) @[SourceDestination.scala 81:16]
          node _j_T_1 = tail(_j_T, 1) @[SourceDestination.scala 81:16]
          j <= _j_T_1 @[SourceDestination.scala 81:11]
        else :
          node _T_37 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 82:21]
          node _T_38 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 82:55]
          node _T_39 = and(_T_37, _T_38) @[SourceDestination.scala 82:49]
          when _T_39 : @[SourceDestination.scala 82:83]
            jValid <= UInt<1>("h1") @[SourceDestination.scala 83:16]
          else :
            j <= UInt<1>("h0") @[SourceDestination.scala 85:11]
            node _T_40 = lt(i, UInt<2>("h3")) @[SourceDestination.scala 86:16]
            when _T_40 : @[SourceDestination.scala 86:42]
              node _i_T = add(i, UInt<1>("h1")) @[SourceDestination.scala 87:18]
              node _i_T_1 = tail(_i_T, 1) @[SourceDestination.scala 87:18]
              i <= _i_T_1 @[SourceDestination.scala 87:13]
      else :
        node _T_41 = eq(jValid, UInt<1>("h1")) @[SourceDestination.scala 90:25]
        node _T_42 = eq(matricesAreEqual, UInt<1>("h0")) @[SourceDestination.scala 90:55]
        node _T_43 = and(_T_41, _T_42) @[SourceDestination.scala 90:34]
        when _T_43 : @[SourceDestination.scala 90:64]
          i <= UInt<1>("h0") @[SourceDestination.scala 91:9]
          j <= UInt<1>("h0") @[SourceDestination.scala 92:9]
          k <= UInt<1>("h0") @[SourceDestination.scala 93:9]
          counter1 <= UInt<1>("h1") @[SourceDestination.scala 94:16]
          counter2 <= UInt<1>("h1") @[SourceDestination.scala 95:16]
          counterRegs1[0][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[0] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[1][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[1] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[2][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[2] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[3][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[3] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
      node _io_valid_T = eq(i, UInt<2>("h3")) @[SourceDestination.scala 104:19]
      node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 104:34]
      node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[SourceDestination.scala 104:28]
      io.valid <= _io_valid_T_2 @[SourceDestination.scala 104:14]
      node _T_44 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 106:14]
      node _T_45 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 106:48]
      node _T_46 = and(_T_44, _T_45) @[SourceDestination.scala 106:42]
      when _T_46 : @[SourceDestination.scala 106:76]
        io.counterMatrix1.valid <= UInt<1>("h1") @[SourceDestination.scala 107:31]
        io.counterMatrix2.valid <= UInt<1>("h1") @[SourceDestination.scala 108:31]
      else :
        io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 110:31]
        io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 111:31]
      io.counterMatrix1.bits <= counterRegs1 @[SourceDestination.scala 114:28]
      io.counterMatrix2.bits <= counterRegs2 @[SourceDestination.scala 115:28]
    else :
      wire _WIRE : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_1 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_1[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_2 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_2[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_3 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_3[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_4 : UInt<32>[4][4] @[SourceDestination.scala 118:36]
      _WIRE_4[0] <= _WIRE @[SourceDestination.scala 118:36]
      _WIRE_4[1] <= _WIRE_1 @[SourceDestination.scala 118:36]
      _WIRE_4[2] <= _WIRE_2 @[SourceDestination.scala 118:36]
      _WIRE_4[3] <= _WIRE_3 @[SourceDestination.scala 118:36]
      io.counterMatrix1.bits <= _WIRE_4 @[SourceDestination.scala 118:26]
      wire _WIRE_5 : UInt<32>[4] @[SourceDestination.scala 119:36]
      _WIRE_5[0] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[1] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[2] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[3] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      io.counterMatrix2.bits <= _WIRE_5 @[SourceDestination.scala 119:26]
      io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 120:27]
      io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 121:27]
      io.valid <= UInt<1>("h0") @[SourceDestination.scala 122:12]

  module abc2_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip IDex : UInt<32>, flip JDex : UInt<32>, flip valid : UInt<1>, flip mat : UInt<32>[4][4], OutMat : UInt<32>[4][4], Ovalid : UInt<1>, ProcessValid : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_1 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_2 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_3 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[singleLoop.scala 19:28]
    _b_WIRE_4[0] <= _b_WIRE @[singleLoop.scala 19:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[singleLoop.scala 19:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[singleLoop.scala 19:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[singleLoop.scala 19:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[singleLoop.scala 19:20]
    io.OutMat <= b @[singleLoop.scala 20:15]
    reg j : UInt<32>, clock with :
      reset => (UInt<1>("h0"), j) @[singleLoop.scala 21:16]
    j <= io.JDex @[singleLoop.scala 22:7]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[singleLoop.scala 23:20]
    node _T = neq(a, UInt<1>("h0")) @[singleLoop.scala 24:25]
    node _T_1 = and(io.valid, _T) @[singleLoop.scala 24:19]
    when _T_1 : @[singleLoop.scala 24:34]
      node _T_2 = bits(io.IDex, 1, 0)
      node _T_3 = bits(j, 1, 0)
      node _b_T = bits(io.IDex, 1, 0)
      node _b_T_1 = bits(j, 1, 0)
      b[_T_2][_T_3] <= io.mat[_b_T][_b_T_1] @[singleLoop.scala 25:19]
    node _T_4 = eq(j, UInt<2>("h3")) @[singleLoop.scala 26:13]
    when _T_4 : @[singleLoop.scala 26:21]
      node _io_Ovalid_T = bits(io.IDex, 1, 0)
      node _io_Ovalid_T_1 = eq(io.mat[_io_Ovalid_T][3], UInt<3>("h4")) @[singleLoop.scala 27:45]
      reg io_Ovalid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), io_Ovalid_REG) @[singleLoop.scala 27:25]
      io_Ovalid_REG <= _io_Ovalid_T_1 @[singleLoop.scala 27:25]
      io.Ovalid <= io_Ovalid_REG @[singleLoop.scala 27:15]
    else :
      io.Ovalid <= UInt<1>("h0") @[singleLoop.scala 29:19]
    node _io_ProcessValid_T = eq(j, UInt<2>("h3")) @[singleLoop.scala 31:35]
    wire _io_ProcessValid_WIRE : UInt<1>
    _io_ProcessValid_WIRE <= _io_ProcessValid_T
    io.ProcessValid <= _io_ProcessValid_WIRE @[singleLoop.scala 31:21]
    when io.valid : @[singleLoop.scala 45:20]
      node _a_T = add(a, UInt<1>("h1")) @[singleLoop.scala 46:12]
      node _a_T_1 = tail(_a_T, 1) @[singleLoop.scala 46:12]
      a <= _a_T_1 @[singleLoop.scala 46:7]
    node _T_5 = neq(a, UInt<1>("h0")) @[singleLoop.scala 48:26]
    node _T_6 = and(io.valid, _T_5) @[singleLoop.scala 48:20]
    node _T_7 = lt(j, UInt<2>("h3")) @[singleLoop.scala 48:41]
    node _T_8 = and(_T_6, _T_7) @[singleLoop.scala 48:35]
    when _T_8 : @[singleLoop.scala 48:65]
      node _j_T = add(j, UInt<1>("h1")) @[singleLoop.scala 49:16]
      node _j_T_1 = tail(_j_T, 1) @[singleLoop.scala 49:16]
      j <= _j_T_1 @[singleLoop.scala 49:11]
    else :
      node _T_9 = eq(j, UInt<2>("h3")) @[singleLoop.scala 50:18]
      when _T_9 : @[singleLoop.scala 50:43]
        j <= j @[singleLoop.scala 51:11]

  module abc3_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip PreMat : UInt<32>[4][4], flip IDex : UInt<32>, flip JDex : UInt<32>, flip mat : UInt<32>[4][4], flip i_valid : UInt<1>, valid : UInt<1>, Omat : UInt<32>[4][4], flip merge : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_1 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_2 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_3 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[0] <= _b_WIRE @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[MergeDIstribution.scala 18:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[MergeDIstribution.scala 18:20]
    io.Omat <= b @[MergeDIstribution.scala 19:13]
    reg check : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 20:24]
    wire counter : UInt<1>
    counter <= UInt<1>("h0")
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 22:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 23:20]
    node _io_valid_T = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 24:20]
    node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 24:35]
    node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[MergeDIstribution.scala 24:29]
    io.valid <= _io_valid_T_2 @[MergeDIstribution.scala 24:14]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 25:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 26:20]
    reg l : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 27:20]
    reg delay : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 29:24]
    node _T = leq(delay, UInt<2>("h3")) @[MergeDIstribution.scala 31:17]
    node _T_1 = and(_T, io.merge) @[MergeDIstribution.scala 31:41]
    when _T_1 : @[MergeDIstribution.scala 31:53]
      node _delay_T = add(delay, UInt<1>("h1")) @[MergeDIstribution.scala 32:24]
      node _delay_T_1 = tail(_delay_T, 1) @[MergeDIstribution.scala 32:24]
      delay <= _delay_T_1 @[MergeDIstribution.scala 32:15]
    node _T_2 = eq(delay, UInt<3>("h4")) @[MergeDIstribution.scala 41:29]
    node _T_3 = and(io.merge, _T_2) @[MergeDIstribution.scala 41:19]
    when _T_3 : @[MergeDIstribution.scala 41:53]
      node _T_4 = lt(k, io.IDex) @[MergeDIstribution.scala 43:14]
      node _T_5 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 43:30]
      node _T_6 = and(_T_4, _T_5) @[MergeDIstribution.scala 43:24]
      when _T_6 : @[MergeDIstribution.scala 43:56]
        node _k_T = add(k, UInt<1>("h1")) @[MergeDIstribution.scala 44:16]
        node _k_T_1 = tail(_k_T, 1) @[MergeDIstribution.scala 44:16]
        k <= _k_T_1 @[MergeDIstribution.scala 44:11]
        l <= UInt<1>("h0") @[MergeDIstribution.scala 45:11]
      else :
        node _T_7 = leq(k, io.IDex) @[MergeDIstribution.scala 46:20]
        node _T_8 = lt(l, UInt<2>("h3")) @[MergeDIstribution.scala 46:37]
        node _T_9 = and(_T_7, _T_8) @[MergeDIstribution.scala 46:31]
        when _T_9 : @[MergeDIstribution.scala 46:61]
          node _l_T = add(l, UInt<1>("h1")) @[MergeDIstribution.scala 47:16]
          node _l_T_1 = tail(_l_T, 1) @[MergeDIstribution.scala 47:16]
          l <= _l_T_1 @[MergeDIstribution.scala 47:11]
        else :
          node _T_10 = eq(k, io.IDex) @[MergeDIstribution.scala 48:18]
          node _T_11 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 48:36]
          node _T_12 = and(_T_10, _T_11) @[MergeDIstribution.scala 48:30]
          when _T_12 : @[MergeDIstribution.scala 48:62]
            l <= l @[MergeDIstribution.scala 49:11]
      node _T_13 = bits(k, 1, 0)
      node _T_14 = bits(l, 1, 0)
      node _b_T = bits(k, 1, 0)
      node _b_T_1 = bits(l, 1, 0)
      b[_T_13][_T_14] <= io.PreMat[_b_T][_b_T_1] @[MergeDIstribution.scala 52:13]
    node _T_15 = eq(i, UInt<1>("h0")) @[MergeDIstribution.scala 54:28]
    node _T_16 = and(io.i_valid, _T_15) @[MergeDIstribution.scala 54:22]
    node _T_17 = eq(j, UInt<1>("h0")) @[MergeDIstribution.scala 54:44]
    node _T_18 = and(_T_16, _T_17) @[MergeDIstribution.scala 54:37]
    when _T_18 : @[MergeDIstribution.scala 54:53]
      node _i_T = add(io.IDex, UInt<1>("h1")) @[MergeDIstribution.scala 55:22]
      node _i_T_1 = tail(_i_T, 1) @[MergeDIstribution.scala 55:22]
      i <= _i_T_1 @[MergeDIstribution.scala 55:11]
      j <= UInt<1>("h0") @[MergeDIstribution.scala 56:11]
      node _check_T = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 57:24]
      node _check_T_1 = tail(_check_T, 1) @[MergeDIstribution.scala 57:24]
      check <= _check_T_1 @[MergeDIstribution.scala 57:15]
    node _T_19 = geq(check, UInt<1>("h1")) @[MergeDIstribution.scala 60:17]
    when _T_19 : @[MergeDIstribution.scala 60:24]
      counter <= UInt<1>("h1") @[MergeDIstribution.scala 61:17]
      node _check_T_2 = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 62:24]
      node _check_T_3 = tail(_check_T_2, 1) @[MergeDIstribution.scala 62:24]
      check <= _check_T_3 @[MergeDIstribution.scala 62:15]
    when io.merge : @[MergeDIstribution.scala 67:19]
      node _T_20 = bits(i, 1, 0)
      node _T_21 = bits(j, 1, 0)
      node _b_T_2 = bits(i, 1, 0)
      node _b_T_3 = bits(j, 1, 0)
      b[_T_20][_T_21] <= io.mat[_b_T_2][_b_T_3] @[MergeDIstribution.scala 68:13]
    when counter : @[MergeDIstribution.scala 97:14]
      node _T_22 = bits(i, 1, 0)
      node _T_23 = bits(j, 1, 0)
      node _T_24 = eq(io.mat[_T_22][_T_23], UInt<3>("h4")) @[MergeDIstribution.scala 100:23]
      when _T_24 : @[MergeDIstribution.scala 100:44]
        i <= i @[MergeDIstribution.scala 101:11]
        j <= j @[MergeDIstribution.scala 102:11]
        io.valid <= UInt<1>("h1") @[MergeDIstribution.scala 103:18]
      else :
        node _T_25 = lt(i, UInt<2>("h3")) @[MergeDIstribution.scala 104:20]
        node _T_26 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 104:49]
        node _T_27 = and(_T_25, _T_26) @[MergeDIstribution.scala 104:43]
        when _T_27 : @[MergeDIstribution.scala 104:75]
          node _i_T_2 = add(i, UInt<1>("h1")) @[MergeDIstribution.scala 105:16]
          node _i_T_3 = tail(_i_T_2, 1) @[MergeDIstribution.scala 105:16]
          i <= _i_T_3 @[MergeDIstribution.scala 105:11]
          j <= UInt<1>("h0") @[MergeDIstribution.scala 106:11]
        else :
          node _T_28 = leq(i, UInt<2>("h3")) @[MergeDIstribution.scala 107:20]
          node _T_29 = lt(j, UInt<2>("h3")) @[MergeDIstribution.scala 107:50]
          node _T_30 = and(_T_28, _T_29) @[MergeDIstribution.scala 107:44]
          when _T_30 : @[MergeDIstribution.scala 107:74]
            node _j_T = add(j, UInt<1>("h1")) @[MergeDIstribution.scala 108:16]
            node _j_T_1 = tail(_j_T, 1) @[MergeDIstribution.scala 108:16]
            j <= _j_T_1 @[MergeDIstribution.scala 108:11]
          else :
            node _T_31 = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 109:18]
            node _T_32 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 109:49]
            node _T_33 = and(_T_31, _T_32) @[MergeDIstribution.scala 109:43]
            when _T_33 : @[MergeDIstribution.scala 109:75]
              j <= j @[MergeDIstribution.scala 110:11]

  module Distribution_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip matrix : UInt<32>[4][4], flip s : UInt<32>, out : UInt<32>[4][4], ProcessValid : UInt<1>, flip valid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 19:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 20:20]
    reg count : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 21:24]
    wire _Idex_WIRE : UInt<32>[4] @[DIstribution.scala 22:31]
    _Idex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    reg Idex : UInt<32>[4], clock with :
      reset => (reset, _Idex_WIRE) @[DIstribution.scala 22:23]
    wire _Jdex_WIRE : UInt<32>[4] @[DIstribution.scala 23:31]
    _Jdex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    reg Jdex : UInt<32>[4], clock with :
      reset => (reset, _Jdex_WIRE) @[DIstribution.scala 23:23]
    wire _mat_WIRE : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_1 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_2 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_3 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 24:30]
    _mat_WIRE_4[0] <= _mat_WIRE @[DIstribution.scala 24:30]
    _mat_WIRE_4[1] <= _mat_WIRE_1 @[DIstribution.scala 24:30]
    _mat_WIRE_4[2] <= _mat_WIRE_2 @[DIstribution.scala 24:30]
    _mat_WIRE_4[3] <= _mat_WIRE_3 @[DIstribution.scala 24:30]
    reg mat : UInt<1>[4][4], clock with :
      reset => (reset, _mat_WIRE_4) @[DIstribution.scala 24:22]
    reg iterationNo : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 25:30]
    when io.valid : @[DIstribution.scala 27:21]
      node _io_validIteration_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 30:29]
      node _io_validIteration_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 30:62]
      node _io_validIteration_T_2 = and(_io_validIteration_T, _io_validIteration_T_1) @[DIstribution.scala 30:56]
      io.validIteration <= _io_validIteration_T_2 @[DIstribution.scala 30:23]
      io.iteration <= iterationNo @[DIstribution.scala 31:18]
      node _T = bits(i, 1, 0)
      node _T_1 = bits(j, 1, 0)
      node _T_2 = eq(io.matrix[_T][_T_1], UInt<1>("h1")) @[DIstribution.scala 34:27]
      when _T_2 : @[DIstribution.scala 34:35]
        node _iterationNo_T = add(iterationNo, UInt<1>("h1")) @[DIstribution.scala 35:34]
        node _iterationNo_T_1 = tail(_iterationNo_T, 1) @[DIstribution.scala 35:34]
        iterationNo <= _iterationNo_T_1 @[DIstribution.scala 35:19]
      mat <= io.matrix @[DIstribution.scala 38:9]
      node _T_3 = bits(i, 1, 0)
      node _T_4 = bits(j, 1, 0)
      node _T_5 = eq(io.matrix[_T_3][_T_4], UInt<1>("h1")) @[DIstribution.scala 47:28]
      when _T_5 : @[DIstribution.scala 47:38]
        node _count_T = add(count, UInt<1>("h1")) @[DIstribution.scala 48:24]
        node _count_T_1 = tail(_count_T, 1) @[DIstribution.scala 48:24]
        count <= _count_T_1 @[DIstribution.scala 48:15]
        node _T_6 = bits(count, 1, 0)
        Idex[_T_6] <= i @[DIstribution.scala 49:21]
        node _T_7 = bits(count, 1, 0)
        Jdex[_T_7] <= j @[DIstribution.scala 50:21]
      else :
        node _T_8 = bits(i, 1, 0)
        node _T_9 = bits(j, 1, 0)
        node _T_10 = eq(io.matrix[_T_8][_T_9], UInt<1>("h1")) @[DIstribution.scala 51:33]
        node _T_11 = eq(i, UInt<2>("h3")) @[DIstribution.scala 51:48]
        node _T_12 = and(_T_10, _T_11) @[DIstribution.scala 51:42]
        node _T_13 = eq(j, UInt<2>("h3")) @[DIstribution.scala 51:80]
        node _T_14 = and(_T_12, _T_13) @[DIstribution.scala 51:74]
        when _T_14 : @[DIstribution.scala 51:106]
          node _T_15 = bits(count, 1, 0)
          Idex[_T_15] <= i @[DIstribution.scala 52:21]
          node _T_16 = bits(count, 1, 0)
          Jdex[_T_16] <= j @[DIstribution.scala 53:21]
      inst part2 of abc2_2 @[DIstribution.scala 55:19]
      part2.clock <= clock
      part2.reset <= reset
      part2.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 56:14]
      part2.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 56:14]
      part2.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 56:14]
      part2.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 56:14]
      part2.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 56:14]
      part2.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 56:14]
      part2.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 56:14]
      part2.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 56:14]
      part2.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 56:14]
      part2.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 56:14]
      part2.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 56:14]
      part2.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 56:14]
      part2.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 56:14]
      part2.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 56:14]
      part2.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 56:14]
      part2.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 56:14]
      node _c_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 57:23]
      node _c_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 57:54]
      node _c_T_2 = and(_c_T, _c_T_1) @[DIstribution.scala 57:48]
      reg c : UInt<1>, clock with :
        reset => (UInt<1>("h0"), c) @[DIstribution.scala 57:20]
      c <= _c_T_2 @[DIstribution.scala 57:20]
      part2.io.valid <= c @[DIstribution.scala 58:20]
      when c : @[DIstribution.scala 59:13]
        node _part2_io_IDex_T = bits(io.s, 1, 0)
        part2.io.IDex <= Idex[_part2_io_IDex_T] @[DIstribution.scala 60:19]
        node _part2_io_JDex_T = bits(io.s, 1, 0)
        part2.io.JDex <= Jdex[_part2_io_JDex_T] @[DIstribution.scala 61:19]
      else :
        part2.io.IDex <= UInt<1>("h0") @[DIstribution.scala 63:19]
        part2.io.JDex <= UInt<1>("h0") @[DIstribution.scala 64:19]
      inst part3 of abc3_2 @[DIstribution.scala 69:23]
      part3.clock <= clock
      part3.reset <= reset
      wire check : UInt<1>
      check <= UInt<1>("h0")
      when part2.io.Ovalid : @[DIstribution.scala 75:26]
        check <= UInt<1>("h0") @[DIstribution.scala 76:15]
      else :
        check <= UInt<1>("h1") @[DIstribution.scala 78:15]
      node _e_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 80:17]
      node _e_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 80:49]
      node _e_T_2 = and(_e_T, _e_T_1) @[DIstribution.scala 80:43]
      node _e_T_3 = sub(count, UInt<1>("h1")) @[DIstribution.scala 80:85]
      node _e_T_4 = tail(_e_T_3, 1) @[DIstribution.scala 80:85]
      node _e_T_5 = lt(_e_T_4, io.s) @[DIstribution.scala 80:91]
      node e = and(_e_T_2, _e_T_5) @[DIstribution.scala 80:75]
      node _T_17 = and(part2.io.ProcessValid, check) @[DIstribution.scala 82:33]
      when _T_17 : @[DIstribution.scala 82:42]
        reg part3_io_merge_REG : UInt<1>, clock with :
          reset => (UInt<1>("h0"), part3_io_merge_REG) @[DIstribution.scala 83:30]
        part3_io_merge_REG <= c @[DIstribution.scala 83:30]
        part3.io.merge <= part3_io_merge_REG @[DIstribution.scala 83:20]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 84:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 84:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 84:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 84:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 84:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 84:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 84:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 84:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 84:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 84:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 84:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 84:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 84:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 84:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 84:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 84:18]
        part3.io.i_valid <= part2.io.ProcessValid @[DIstribution.scala 85:22]
        part3.io.PreMat[0][0] <= part2.io.OutMat[0][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][1] <= part2.io.OutMat[0][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][2] <= part2.io.OutMat[0][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][3] <= part2.io.OutMat[0][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][0] <= part2.io.OutMat[1][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][1] <= part2.io.OutMat[1][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][2] <= part2.io.OutMat[1][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][3] <= part2.io.OutMat[1][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][0] <= part2.io.OutMat[2][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][1] <= part2.io.OutMat[2][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][2] <= part2.io.OutMat[2][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][3] <= part2.io.OutMat[2][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][0] <= part2.io.OutMat[3][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][1] <= part2.io.OutMat[3][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][2] <= part2.io.OutMat[3][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][3] <= part2.io.OutMat[3][3] @[DIstribution.scala 86:21]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 87:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 87:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 87:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 87:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 87:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 87:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 87:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 87:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 87:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 87:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 87:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 87:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 87:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 87:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 87:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 87:18]
        node _part3_io_IDex_T = bits(io.s, 1, 0)
        part3.io.IDex <= Idex[_part3_io_IDex_T] @[DIstribution.scala 88:19]
        node _part3_io_JDex_T = bits(io.s, 1, 0)
        part3.io.JDex <= Jdex[_part3_io_JDex_T] @[DIstribution.scala 89:19]
        node _T_18 = eq(i, UInt<2>("h3")) @[DIstribution.scala 90:14]
        node _T_19 = eq(j, UInt<2>("h3")) @[DIstribution.scala 90:46]
        node _T_20 = and(_T_18, _T_19) @[DIstribution.scala 90:40]
        node _T_21 = sub(count, UInt<1>("h1")) @[DIstribution.scala 90:82]
        node _T_22 = tail(_T_21, 1) @[DIstribution.scala 90:82]
        node _T_23 = lt(_T_22, io.s) @[DIstribution.scala 90:88]
        node _T_24 = and(_T_20, _T_23) @[DIstribution.scala 90:72]
        when _T_24 : @[DIstribution.scala 90:96]
          wire _WIRE : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_1 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_2 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_3 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 91:35]
          _WIRE_4[0] <= _WIRE @[DIstribution.scala 91:35]
          _WIRE_4[1] <= _WIRE_1 @[DIstribution.scala 91:35]
          _WIRE_4[2] <= _WIRE_2 @[DIstribution.scala 91:35]
          _WIRE_4[3] <= _WIRE_3 @[DIstribution.scala 91:35]
          wire _WIRE_5 : UInt<1>[4][4]
          _WIRE_5 <= _WIRE_4
          io.out <= _WIRE_5 @[DIstribution.scala 91:16]
        else :
          io.out <= part3.io.Omat @[DIstribution.scala 93:12]
        io.ProcessValid <= part3.io.valid @[DIstribution.scala 94:21]
      else :
        part3.io.merge <= UInt<1>("h0") @[DIstribution.scala 96:24]
        wire _WIRE_6 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_6[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_7 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_7[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_8 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_8[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_9 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_9[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_10 : UInt<32>[4][4] @[DIstribution.scala 97:31]
        _WIRE_10[0] <= _WIRE_6 @[DIstribution.scala 97:31]
        _WIRE_10[1] <= _WIRE_7 @[DIstribution.scala 97:31]
        _WIRE_10[2] <= _WIRE_8 @[DIstribution.scala 97:31]
        _WIRE_10[3] <= _WIRE_9 @[DIstribution.scala 97:31]
        part3.io.mat[0][0] <= _WIRE_10[0][0] @[DIstribution.scala 97:22]
        part3.io.mat[0][1] <= _WIRE_10[0][1] @[DIstribution.scala 97:22]
        part3.io.mat[0][2] <= _WIRE_10[0][2] @[DIstribution.scala 97:22]
        part3.io.mat[0][3] <= _WIRE_10[0][3] @[DIstribution.scala 97:22]
        part3.io.mat[1][0] <= _WIRE_10[1][0] @[DIstribution.scala 97:22]
        part3.io.mat[1][1] <= _WIRE_10[1][1] @[DIstribution.scala 97:22]
        part3.io.mat[1][2] <= _WIRE_10[1][2] @[DIstribution.scala 97:22]
        part3.io.mat[1][3] <= _WIRE_10[1][3] @[DIstribution.scala 97:22]
        part3.io.mat[2][0] <= _WIRE_10[2][0] @[DIstribution.scala 97:22]
        part3.io.mat[2][1] <= _WIRE_10[2][1] @[DIstribution.scala 97:22]
        part3.io.mat[2][2] <= _WIRE_10[2][2] @[DIstribution.scala 97:22]
        part3.io.mat[2][3] <= _WIRE_10[2][3] @[DIstribution.scala 97:22]
        part3.io.mat[3][0] <= _WIRE_10[3][0] @[DIstribution.scala 97:22]
        part3.io.mat[3][1] <= _WIRE_10[3][1] @[DIstribution.scala 97:22]
        part3.io.mat[3][2] <= _WIRE_10[3][2] @[DIstribution.scala 97:22]
        part3.io.mat[3][3] <= _WIRE_10[3][3] @[DIstribution.scala 97:22]
        part3.io.i_valid <= UInt<1>("h0") @[DIstribution.scala 98:26]
        wire _WIRE_11 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_11[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_12 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_12[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_13 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_13[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_14 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_14[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_15 : UInt<32>[4][4] @[DIstribution.scala 99:31]
        _WIRE_15[0] <= _WIRE_11 @[DIstribution.scala 99:31]
        _WIRE_15[1] <= _WIRE_12 @[DIstribution.scala 99:31]
        _WIRE_15[2] <= _WIRE_13 @[DIstribution.scala 99:31]
        _WIRE_15[3] <= _WIRE_14 @[DIstribution.scala 99:31]
        part3.io.PreMat[0][0] <= _WIRE_15[0][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][1] <= _WIRE_15[0][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][2] <= _WIRE_15[0][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][3] <= _WIRE_15[0][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][0] <= _WIRE_15[1][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][1] <= _WIRE_15[1][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][2] <= _WIRE_15[1][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][3] <= _WIRE_15[1][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][0] <= _WIRE_15[2][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][1] <= _WIRE_15[2][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][2] <= _WIRE_15[2][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][3] <= _WIRE_15[2][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][0] <= _WIRE_15[3][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][1] <= _WIRE_15[3][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][2] <= _WIRE_15[3][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][3] <= _WIRE_15[3][3] @[DIstribution.scala 99:21]
        part3.io.IDex <= UInt<1>("h0") @[DIstribution.scala 100:19]
        part3.io.JDex <= UInt<1>("h0") @[DIstribution.scala 101:19]
        node _T_25 = eq(i, UInt<2>("h3")) @[DIstribution.scala 102:14]
        node _T_26 = eq(j, UInt<2>("h3")) @[DIstribution.scala 102:46]
        node _T_27 = and(_T_25, _T_26) @[DIstribution.scala 102:40]
        node _T_28 = sub(count, UInt<1>("h1")) @[DIstribution.scala 102:82]
        node _T_29 = tail(_T_28, 1) @[DIstribution.scala 102:82]
        node _T_30 = lt(_T_29, io.s) @[DIstribution.scala 102:88]
        node _T_31 = and(_T_27, _T_30) @[DIstribution.scala 102:72]
        when _T_31 : @[DIstribution.scala 102:96]
          wire _WIRE_16 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_16[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_17 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_17[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_18 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_18[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_19 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_19[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_20 : UInt<1>[4][4] @[DIstribution.scala 103:35]
          _WIRE_20[0] <= _WIRE_16 @[DIstribution.scala 103:35]
          _WIRE_20[1] <= _WIRE_17 @[DIstribution.scala 103:35]
          _WIRE_20[2] <= _WIRE_18 @[DIstribution.scala 103:35]
          _WIRE_20[3] <= _WIRE_19 @[DIstribution.scala 103:35]
          wire _WIRE_21 : UInt<1>[4][4]
          _WIRE_21 <= _WIRE_20
          io.out <= _WIRE_21 @[DIstribution.scala 103:16]
        else :
          io.out <= part2.io.OutMat @[DIstribution.scala 105:12]
        io.ProcessValid <= part2.io.Ovalid @[DIstribution.scala 106:21]
      node _T_32 = lt(i, UInt<2>("h3")) @[DIstribution.scala 113:14]
      node _T_33 = eq(j, UInt<2>("h3")) @[DIstribution.scala 113:43]
      node _T_34 = and(_T_32, _T_33) @[DIstribution.scala 113:37]
      when _T_34 : @[DIstribution.scala 113:69]
        node _i_T = add(i, UInt<1>("h1")) @[DIstribution.scala 114:16]
        node _i_T_1 = tail(_i_T, 1) @[DIstribution.scala 114:16]
        i <= _i_T_1 @[DIstribution.scala 114:11]
      node _ab_T = leq(i, UInt<2>("h3")) @[DIstribution.scala 117:18]
      node _ab_T_1 = lt(j, UInt<2>("h3")) @[DIstribution.scala 117:48]
      node ab = and(_ab_T, _ab_T_1) @[DIstribution.scala 117:42]
      node _T_35 = leq(i, UInt<2>("h3")) @[DIstribution.scala 119:14]
      node _T_36 = lt(j, UInt<2>("h3")) @[DIstribution.scala 119:44]
      node _T_37 = and(_T_35, _T_36) @[DIstribution.scala 119:38]
      when _T_37 : @[DIstribution.scala 119:68]
        node _j_T = add(j, UInt<1>("h1")) @[DIstribution.scala 120:16]
        node _j_T_1 = tail(_j_T, 1) @[DIstribution.scala 120:16]
        j <= _j_T_1 @[DIstribution.scala 120:11]
      else :
        node _T_38 = eq(i, UInt<2>("h3")) @[DIstribution.scala 121:18]
        node _T_39 = eq(j, UInt<2>("h3")) @[DIstribution.scala 121:49]
        node _T_40 = and(_T_38, _T_39) @[DIstribution.scala 121:43]
        when _T_40 : @[DIstribution.scala 121:75]
          j <= j @[DIstribution.scala 122:11]
        else :
          j <= UInt<1>("h0") @[DIstribution.scala 124:11]
    else :
      wire _WIRE_22 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_22[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_23 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_23[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_24 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_24[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_25 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_25[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_26 : UInt<1>[4][4] @[DIstribution.scala 131:35]
      _WIRE_26[0] <= _WIRE_22 @[DIstribution.scala 131:35]
      _WIRE_26[1] <= _WIRE_23 @[DIstribution.scala 131:35]
      _WIRE_26[2] <= _WIRE_24 @[DIstribution.scala 131:35]
      _WIRE_26[3] <= _WIRE_25 @[DIstribution.scala 131:35]
      wire _WIRE_27 : UInt<1>[4][4]
      _WIRE_27 <= _WIRE_26
      io.out <= _WIRE_27 @[DIstribution.scala 131:16]
      io.ProcessValid <= UInt<1>("h0") @[DIstribution.scala 132:25]
      io.iteration <= UInt<1>("h0") @[DIstribution.scala 133:22]
      io.validIteration <= UInt<1>("h0") @[DIstribution.scala 134:27]

  module PathFinder_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], PF_Valid : UInt<1>, flip NoDPE : UInt<32>, flip DataValid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    when io.DataValid : @[PathFinder.scala 20:20]
      wire _counterRegs1_WIRE : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_1 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_2 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_3 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[PathFinder.scala 21:37]
      reg counterRegs1 : UInt<16>[4][4], clock with :
        reset => (reset, _counterRegs1_WIRE_4) @[PathFinder.scala 21:29]
      wire _counterRegs2_WIRE : UInt<16>[4] @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      reg counterRegs2 : UInt<16>[4], clock with :
        reset => (reset, _counterRegs2_WIRE) @[PathFinder.scala 22:29]
      reg delay : UInt<32>, clock with :
        reset => (reset, UInt<32>("h0")) @[PathFinder.scala 25:22]
      inst myMuxes of Muxes_2 @[PathFinder.scala 26:23]
      myMuxes.clock <= clock
      myMuxes.reset <= reset
      inst myCounter of SourceDestination_2 @[PathFinder.scala 32:25]
      myCounter.clock <= clock
      myCounter.reset <= reset
      reg myCounter_io_start_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), myCounter_io_start_REG) @[PathFinder.scala 33:32]
      myCounter_io_start_REG <= io.DataValid @[PathFinder.scala 33:32]
      myCounter.io.start <= myCounter_io_start_REG @[PathFinder.scala 33:22]
      myCounter.io.Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 34:34]
      myCounter.io.Streaming_matrix[0] <= io.Streaming_matrix[0] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[1] <= io.Streaming_matrix[1] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[2] <= io.Streaming_matrix[2] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[3] <= io.Streaming_matrix[3] @[PathFinder.scala 35:33]
      inst Distribution of Distribution_2 @[PathFinder.scala 37:28]
      Distribution.clock <= clock
      Distribution.reset <= reset
      Distribution.io.valid <= myCounter.io.valid @[PathFinder.scala 39:25]
      Distribution.io.s <= io.NoDPE @[PathFinder.scala 40:21]
      io.iteration <= Distribution.io.iteration @[PathFinder.scala 41:16]
      io.validIteration <= Distribution.io.validIteration @[PathFinder.scala 42:21]
      Distribution.io.matrix[0][0] <= myCounter.io.counterMatrix1.bits[0][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][1] <= myCounter.io.counterMatrix1.bits[0][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][2] <= myCounter.io.counterMatrix1.bits[0][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][3] <= myCounter.io.counterMatrix1.bits[0][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][0] <= myCounter.io.counterMatrix1.bits[1][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][1] <= myCounter.io.counterMatrix1.bits[1][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][2] <= myCounter.io.counterMatrix1.bits[1][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][3] <= myCounter.io.counterMatrix1.bits[1][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][0] <= myCounter.io.counterMatrix1.bits[2][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][1] <= myCounter.io.counterMatrix1.bits[2][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][2] <= myCounter.io.counterMatrix1.bits[2][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][3] <= myCounter.io.counterMatrix1.bits[2][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][0] <= myCounter.io.counterMatrix1.bits[3][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][1] <= myCounter.io.counterMatrix1.bits[3][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][2] <= myCounter.io.counterMatrix1.bits[3][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][3] <= myCounter.io.counterMatrix1.bits[3][3] @[PathFinder.scala 43:26]
      when Distribution.io.ProcessValid : @[PathFinder.scala 52:40]
        myCounter.io.counterMatrix1.ready <= UInt<1>("h1") @[PathFinder.scala 53:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h1") @[PathFinder.scala 54:39]
        myMuxes.io.mat1[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat2[0] <= io.Streaming_matrix[0] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[1] <= io.Streaming_matrix[1] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[2] <= io.Streaming_matrix[2] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[3] <= io.Streaming_matrix[3] @[PathFinder.scala 57:21]
        myMuxes.io.counterMatrix1 <= Distribution.io.out @[PathFinder.scala 58:31]
        myMuxes.io.counterMatrix2 <= myCounter.io.counterMatrix2.bits @[PathFinder.scala 59:31]
      else :
        myCounter.io.counterMatrix1.ready <= UInt<1>("h0") @[PathFinder.scala 62:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h0") @[PathFinder.scala 64:39]
        myMuxes.io.mat1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat2[0] <= counterRegs2[0] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[1] <= counterRegs2[1] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[2] <= counterRegs2[2] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[3] <= counterRegs2[3] @[PathFinder.scala 66:21]
        myMuxes.io.counterMatrix1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix2[0] <= counterRegs2[0] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[1] <= counterRegs2[1] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[2] <= counterRegs2[2] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[3] <= counterRegs2[3] @[PathFinder.scala 68:31]
      io.PF_Valid <= myMuxes.io.valid @[PathFinder.scala 74:15]
      io.i_mux_bus <= myMuxes.io.i_mux_bus @[PathFinder.scala 75:16]
      io.Source <= myMuxes.io.Source @[PathFinder.scala 76:13]
      io.destination <= myMuxes.io.destination @[PathFinder.scala 77:18]
    else :
      io.validIteration <= UInt<1>("h0") @[PathFinder.scala 79:21]
      io.iteration <= UInt<1>("h0") @[PathFinder.scala 80:16]
      io.PF_Valid <= UInt<1>("h0") @[PathFinder.scala 81:15]
      wire _WIRE : UInt<32>[16] @[PathFinder.scala 82:35]
      _WIRE[0] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[1] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[2] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[3] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[4] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[5] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[6] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[7] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[8] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[9] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[10] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[11] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[12] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[13] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[14] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[15] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      wire _WIRE_1 : UInt<32>[16]
      _WIRE_1 <= _WIRE
      io.i_mux_bus <= _WIRE_1 @[PathFinder.scala 82:16]
      wire _WIRE_2 : UInt<32>[16] @[PathFinder.scala 83:32]
      _WIRE_2[0] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[1] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[2] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[3] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[4] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[5] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[6] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[7] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[8] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[9] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[10] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[11] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[12] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[13] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[14] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[15] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      wire _WIRE_3 : UInt<32>[16]
      _WIRE_3 <= _WIRE_2
      io.Source <= _WIRE_3 @[PathFinder.scala 83:13]
      wire _WIRE_4 : UInt<32>[16] @[PathFinder.scala 84:37]
      _WIRE_4[0] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[1] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[2] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[3] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[4] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[5] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[6] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[7] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[8] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[9] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[10] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[11] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[12] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[13] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[14] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[15] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      wire _WIRE_5 : UInt<32>[16]
      _WIRE_5 <= _WIRE_4
      io.destination <= _WIRE_5 @[PathFinder.scala 84:18]

  module Muxes_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip mat1 : UInt<16>[4][4], flip mat2 : UInt<16>[4], flip counterMatrix1 : UInt<16>[4][4], flip counterMatrix2 : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], valid : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[Muxes.scala 19:40]
    prevStationary_matrix[0][0] <= io.mat1[0][0] @[Muxes.scala 19:40]
    prevStationary_matrix[0][1] <= io.mat1[0][1] @[Muxes.scala 19:40]
    prevStationary_matrix[0][2] <= io.mat1[0][2] @[Muxes.scala 19:40]
    prevStationary_matrix[0][3] <= io.mat1[0][3] @[Muxes.scala 19:40]
    prevStationary_matrix[1][0] <= io.mat1[1][0] @[Muxes.scala 19:40]
    prevStationary_matrix[1][1] <= io.mat1[1][1] @[Muxes.scala 19:40]
    prevStationary_matrix[1][2] <= io.mat1[1][2] @[Muxes.scala 19:40]
    prevStationary_matrix[1][3] <= io.mat1[1][3] @[Muxes.scala 19:40]
    prevStationary_matrix[2][0] <= io.mat1[2][0] @[Muxes.scala 19:40]
    prevStationary_matrix[2][1] <= io.mat1[2][1] @[Muxes.scala 19:40]
    prevStationary_matrix[2][2] <= io.mat1[2][2] @[Muxes.scala 19:40]
    prevStationary_matrix[2][3] <= io.mat1[2][3] @[Muxes.scala 19:40]
    prevStationary_matrix[3][0] <= io.mat1[3][0] @[Muxes.scala 19:40]
    prevStationary_matrix[3][1] <= io.mat1[3][1] @[Muxes.scala 19:40]
    prevStationary_matrix[3][2] <= io.mat1[3][2] @[Muxes.scala 19:40]
    prevStationary_matrix[3][3] <= io.mat1[3][3] @[Muxes.scala 19:40]
    reg prevStreaming_matrix : UInt<16>[4], clock with :
      reset => (UInt<1>("h0"), prevStreaming_matrix) @[Muxes.scala 20:39]
    prevStreaming_matrix[0] <= io.mat2[0] @[Muxes.scala 20:39]
    prevStreaming_matrix[1] <= io.mat2[1] @[Muxes.scala 20:39]
    prevStreaming_matrix[2] <= io.mat2[2] @[Muxes.scala 20:39]
    prevStreaming_matrix[3] <= io.mat2[3] @[Muxes.scala 20:39]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[Muxes.scala 21:31]
    matricesAreEqual <= UInt<1>("h1") @[Muxes.scala 22:22]
    reg jValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 27:25]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 28:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 29:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 30:20]
    reg counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Muxes.scala 31:26]
    wire _mux_WIRE : UInt<4>[16] @[Muxes.scala 32:30]
    _mux_WIRE[0] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[1] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[2] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[3] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[4] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[5] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[6] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[7] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[8] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[9] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[10] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[11] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[12] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[13] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[14] <= UInt<4>("h0") @[Muxes.scala 32:30]
    _mux_WIRE[15] <= UInt<4>("h0") @[Muxes.scala 32:30]
    reg mux : UInt<4>[16], clock with :
      reset => (reset, _mux_WIRE) @[Muxes.scala 32:22]
    wire _src_WIRE : UInt<16>[16] @[Muxes.scala 33:30]
    _src_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 33:30]
    _src_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 33:30]
    reg src : UInt<16>[16], clock with :
      reset => (reset, _src_WIRE) @[Muxes.scala 33:22]
    wire _dest_WIRE : UInt<16>[16] @[Muxes.scala 34:31]
    _dest_WIRE[0] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[1] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[2] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[3] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[4] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[5] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[6] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[7] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[8] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[9] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[10] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[11] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[12] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[13] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[14] <= UInt<16>("h0") @[Muxes.scala 34:31]
    _dest_WIRE[15] <= UInt<16>("h0") @[Muxes.scala 34:31]
    reg dest : UInt<16>[16], clock with :
      reset => (reset, _dest_WIRE) @[Muxes.scala 34:23]
    io.i_mux_bus <= mux @[Muxes.scala 35:18]
    io.Source <= src @[Muxes.scala 36:15]
    io.destination <= dest @[Muxes.scala 37:20]
    node _T = neq(io.mat1[0][0], prevStationary_matrix[0][0]) @[Muxes.scala 45:28]
    when _T : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_1 = neq(io.mat1[0][1], prevStationary_matrix[0][1]) @[Muxes.scala 45:28]
    when _T_1 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_2 = neq(io.mat1[0][2], prevStationary_matrix[0][2]) @[Muxes.scala 45:28]
    when _T_2 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_3 = neq(io.mat1[0][3], prevStationary_matrix[0][3]) @[Muxes.scala 45:28]
    when _T_3 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_4 = neq(io.mat2[0], prevStreaming_matrix[0]) @[Muxes.scala 49:23]
    when _T_4 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_5 = neq(io.mat1[1][0], prevStationary_matrix[1][0]) @[Muxes.scala 45:28]
    when _T_5 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_6 = neq(io.mat1[1][1], prevStationary_matrix[1][1]) @[Muxes.scala 45:28]
    when _T_6 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_7 = neq(io.mat1[1][2], prevStationary_matrix[1][2]) @[Muxes.scala 45:28]
    when _T_7 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_8 = neq(io.mat1[1][3], prevStationary_matrix[1][3]) @[Muxes.scala 45:28]
    when _T_8 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_9 = neq(io.mat2[1], prevStreaming_matrix[1]) @[Muxes.scala 49:23]
    when _T_9 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_10 = neq(io.mat1[2][0], prevStationary_matrix[2][0]) @[Muxes.scala 45:28]
    when _T_10 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_11 = neq(io.mat1[2][1], prevStationary_matrix[2][1]) @[Muxes.scala 45:28]
    when _T_11 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_12 = neq(io.mat1[2][2], prevStationary_matrix[2][2]) @[Muxes.scala 45:28]
    when _T_12 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_13 = neq(io.mat1[2][3], prevStationary_matrix[2][3]) @[Muxes.scala 45:28]
    when _T_13 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_14 = neq(io.mat2[2], prevStreaming_matrix[2]) @[Muxes.scala 49:23]
    when _T_14 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_15 = neq(io.mat1[3][0], prevStationary_matrix[3][0]) @[Muxes.scala 45:28]
    when _T_15 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_16 = neq(io.mat1[3][1], prevStationary_matrix[3][1]) @[Muxes.scala 45:28]
    when _T_16 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_17 = neq(io.mat1[3][2], prevStationary_matrix[3][2]) @[Muxes.scala 45:28]
    when _T_17 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_18 = neq(io.mat1[3][3], prevStationary_matrix[3][3]) @[Muxes.scala 45:28]
    when _T_18 : @[Muxes.scala 45:61]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 46:28]
    node _T_19 = neq(io.mat2[3], prevStreaming_matrix[3]) @[Muxes.scala 49:23]
    when _T_19 : @[Muxes.scala 49:51]
      matricesAreEqual <= UInt<1>("h0") @[Muxes.scala 50:26]
    node _T_20 = bits(j, 1, 0)
    node _T_21 = bits(i, 1, 0)
    node _T_22 = neq(io.counterMatrix1[_T_20][_T_21], UInt<1>("h0")) @[Muxes.scala 54:36]
    node _T_23 = bits(i, 1, 0)
    node _T_24 = neq(io.mat2[_T_23], UInt<1>("h0")) @[Muxes.scala 54:60]
    node _T_25 = and(_T_22, _T_24) @[Muxes.scala 54:45]
    when _T_25 : @[Muxes.scala 54:70]
      node _T_26 = bits(j, 1, 0)
      node _T_27 = bits(i, 1, 0)
      node _T_28 = bits(i, 1, 0)
      node _T_29 = leq(io.counterMatrix1[_T_26][_T_27], io.counterMatrix2[_T_28]) @[Muxes.scala 56:38]
      when _T_29 : @[Muxes.scala 56:62]
        node _T_30 = bits(counter, 3, 0)
        node _mux_T = bits(i, 1, 0)
        node _mux_T_1 = sub(io.counterMatrix2[_mux_T], UInt<1>("h1")) @[Muxes.scala 57:51]
        node _mux_T_2 = tail(_mux_T_1, 1) @[Muxes.scala 57:51]
        node _mux_T_3 = bits(j, 1, 0)
        node _mux_T_4 = bits(i, 1, 0)
        node _mux_T_5 = sub(io.counterMatrix1[_mux_T_3][_mux_T_4], UInt<1>("h1")) @[Muxes.scala 57:85]
        node _mux_T_6 = tail(_mux_T_5, 1) @[Muxes.scala 57:85]
        node _mux_T_7 = sub(_mux_T_2, _mux_T_6) @[Muxes.scala 57:58]
        node _mux_T_8 = tail(_mux_T_7, 1) @[Muxes.scala 57:58]
        mux[_T_30] <= _mux_T_8 @[Muxes.scala 57:24]
        node _T_31 = bits(counter, 3, 0)
        node _src_T = bits(i, 1, 0)
        src[_T_31] <= io.mat2[_src_T] @[Muxes.scala 58:24]
        node _T_32 = bits(counter, 3, 0)
        node _dest_T = bits(j, 1, 0)
        node _dest_T_1 = bits(i, 1, 0)
        dest[_T_32] <= io.mat1[_dest_T][_dest_T_1] @[Muxes.scala 59:25]
      else :
        node _T_33 = bits(counter, 3, 0)
        node _mux_T_9 = bits(j, 1, 0)
        node _mux_T_10 = bits(i, 1, 0)
        node _mux_T_11 = sub(io.counterMatrix1[_mux_T_9][_mux_T_10], UInt<1>("h1")) @[Muxes.scala 61:54]
        node _mux_T_12 = tail(_mux_T_11, 1) @[Muxes.scala 61:54]
        node _mux_T_13 = bits(i, 1, 0)
        node _mux_T_14 = sub(io.counterMatrix2[_mux_T_13], UInt<1>("h1")) @[Muxes.scala 61:85]
        node _mux_T_15 = tail(_mux_T_14, 1) @[Muxes.scala 61:85]
        node _mux_T_16 = sub(_mux_T_12, _mux_T_15) @[Muxes.scala 61:61]
        node _mux_T_17 = tail(_mux_T_16, 1) @[Muxes.scala 61:61]
        mux[_T_33] <= _mux_T_17 @[Muxes.scala 61:24]
        node _T_34 = bits(counter, 3, 0)
        node _src_T_1 = bits(i, 1, 0)
        src[_T_34] <= io.mat2[_src_T_1] @[Muxes.scala 62:24]
        node _T_35 = bits(counter, 3, 0)
        node _dest_T_2 = bits(j, 1, 0)
        node _dest_T_3 = bits(i, 1, 0)
        dest[_T_35] <= io.mat1[_dest_T_2][_dest_T_3] @[Muxes.scala 63:25]
      node _T_36 = not(jValid) @[Muxes.scala 66:15]
      when _T_36 : @[Muxes.scala 66:24]
        node _T_37 = eq(j, UInt<2>("h3")) @[Muxes.scala 68:22]
        node _T_38 = eq(i, UInt<2>("h3")) @[Muxes.scala 68:56]
        node _T_39 = and(_T_37, _T_38) @[Muxes.scala 68:50]
        node _T_40 = not(_T_39) @[Muxes.scala 68:17]
        when _T_40 : @[Muxes.scala 68:85]
          node _counter_T = add(counter, UInt<1>("h1")) @[Muxes.scala 69:30]
          node _counter_T_1 = tail(_counter_T, 1) @[Muxes.scala 69:30]
          counter <= _counter_T_1 @[Muxes.scala 69:19]
    node _T_41 = eq(jValid, UInt<1>("h0")) @[Muxes.scala 76:19]
    when _T_41 : @[Muxes.scala 76:29]
      node _T_42 = lt(j, UInt<2>("h3")) @[Muxes.scala 78:14]
      when _T_42 : @[Muxes.scala 78:40]
        node _j_T = add(j, UInt<1>("h1")) @[Muxes.scala 79:16]
        node _j_T_1 = tail(_j_T, 1) @[Muxes.scala 79:16]
        j <= _j_T_1 @[Muxes.scala 79:11]
      else :
        node _T_43 = eq(j, UInt<2>("h3")) @[Muxes.scala 80:21]
        node _T_44 = eq(i, UInt<2>("h3")) @[Muxes.scala 80:55]
        node _T_45 = and(_T_43, _T_44) @[Muxes.scala 80:49]
        when _T_45 : @[Muxes.scala 80:83]
          jValid <= UInt<1>("h1") @[Muxes.scala 81:16]
        else :
          j <= UInt<1>("h0") @[Muxes.scala 83:11]
          node _T_46 = lt(i, UInt<2>("h3")) @[Muxes.scala 84:16]
          when _T_46 : @[Muxes.scala 84:42]
            node _i_T = add(i, UInt<1>("h1")) @[Muxes.scala 85:18]
            node _i_T_1 = tail(_i_T, 1) @[Muxes.scala 85:18]
            i <= _i_T_1 @[Muxes.scala 85:13]
    else :
      node _T_47 = eq(jValid, UInt<1>("h1")) @[Muxes.scala 89:25]
      node _T_48 = eq(matricesAreEqual, UInt<1>("h0")) @[Muxes.scala 89:55]
      node _T_49 = and(_T_47, _T_48) @[Muxes.scala 89:34]
      when _T_49 : @[Muxes.scala 89:64]
        i <= UInt<1>("h0") @[Muxes.scala 91:9]
        j <= UInt<1>("h0") @[Muxes.scala 92:9]
        jValid <= UInt<1>("h0") @[Muxes.scala 93:14]
        counter <= UInt<1>("h0") @[Muxes.scala 94:15]
        src[0] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[0] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[0] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[1] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[1] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[1] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[2] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[2] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[2] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[3] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[3] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[3] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[4] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[4] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[4] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[5] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[5] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[5] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[6] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[6] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[6] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[7] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[7] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[7] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[8] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[8] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[8] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[9] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[9] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[9] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[10] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[10] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[10] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[11] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[11] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[11] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[12] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[12] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[12] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[13] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[13] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[13] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[14] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[14] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[14] <= UInt<1>("h0") @[Muxes.scala 99:16]
        src[15] <= UInt<1>("h0") @[Muxes.scala 97:16]
        dest[15] <= UInt<1>("h0") @[Muxes.scala 98:17]
        mux[15] <= UInt<1>("h0") @[Muxes.scala 99:16]
    reg jNext : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Muxes.scala 105:24]
    jNext <= j @[Muxes.scala 106:11]
    node _T_50 = neq(k, UInt<1>("h0")) @[Muxes.scala 108:14]
    node _T_51 = eq(j, UInt<2>("h3")) @[Muxes.scala 108:28]
    node _T_52 = and(_T_50, _T_51) @[Muxes.scala 108:22]
    node _T_53 = eq(i, UInt<2>("h3")) @[Muxes.scala 108:60]
    node _T_54 = and(_T_52, _T_53) @[Muxes.scala 108:54]
    node _T_55 = eq(jNext, UInt<2>("h2")) @[Muxes.scala 108:96]
    node _T_56 = and(_T_54, _T_55) @[Muxes.scala 108:86]
    when _T_56 : @[Muxes.scala 108:122]
      io.valid <= UInt<1>("h1") @[Muxes.scala 109:16]
    else :
      io.valid <= UInt<1>("h0") @[Muxes.scala 111:16]
    node _T_57 = eq(i, UInt<2>("h3")) @[Muxes.scala 113:14]
    node _T_58 = eq(j, UInt<2>("h3")) @[Muxes.scala 113:48]
    node _T_59 = and(_T_57, _T_58) @[Muxes.scala 113:42]
    when _T_59 : @[Muxes.scala 113:76]
      node _k_T = add(k, UInt<1>("h1")) @[Muxes.scala 114:14]
      node _k_T_1 = tail(_k_T, 1) @[Muxes.scala 114:14]
      k <= _k_T_1 @[Muxes.scala 114:9]

  module SourceDestination_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], counterMatrix1 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4][4]}, counterMatrix2 : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<16>[4]}, valid : UInt<1>, flip start : UInt<1>}

    reg prevStationary_matrix : UInt<16>[4][4], clock with :
      reset => (UInt<1>("h0"), prevStationary_matrix) @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[SourceDestination.scala 15:40]
    prevStationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[SourceDestination.scala 15:40]
    reg matricesAreEqual : UInt<1>, clock with :
      reset => (UInt<1>("h0"), matricesAreEqual) @[SourceDestination.scala 16:31]
    wire _counterRegs1_WIRE : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_1 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_2 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_3 : UInt<16>[4] @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[SourceDestination.scala 17:72]
    wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[SourceDestination.scala 17:39]
    _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[SourceDestination.scala 17:39]
    reg counterRegs1 : UInt<16>[4][4], clock with :
      reset => (reset, _counterRegs1_WIRE_4) @[SourceDestination.scala 17:31]
    wire _counterRegs2_WIRE : UInt<16>[4] @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[0] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[1] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[2] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    _counterRegs2_WIRE[3] <= UInt<16>("h0") @[SourceDestination.scala 18:39]
    reg counterRegs2 : UInt<16>[4], clock with :
      reset => (reset, _counterRegs2_WIRE) @[SourceDestination.scala 18:31]
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 20:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 21:20]
    reg valid1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SourceDestination.scala 24:25]
    reg jValid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), jValid) @[SourceDestination.scala 25:21]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SourceDestination.scala 26:20]
    reg counter1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 28:27]
    reg counter2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[SourceDestination.scala 29:27]
    node _reg_i_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 31:29]
    node _reg_i_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 31:63]
    node _reg_i_T_2 = and(_reg_i_T, _reg_i_T_1) @[SourceDestination.scala 31:57]
    reg reg_i : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[SourceDestination.scala 31:24]
    reg_i <= _reg_i_T_2 @[SourceDestination.scala 31:24]
    when io.start : @[SourceDestination.scala 34:17]
      matricesAreEqual <= UInt<1>("h1") @[SourceDestination.scala 36:22]
      node _T = neq(io.Stationary_matrix[0][0], prevStationary_matrix[0][0]) @[SourceDestination.scala 40:41]
      when _T : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_1 = neq(io.Stationary_matrix[0][1], prevStationary_matrix[0][1]) @[SourceDestination.scala 40:41]
      when _T_1 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_2 = neq(io.Stationary_matrix[0][2], prevStationary_matrix[0][2]) @[SourceDestination.scala 40:41]
      when _T_2 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_3 = neq(io.Stationary_matrix[0][3], prevStationary_matrix[0][3]) @[SourceDestination.scala 40:41]
      when _T_3 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_4 = neq(io.Stationary_matrix[1][0], prevStationary_matrix[1][0]) @[SourceDestination.scala 40:41]
      when _T_4 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_5 = neq(io.Stationary_matrix[1][1], prevStationary_matrix[1][1]) @[SourceDestination.scala 40:41]
      when _T_5 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_6 = neq(io.Stationary_matrix[1][2], prevStationary_matrix[1][2]) @[SourceDestination.scala 40:41]
      when _T_6 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_7 = neq(io.Stationary_matrix[1][3], prevStationary_matrix[1][3]) @[SourceDestination.scala 40:41]
      when _T_7 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_8 = neq(io.Stationary_matrix[2][0], prevStationary_matrix[2][0]) @[SourceDestination.scala 40:41]
      when _T_8 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_9 = neq(io.Stationary_matrix[2][1], prevStationary_matrix[2][1]) @[SourceDestination.scala 40:41]
      when _T_9 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_10 = neq(io.Stationary_matrix[2][2], prevStationary_matrix[2][2]) @[SourceDestination.scala 40:41]
      when _T_10 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_11 = neq(io.Stationary_matrix[2][3], prevStationary_matrix[2][3]) @[SourceDestination.scala 40:41]
      when _T_11 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_12 = neq(io.Stationary_matrix[3][0], prevStationary_matrix[3][0]) @[SourceDestination.scala 40:41]
      when _T_12 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_13 = neq(io.Stationary_matrix[3][1], prevStationary_matrix[3][1]) @[SourceDestination.scala 40:41]
      when _T_13 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_14 = neq(io.Stationary_matrix[3][2], prevStationary_matrix[3][2]) @[SourceDestination.scala 40:41]
      when _T_14 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      node _T_15 = neq(io.Stationary_matrix[3][3], prevStationary_matrix[3][3]) @[SourceDestination.scala 40:41]
      when _T_15 : @[SourceDestination.scala 40:74]
        matricesAreEqual <= UInt<1>("h0") @[SourceDestination.scala 41:28]
      jValid <= UInt<1>("h0") @[SourceDestination.scala 49:12]
      node _T_16 = bits(i, 1, 0)
      node _T_17 = bits(j, 1, 0)
      node _T_18 = neq(io.Stationary_matrix[_T_16][_T_17], UInt<1>("h0")) @[SourceDestination.scala 53:38]
      when _T_18 : @[SourceDestination.scala 53:47]
        node _T_19 = lt(counter1, UInt<3>("h5")) @[SourceDestination.scala 54:22]
        when _T_19 : @[SourceDestination.scala 54:48]
          node _T_20 = bits(i, 1, 0)
          node _T_21 = bits(j, 1, 0)
          counterRegs1[_T_20][_T_21] <= counter1 @[SourceDestination.scala 55:28]
          node _T_22 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 56:20]
          node _T_23 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 56:54]
          node _T_24 = and(_T_22, _T_23) @[SourceDestination.scala 56:48]
          node _T_25 = not(_T_24) @[SourceDestination.scala 56:15]
          when _T_25 : @[SourceDestination.scala 56:83]
            node _counter1_T = add(counter1, UInt<1>("h1")) @[SourceDestination.scala 57:32]
            node _counter1_T_1 = tail(_counter1_T, 1) @[SourceDestination.scala 57:32]
            counter1 <= _counter1_T_1 @[SourceDestination.scala 57:20]
        else :
          node _T_26 = bits(i, 1, 0)
          node _T_27 = bits(j, 1, 0)
          counterRegs1[_T_26][_T_27] <= UInt<1>("h1") @[SourceDestination.scala 60:28]
          counter1 <= UInt<2>("h2") @[SourceDestination.scala 61:18]
      else :
        node _T_28 = bits(i, 1, 0)
        node _T_29 = bits(j, 1, 0)
        counterRegs1[_T_28][_T_29] <= UInt<1>("h0") @[SourceDestination.scala 64:26]
      node _T_30 = bits(k, 1, 0)
      node _T_31 = neq(io.Streaming_matrix[_T_30], UInt<1>("h0")) @[SourceDestination.scala 67:34]
      when _T_31 : @[SourceDestination.scala 67:43]
        node _T_32 = bits(k, 1, 0)
        counterRegs2[_T_32] <= counter2 @[SourceDestination.scala 68:23]
        node _counter2_T = add(counter2, UInt<1>("h1")) @[SourceDestination.scala 69:28]
        node _counter2_T_1 = tail(_counter2_T, 1) @[SourceDestination.scala 69:28]
        counter2 <= _counter2_T_1 @[SourceDestination.scala 69:16]
      node _valid1_T = eq(j, UInt<2>("h3")) @[SourceDestination.scala 71:23]
      node _valid1_T_1 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 71:57]
      node _valid1_T_2 = and(_valid1_T, _valid1_T_1) @[SourceDestination.scala 71:51]
      node _valid1_T_3 = eq(_valid1_T_2, reg_i) @[SourceDestination.scala 71:86]
      node _valid1_T_4 = mux(_valid1_T_3, UInt<1>("h1"), UInt<1>("h0")) @[SourceDestination.scala 71:18]
      valid1 <= _valid1_T_4 @[SourceDestination.scala 71:12]
      node _T_33 = eq(k, UInt<2>("h3")) @[SourceDestination.scala 73:12]
      when _T_33 : @[SourceDestination.scala 73:37]
        k <= k @[SourceDestination.scala 74:9]
        counter2 <= counter2 @[SourceDestination.scala 75:16]
      else :
        node _T_34 = geq(k, UInt<1>("h0")) @[SourceDestination.scala 76:19]
        when _T_34 : @[SourceDestination.scala 76:26]
          node _k_T = add(k, UInt<1>("h1")) @[SourceDestination.scala 77:16]
          node _k_T_1 = tail(_k_T, 1) @[SourceDestination.scala 77:16]
          k <= _k_T_1 @[SourceDestination.scala 77:11]
      node _T_35 = eq(jValid, UInt<1>("h0")) @[SourceDestination.scala 79:18]
      when _T_35 : @[SourceDestination.scala 79:26]
        node _T_36 = lt(j, UInt<2>("h3")) @[SourceDestination.scala 80:14]
        when _T_36 : @[SourceDestination.scala 80:40]
          node _j_T = add(j, UInt<1>("h1")) @[SourceDestination.scala 81:16]
          node _j_T_1 = tail(_j_T, 1) @[SourceDestination.scala 81:16]
          j <= _j_T_1 @[SourceDestination.scala 81:11]
        else :
          node _T_37 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 82:21]
          node _T_38 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 82:55]
          node _T_39 = and(_T_37, _T_38) @[SourceDestination.scala 82:49]
          when _T_39 : @[SourceDestination.scala 82:83]
            jValid <= UInt<1>("h1") @[SourceDestination.scala 83:16]
          else :
            j <= UInt<1>("h0") @[SourceDestination.scala 85:11]
            node _T_40 = lt(i, UInt<2>("h3")) @[SourceDestination.scala 86:16]
            when _T_40 : @[SourceDestination.scala 86:42]
              node _i_T = add(i, UInt<1>("h1")) @[SourceDestination.scala 87:18]
              node _i_T_1 = tail(_i_T, 1) @[SourceDestination.scala 87:18]
              i <= _i_T_1 @[SourceDestination.scala 87:13]
      else :
        node _T_41 = eq(jValid, UInt<1>("h1")) @[SourceDestination.scala 90:25]
        node _T_42 = eq(matricesAreEqual, UInt<1>("h0")) @[SourceDestination.scala 90:55]
        node _T_43 = and(_T_41, _T_42) @[SourceDestination.scala 90:34]
        when _T_43 : @[SourceDestination.scala 90:64]
          i <= UInt<1>("h0") @[SourceDestination.scala 91:9]
          j <= UInt<1>("h0") @[SourceDestination.scala 92:9]
          k <= UInt<1>("h0") @[SourceDestination.scala 93:9]
          counter1 <= UInt<1>("h1") @[SourceDestination.scala 94:16]
          counter2 <= UInt<1>("h1") @[SourceDestination.scala 95:16]
          counterRegs1[0][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[0][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[0] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[1][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[1][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[1] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[2][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[2][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[2] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
          counterRegs1[3][0] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][1] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][2] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs1[3][3] <= UInt<1>("h0") @[SourceDestination.scala 98:30]
          counterRegs2[3] <= UInt<1>("h0") @[SourceDestination.scala 100:25]
      node _io_valid_T = eq(i, UInt<2>("h3")) @[SourceDestination.scala 104:19]
      node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 104:34]
      node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[SourceDestination.scala 104:28]
      io.valid <= _io_valid_T_2 @[SourceDestination.scala 104:14]
      node _T_44 = eq(j, UInt<2>("h3")) @[SourceDestination.scala 106:14]
      node _T_45 = eq(i, UInt<2>("h3")) @[SourceDestination.scala 106:48]
      node _T_46 = and(_T_44, _T_45) @[SourceDestination.scala 106:42]
      when _T_46 : @[SourceDestination.scala 106:76]
        io.counterMatrix1.valid <= UInt<1>("h1") @[SourceDestination.scala 107:31]
        io.counterMatrix2.valid <= UInt<1>("h1") @[SourceDestination.scala 108:31]
      else :
        io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 110:31]
        io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 111:31]
      io.counterMatrix1.bits <= counterRegs1 @[SourceDestination.scala 114:28]
      io.counterMatrix2.bits <= counterRegs2 @[SourceDestination.scala 115:28]
    else :
      wire _WIRE : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_1 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_1[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_1[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_2 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_2[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_2[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_3 : UInt<32>[4] @[SourceDestination.scala 118:69]
      _WIRE_3[0] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[1] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[2] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      _WIRE_3[3] <= UInt<32>("h0") @[SourceDestination.scala 118:69]
      wire _WIRE_4 : UInt<32>[4][4] @[SourceDestination.scala 118:36]
      _WIRE_4[0] <= _WIRE @[SourceDestination.scala 118:36]
      _WIRE_4[1] <= _WIRE_1 @[SourceDestination.scala 118:36]
      _WIRE_4[2] <= _WIRE_2 @[SourceDestination.scala 118:36]
      _WIRE_4[3] <= _WIRE_3 @[SourceDestination.scala 118:36]
      io.counterMatrix1.bits <= _WIRE_4 @[SourceDestination.scala 118:26]
      wire _WIRE_5 : UInt<32>[4] @[SourceDestination.scala 119:36]
      _WIRE_5[0] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[1] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[2] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      _WIRE_5[3] <= UInt<32>("h0") @[SourceDestination.scala 119:36]
      io.counterMatrix2.bits <= _WIRE_5 @[SourceDestination.scala 119:26]
      io.counterMatrix1.valid <= UInt<1>("h0") @[SourceDestination.scala 120:27]
      io.counterMatrix2.valid <= UInt<1>("h0") @[SourceDestination.scala 121:27]
      io.valid <= UInt<1>("h0") @[SourceDestination.scala 122:12]

  module abc2_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip IDex : UInt<32>, flip JDex : UInt<32>, flip valid : UInt<1>, flip mat : UInt<32>[4][4], OutMat : UInt<32>[4][4], Ovalid : UInt<1>, ProcessValid : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_1 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_2 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_3 : UInt<32>[4] @[singleLoop.scala 19:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[singleLoop.scala 19:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[singleLoop.scala 19:28]
    _b_WIRE_4[0] <= _b_WIRE @[singleLoop.scala 19:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[singleLoop.scala 19:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[singleLoop.scala 19:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[singleLoop.scala 19:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[singleLoop.scala 19:20]
    io.OutMat <= b @[singleLoop.scala 20:15]
    reg j : UInt<32>, clock with :
      reset => (UInt<1>("h0"), j) @[singleLoop.scala 21:16]
    j <= io.JDex @[singleLoop.scala 22:7]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[singleLoop.scala 23:20]
    node _T = neq(a, UInt<1>("h0")) @[singleLoop.scala 24:25]
    node _T_1 = and(io.valid, _T) @[singleLoop.scala 24:19]
    when _T_1 : @[singleLoop.scala 24:34]
      node _T_2 = bits(io.IDex, 1, 0)
      node _T_3 = bits(j, 1, 0)
      node _b_T = bits(io.IDex, 1, 0)
      node _b_T_1 = bits(j, 1, 0)
      b[_T_2][_T_3] <= io.mat[_b_T][_b_T_1] @[singleLoop.scala 25:19]
    node _T_4 = eq(j, UInt<2>("h3")) @[singleLoop.scala 26:13]
    when _T_4 : @[singleLoop.scala 26:21]
      node _io_Ovalid_T = bits(io.IDex, 1, 0)
      node _io_Ovalid_T_1 = eq(io.mat[_io_Ovalid_T][3], UInt<3>("h4")) @[singleLoop.scala 27:45]
      reg io_Ovalid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), io_Ovalid_REG) @[singleLoop.scala 27:25]
      io_Ovalid_REG <= _io_Ovalid_T_1 @[singleLoop.scala 27:25]
      io.Ovalid <= io_Ovalid_REG @[singleLoop.scala 27:15]
    else :
      io.Ovalid <= UInt<1>("h0") @[singleLoop.scala 29:19]
    node _io_ProcessValid_T = eq(j, UInt<2>("h3")) @[singleLoop.scala 31:35]
    wire _io_ProcessValid_WIRE : UInt<1>
    _io_ProcessValid_WIRE <= _io_ProcessValid_T
    io.ProcessValid <= _io_ProcessValid_WIRE @[singleLoop.scala 31:21]
    when io.valid : @[singleLoop.scala 45:20]
      node _a_T = add(a, UInt<1>("h1")) @[singleLoop.scala 46:12]
      node _a_T_1 = tail(_a_T, 1) @[singleLoop.scala 46:12]
      a <= _a_T_1 @[singleLoop.scala 46:7]
    node _T_5 = neq(a, UInt<1>("h0")) @[singleLoop.scala 48:26]
    node _T_6 = and(io.valid, _T_5) @[singleLoop.scala 48:20]
    node _T_7 = lt(j, UInt<2>("h3")) @[singleLoop.scala 48:41]
    node _T_8 = and(_T_6, _T_7) @[singleLoop.scala 48:35]
    when _T_8 : @[singleLoop.scala 48:65]
      node _j_T = add(j, UInt<1>("h1")) @[singleLoop.scala 49:16]
      node _j_T_1 = tail(_j_T, 1) @[singleLoop.scala 49:16]
      j <= _j_T_1 @[singleLoop.scala 49:11]
    else :
      node _T_9 = eq(j, UInt<2>("h3")) @[singleLoop.scala 50:18]
      when _T_9 : @[singleLoop.scala 50:43]
        j <= j @[singleLoop.scala 51:11]

  module abc3_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip PreMat : UInt<32>[4][4], flip IDex : UInt<32>, flip JDex : UInt<32>, flip mat : UInt<32>[4][4], flip i_valid : UInt<1>, valid : UInt<1>, Omat : UInt<32>[4][4], flip merge : UInt<1>}

    wire _b_WIRE : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_1 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_1[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_2 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_2[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_3 : UInt<32>[4] @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[0] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[1] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[2] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    _b_WIRE_3[3] <= UInt<32>("h0") @[MergeDIstribution.scala 18:61]
    wire _b_WIRE_4 : UInt<32>[4][4] @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[0] <= _b_WIRE @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[1] <= _b_WIRE_1 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[2] <= _b_WIRE_2 @[MergeDIstribution.scala 18:28]
    _b_WIRE_4[3] <= _b_WIRE_3 @[MergeDIstribution.scala 18:28]
    reg b : UInt<32>[4][4], clock with :
      reset => (reset, _b_WIRE_4) @[MergeDIstribution.scala 18:20]
    io.Omat <= b @[MergeDIstribution.scala 19:13]
    reg check : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 20:24]
    wire counter : UInt<1>
    counter <= UInt<1>("h0")
    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 22:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 23:20]
    node _io_valid_T = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 24:20]
    node _io_valid_T_1 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 24:35]
    node _io_valid_T_2 = and(_io_valid_T, _io_valid_T_1) @[MergeDIstribution.scala 24:29]
    io.valid <= _io_valid_T_2 @[MergeDIstribution.scala 24:14]
    reg a : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 25:20]
    reg k : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 26:20]
    reg l : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 27:20]
    reg delay : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MergeDIstribution.scala 29:24]
    node _T = leq(delay, UInt<2>("h3")) @[MergeDIstribution.scala 31:17]
    node _T_1 = and(_T, io.merge) @[MergeDIstribution.scala 31:41]
    when _T_1 : @[MergeDIstribution.scala 31:53]
      node _delay_T = add(delay, UInt<1>("h1")) @[MergeDIstribution.scala 32:24]
      node _delay_T_1 = tail(_delay_T, 1) @[MergeDIstribution.scala 32:24]
      delay <= _delay_T_1 @[MergeDIstribution.scala 32:15]
    node _T_2 = eq(delay, UInt<3>("h4")) @[MergeDIstribution.scala 41:29]
    node _T_3 = and(io.merge, _T_2) @[MergeDIstribution.scala 41:19]
    when _T_3 : @[MergeDIstribution.scala 41:53]
      node _T_4 = lt(k, io.IDex) @[MergeDIstribution.scala 43:14]
      node _T_5 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 43:30]
      node _T_6 = and(_T_4, _T_5) @[MergeDIstribution.scala 43:24]
      when _T_6 : @[MergeDIstribution.scala 43:56]
        node _k_T = add(k, UInt<1>("h1")) @[MergeDIstribution.scala 44:16]
        node _k_T_1 = tail(_k_T, 1) @[MergeDIstribution.scala 44:16]
        k <= _k_T_1 @[MergeDIstribution.scala 44:11]
        l <= UInt<1>("h0") @[MergeDIstribution.scala 45:11]
      else :
        node _T_7 = leq(k, io.IDex) @[MergeDIstribution.scala 46:20]
        node _T_8 = lt(l, UInt<2>("h3")) @[MergeDIstribution.scala 46:37]
        node _T_9 = and(_T_7, _T_8) @[MergeDIstribution.scala 46:31]
        when _T_9 : @[MergeDIstribution.scala 46:61]
          node _l_T = add(l, UInt<1>("h1")) @[MergeDIstribution.scala 47:16]
          node _l_T_1 = tail(_l_T, 1) @[MergeDIstribution.scala 47:16]
          l <= _l_T_1 @[MergeDIstribution.scala 47:11]
        else :
          node _T_10 = eq(k, io.IDex) @[MergeDIstribution.scala 48:18]
          node _T_11 = eq(l, UInt<2>("h3")) @[MergeDIstribution.scala 48:36]
          node _T_12 = and(_T_10, _T_11) @[MergeDIstribution.scala 48:30]
          when _T_12 : @[MergeDIstribution.scala 48:62]
            l <= l @[MergeDIstribution.scala 49:11]
      node _T_13 = bits(k, 1, 0)
      node _T_14 = bits(l, 1, 0)
      node _b_T = bits(k, 1, 0)
      node _b_T_1 = bits(l, 1, 0)
      b[_T_13][_T_14] <= io.PreMat[_b_T][_b_T_1] @[MergeDIstribution.scala 52:13]
    node _T_15 = eq(i, UInt<1>("h0")) @[MergeDIstribution.scala 54:28]
    node _T_16 = and(io.i_valid, _T_15) @[MergeDIstribution.scala 54:22]
    node _T_17 = eq(j, UInt<1>("h0")) @[MergeDIstribution.scala 54:44]
    node _T_18 = and(_T_16, _T_17) @[MergeDIstribution.scala 54:37]
    when _T_18 : @[MergeDIstribution.scala 54:53]
      node _i_T = add(io.IDex, UInt<1>("h1")) @[MergeDIstribution.scala 55:22]
      node _i_T_1 = tail(_i_T, 1) @[MergeDIstribution.scala 55:22]
      i <= _i_T_1 @[MergeDIstribution.scala 55:11]
      j <= UInt<1>("h0") @[MergeDIstribution.scala 56:11]
      node _check_T = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 57:24]
      node _check_T_1 = tail(_check_T, 1) @[MergeDIstribution.scala 57:24]
      check <= _check_T_1 @[MergeDIstribution.scala 57:15]
    node _T_19 = geq(check, UInt<1>("h1")) @[MergeDIstribution.scala 60:17]
    when _T_19 : @[MergeDIstribution.scala 60:24]
      counter <= UInt<1>("h1") @[MergeDIstribution.scala 61:17]
      node _check_T_2 = add(check, UInt<1>("h1")) @[MergeDIstribution.scala 62:24]
      node _check_T_3 = tail(_check_T_2, 1) @[MergeDIstribution.scala 62:24]
      check <= _check_T_3 @[MergeDIstribution.scala 62:15]
    when io.merge : @[MergeDIstribution.scala 67:19]
      node _T_20 = bits(i, 1, 0)
      node _T_21 = bits(j, 1, 0)
      node _b_T_2 = bits(i, 1, 0)
      node _b_T_3 = bits(j, 1, 0)
      b[_T_20][_T_21] <= io.mat[_b_T_2][_b_T_3] @[MergeDIstribution.scala 68:13]
    when counter : @[MergeDIstribution.scala 97:14]
      node _T_22 = bits(i, 1, 0)
      node _T_23 = bits(j, 1, 0)
      node _T_24 = eq(io.mat[_T_22][_T_23], UInt<3>("h4")) @[MergeDIstribution.scala 100:23]
      when _T_24 : @[MergeDIstribution.scala 100:44]
        i <= i @[MergeDIstribution.scala 101:11]
        j <= j @[MergeDIstribution.scala 102:11]
        io.valid <= UInt<1>("h1") @[MergeDIstribution.scala 103:18]
      else :
        node _T_25 = lt(i, UInt<2>("h3")) @[MergeDIstribution.scala 104:20]
        node _T_26 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 104:49]
        node _T_27 = and(_T_25, _T_26) @[MergeDIstribution.scala 104:43]
        when _T_27 : @[MergeDIstribution.scala 104:75]
          node _i_T_2 = add(i, UInt<1>("h1")) @[MergeDIstribution.scala 105:16]
          node _i_T_3 = tail(_i_T_2, 1) @[MergeDIstribution.scala 105:16]
          i <= _i_T_3 @[MergeDIstribution.scala 105:11]
          j <= UInt<1>("h0") @[MergeDIstribution.scala 106:11]
        else :
          node _T_28 = leq(i, UInt<2>("h3")) @[MergeDIstribution.scala 107:20]
          node _T_29 = lt(j, UInt<2>("h3")) @[MergeDIstribution.scala 107:50]
          node _T_30 = and(_T_28, _T_29) @[MergeDIstribution.scala 107:44]
          when _T_30 : @[MergeDIstribution.scala 107:74]
            node _j_T = add(j, UInt<1>("h1")) @[MergeDIstribution.scala 108:16]
            node _j_T_1 = tail(_j_T, 1) @[MergeDIstribution.scala 108:16]
            j <= _j_T_1 @[MergeDIstribution.scala 108:11]
          else :
            node _T_31 = eq(i, UInt<2>("h3")) @[MergeDIstribution.scala 109:18]
            node _T_32 = eq(j, UInt<2>("h3")) @[MergeDIstribution.scala 109:49]
            node _T_33 = and(_T_31, _T_32) @[MergeDIstribution.scala 109:43]
            when _T_33 : @[MergeDIstribution.scala 109:75]
              j <= j @[MergeDIstribution.scala 110:11]

  module Distribution_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip matrix : UInt<32>[4][4], flip s : UInt<32>, out : UInt<32>[4][4], ProcessValid : UInt<1>, flip valid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    reg i : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 19:20]
    reg j : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 20:20]
    reg count : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 21:24]
    wire _Idex_WIRE : UInt<32>[4] @[DIstribution.scala 22:31]
    _Idex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    _Idex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 22:31]
    reg Idex : UInt<32>[4], clock with :
      reset => (reset, _Idex_WIRE) @[DIstribution.scala 22:23]
    wire _Jdex_WIRE : UInt<32>[4] @[DIstribution.scala 23:31]
    _Jdex_WIRE[0] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[1] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[2] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    _Jdex_WIRE[3] <= UInt<32>("h0") @[DIstribution.scala 23:31]
    reg Jdex : UInt<32>[4], clock with :
      reset => (reset, _Jdex_WIRE) @[DIstribution.scala 23:23]
    wire _mat_WIRE : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_1 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_2 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_3 : UInt<1>[4] @[DIstribution.scala 24:63]
    _mat_WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    _mat_WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 24:63]
    wire _mat_WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 24:30]
    _mat_WIRE_4[0] <= _mat_WIRE @[DIstribution.scala 24:30]
    _mat_WIRE_4[1] <= _mat_WIRE_1 @[DIstribution.scala 24:30]
    _mat_WIRE_4[2] <= _mat_WIRE_2 @[DIstribution.scala 24:30]
    _mat_WIRE_4[3] <= _mat_WIRE_3 @[DIstribution.scala 24:30]
    reg mat : UInt<1>[4][4], clock with :
      reset => (reset, _mat_WIRE_4) @[DIstribution.scala 24:22]
    reg iterationNo : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DIstribution.scala 25:30]
    when io.valid : @[DIstribution.scala 27:21]
      node _io_validIteration_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 30:29]
      node _io_validIteration_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 30:62]
      node _io_validIteration_T_2 = and(_io_validIteration_T, _io_validIteration_T_1) @[DIstribution.scala 30:56]
      io.validIteration <= _io_validIteration_T_2 @[DIstribution.scala 30:23]
      io.iteration <= iterationNo @[DIstribution.scala 31:18]
      node _T = bits(i, 1, 0)
      node _T_1 = bits(j, 1, 0)
      node _T_2 = eq(io.matrix[_T][_T_1], UInt<1>("h1")) @[DIstribution.scala 34:27]
      when _T_2 : @[DIstribution.scala 34:35]
        node _iterationNo_T = add(iterationNo, UInt<1>("h1")) @[DIstribution.scala 35:34]
        node _iterationNo_T_1 = tail(_iterationNo_T, 1) @[DIstribution.scala 35:34]
        iterationNo <= _iterationNo_T_1 @[DIstribution.scala 35:19]
      mat <= io.matrix @[DIstribution.scala 38:9]
      node _T_3 = bits(i, 1, 0)
      node _T_4 = bits(j, 1, 0)
      node _T_5 = eq(io.matrix[_T_3][_T_4], UInt<1>("h1")) @[DIstribution.scala 47:28]
      when _T_5 : @[DIstribution.scala 47:38]
        node _count_T = add(count, UInt<1>("h1")) @[DIstribution.scala 48:24]
        node _count_T_1 = tail(_count_T, 1) @[DIstribution.scala 48:24]
        count <= _count_T_1 @[DIstribution.scala 48:15]
        node _T_6 = bits(count, 1, 0)
        Idex[_T_6] <= i @[DIstribution.scala 49:21]
        node _T_7 = bits(count, 1, 0)
        Jdex[_T_7] <= j @[DIstribution.scala 50:21]
      else :
        node _T_8 = bits(i, 1, 0)
        node _T_9 = bits(j, 1, 0)
        node _T_10 = eq(io.matrix[_T_8][_T_9], UInt<1>("h1")) @[DIstribution.scala 51:33]
        node _T_11 = eq(i, UInt<2>("h3")) @[DIstribution.scala 51:48]
        node _T_12 = and(_T_10, _T_11) @[DIstribution.scala 51:42]
        node _T_13 = eq(j, UInt<2>("h3")) @[DIstribution.scala 51:80]
        node _T_14 = and(_T_12, _T_13) @[DIstribution.scala 51:74]
        when _T_14 : @[DIstribution.scala 51:106]
          node _T_15 = bits(count, 1, 0)
          Idex[_T_15] <= i @[DIstribution.scala 52:21]
          node _T_16 = bits(count, 1, 0)
          Jdex[_T_16] <= j @[DIstribution.scala 53:21]
      inst part2 of abc2_3 @[DIstribution.scala 55:19]
      part2.clock <= clock
      part2.reset <= reset
      part2.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 56:14]
      part2.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 56:14]
      part2.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 56:14]
      part2.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 56:14]
      part2.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 56:14]
      part2.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 56:14]
      part2.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 56:14]
      part2.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 56:14]
      part2.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 56:14]
      part2.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 56:14]
      part2.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 56:14]
      part2.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 56:14]
      part2.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 56:14]
      part2.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 56:14]
      part2.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 56:14]
      part2.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 56:14]
      node _c_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 57:23]
      node _c_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 57:54]
      node _c_T_2 = and(_c_T, _c_T_1) @[DIstribution.scala 57:48]
      reg c : UInt<1>, clock with :
        reset => (UInt<1>("h0"), c) @[DIstribution.scala 57:20]
      c <= _c_T_2 @[DIstribution.scala 57:20]
      part2.io.valid <= c @[DIstribution.scala 58:20]
      when c : @[DIstribution.scala 59:13]
        node _part2_io_IDex_T = bits(io.s, 1, 0)
        part2.io.IDex <= Idex[_part2_io_IDex_T] @[DIstribution.scala 60:19]
        node _part2_io_JDex_T = bits(io.s, 1, 0)
        part2.io.JDex <= Jdex[_part2_io_JDex_T] @[DIstribution.scala 61:19]
      else :
        part2.io.IDex <= UInt<1>("h0") @[DIstribution.scala 63:19]
        part2.io.JDex <= UInt<1>("h0") @[DIstribution.scala 64:19]
      inst part3 of abc3_3 @[DIstribution.scala 69:23]
      part3.clock <= clock
      part3.reset <= reset
      wire check : UInt<1>
      check <= UInt<1>("h0")
      when part2.io.Ovalid : @[DIstribution.scala 75:26]
        check <= UInt<1>("h0") @[DIstribution.scala 76:15]
      else :
        check <= UInt<1>("h1") @[DIstribution.scala 78:15]
      node _e_T = eq(i, UInt<2>("h3")) @[DIstribution.scala 80:17]
      node _e_T_1 = eq(j, UInt<2>("h3")) @[DIstribution.scala 80:49]
      node _e_T_2 = and(_e_T, _e_T_1) @[DIstribution.scala 80:43]
      node _e_T_3 = sub(count, UInt<1>("h1")) @[DIstribution.scala 80:85]
      node _e_T_4 = tail(_e_T_3, 1) @[DIstribution.scala 80:85]
      node _e_T_5 = lt(_e_T_4, io.s) @[DIstribution.scala 80:91]
      node e = and(_e_T_2, _e_T_5) @[DIstribution.scala 80:75]
      node _T_17 = and(part2.io.ProcessValid, check) @[DIstribution.scala 82:33]
      when _T_17 : @[DIstribution.scala 82:42]
        reg part3_io_merge_REG : UInt<1>, clock with :
          reset => (UInt<1>("h0"), part3_io_merge_REG) @[DIstribution.scala 83:30]
        part3_io_merge_REG <= c @[DIstribution.scala 83:30]
        part3.io.merge <= part3_io_merge_REG @[DIstribution.scala 83:20]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 84:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 84:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 84:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 84:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 84:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 84:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 84:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 84:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 84:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 84:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 84:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 84:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 84:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 84:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 84:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 84:18]
        part3.io.i_valid <= part2.io.ProcessValid @[DIstribution.scala 85:22]
        part3.io.PreMat[0][0] <= part2.io.OutMat[0][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][1] <= part2.io.OutMat[0][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][2] <= part2.io.OutMat[0][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[0][3] <= part2.io.OutMat[0][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][0] <= part2.io.OutMat[1][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][1] <= part2.io.OutMat[1][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][2] <= part2.io.OutMat[1][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[1][3] <= part2.io.OutMat[1][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][0] <= part2.io.OutMat[2][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][1] <= part2.io.OutMat[2][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][2] <= part2.io.OutMat[2][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[2][3] <= part2.io.OutMat[2][3] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][0] <= part2.io.OutMat[3][0] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][1] <= part2.io.OutMat[3][1] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][2] <= part2.io.OutMat[3][2] @[DIstribution.scala 86:21]
        part3.io.PreMat[3][3] <= part2.io.OutMat[3][3] @[DIstribution.scala 86:21]
        part3.io.mat[0][0] <= io.matrix[0][0] @[DIstribution.scala 87:18]
        part3.io.mat[0][1] <= io.matrix[0][1] @[DIstribution.scala 87:18]
        part3.io.mat[0][2] <= io.matrix[0][2] @[DIstribution.scala 87:18]
        part3.io.mat[0][3] <= io.matrix[0][3] @[DIstribution.scala 87:18]
        part3.io.mat[1][0] <= io.matrix[1][0] @[DIstribution.scala 87:18]
        part3.io.mat[1][1] <= io.matrix[1][1] @[DIstribution.scala 87:18]
        part3.io.mat[1][2] <= io.matrix[1][2] @[DIstribution.scala 87:18]
        part3.io.mat[1][3] <= io.matrix[1][3] @[DIstribution.scala 87:18]
        part3.io.mat[2][0] <= io.matrix[2][0] @[DIstribution.scala 87:18]
        part3.io.mat[2][1] <= io.matrix[2][1] @[DIstribution.scala 87:18]
        part3.io.mat[2][2] <= io.matrix[2][2] @[DIstribution.scala 87:18]
        part3.io.mat[2][3] <= io.matrix[2][3] @[DIstribution.scala 87:18]
        part3.io.mat[3][0] <= io.matrix[3][0] @[DIstribution.scala 87:18]
        part3.io.mat[3][1] <= io.matrix[3][1] @[DIstribution.scala 87:18]
        part3.io.mat[3][2] <= io.matrix[3][2] @[DIstribution.scala 87:18]
        part3.io.mat[3][3] <= io.matrix[3][3] @[DIstribution.scala 87:18]
        node _part3_io_IDex_T = bits(io.s, 1, 0)
        part3.io.IDex <= Idex[_part3_io_IDex_T] @[DIstribution.scala 88:19]
        node _part3_io_JDex_T = bits(io.s, 1, 0)
        part3.io.JDex <= Jdex[_part3_io_JDex_T] @[DIstribution.scala 89:19]
        node _T_18 = eq(i, UInt<2>("h3")) @[DIstribution.scala 90:14]
        node _T_19 = eq(j, UInt<2>("h3")) @[DIstribution.scala 90:46]
        node _T_20 = and(_T_18, _T_19) @[DIstribution.scala 90:40]
        node _T_21 = sub(count, UInt<1>("h1")) @[DIstribution.scala 90:82]
        node _T_22 = tail(_T_21, 1) @[DIstribution.scala 90:82]
        node _T_23 = lt(_T_22, io.s) @[DIstribution.scala 90:88]
        node _T_24 = and(_T_20, _T_23) @[DIstribution.scala 90:72]
        when _T_24 : @[DIstribution.scala 90:96]
          wire _WIRE : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_1 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_1[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_1[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_2 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_2[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_2[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_3 : UInt<1>[4] @[DIstribution.scala 91:68]
          _WIRE_3[0] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[1] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[2] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          _WIRE_3[3] <= UInt<1>("h0") @[DIstribution.scala 91:68]
          wire _WIRE_4 : UInt<1>[4][4] @[DIstribution.scala 91:35]
          _WIRE_4[0] <= _WIRE @[DIstribution.scala 91:35]
          _WIRE_4[1] <= _WIRE_1 @[DIstribution.scala 91:35]
          _WIRE_4[2] <= _WIRE_2 @[DIstribution.scala 91:35]
          _WIRE_4[3] <= _WIRE_3 @[DIstribution.scala 91:35]
          wire _WIRE_5 : UInt<1>[4][4]
          _WIRE_5 <= _WIRE_4
          io.out <= _WIRE_5 @[DIstribution.scala 91:16]
        else :
          io.out <= part3.io.Omat @[DIstribution.scala 93:12]
        io.ProcessValid <= part3.io.valid @[DIstribution.scala 94:21]
      else :
        part3.io.merge <= UInt<1>("h0") @[DIstribution.scala 96:24]
        wire _WIRE_6 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_6[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_6[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_7 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_7[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_7[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_8 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_8[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_8[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_9 : UInt<32>[4] @[DIstribution.scala 97:66]
        _WIRE_9[0] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[1] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[2] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        _WIRE_9[3] <= UInt<32>("h0") @[DIstribution.scala 97:66]
        wire _WIRE_10 : UInt<32>[4][4] @[DIstribution.scala 97:31]
        _WIRE_10[0] <= _WIRE_6 @[DIstribution.scala 97:31]
        _WIRE_10[1] <= _WIRE_7 @[DIstribution.scala 97:31]
        _WIRE_10[2] <= _WIRE_8 @[DIstribution.scala 97:31]
        _WIRE_10[3] <= _WIRE_9 @[DIstribution.scala 97:31]
        part3.io.mat[0][0] <= _WIRE_10[0][0] @[DIstribution.scala 97:22]
        part3.io.mat[0][1] <= _WIRE_10[0][1] @[DIstribution.scala 97:22]
        part3.io.mat[0][2] <= _WIRE_10[0][2] @[DIstribution.scala 97:22]
        part3.io.mat[0][3] <= _WIRE_10[0][3] @[DIstribution.scala 97:22]
        part3.io.mat[1][0] <= _WIRE_10[1][0] @[DIstribution.scala 97:22]
        part3.io.mat[1][1] <= _WIRE_10[1][1] @[DIstribution.scala 97:22]
        part3.io.mat[1][2] <= _WIRE_10[1][2] @[DIstribution.scala 97:22]
        part3.io.mat[1][3] <= _WIRE_10[1][3] @[DIstribution.scala 97:22]
        part3.io.mat[2][0] <= _WIRE_10[2][0] @[DIstribution.scala 97:22]
        part3.io.mat[2][1] <= _WIRE_10[2][1] @[DIstribution.scala 97:22]
        part3.io.mat[2][2] <= _WIRE_10[2][2] @[DIstribution.scala 97:22]
        part3.io.mat[2][3] <= _WIRE_10[2][3] @[DIstribution.scala 97:22]
        part3.io.mat[3][0] <= _WIRE_10[3][0] @[DIstribution.scala 97:22]
        part3.io.mat[3][1] <= _WIRE_10[3][1] @[DIstribution.scala 97:22]
        part3.io.mat[3][2] <= _WIRE_10[3][2] @[DIstribution.scala 97:22]
        part3.io.mat[3][3] <= _WIRE_10[3][3] @[DIstribution.scala 97:22]
        part3.io.i_valid <= UInt<1>("h0") @[DIstribution.scala 98:26]
        wire _WIRE_11 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_11[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_11[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_12 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_12[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_12[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_13 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_13[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_13[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_14 : UInt<32>[4] @[DIstribution.scala 99:64]
        _WIRE_14[0] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[1] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[2] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        _WIRE_14[3] <= UInt<32>("h0") @[DIstribution.scala 99:64]
        wire _WIRE_15 : UInt<32>[4][4] @[DIstribution.scala 99:31]
        _WIRE_15[0] <= _WIRE_11 @[DIstribution.scala 99:31]
        _WIRE_15[1] <= _WIRE_12 @[DIstribution.scala 99:31]
        _WIRE_15[2] <= _WIRE_13 @[DIstribution.scala 99:31]
        _WIRE_15[3] <= _WIRE_14 @[DIstribution.scala 99:31]
        part3.io.PreMat[0][0] <= _WIRE_15[0][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][1] <= _WIRE_15[0][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][2] <= _WIRE_15[0][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[0][3] <= _WIRE_15[0][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][0] <= _WIRE_15[1][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][1] <= _WIRE_15[1][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][2] <= _WIRE_15[1][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[1][3] <= _WIRE_15[1][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][0] <= _WIRE_15[2][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][1] <= _WIRE_15[2][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][2] <= _WIRE_15[2][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[2][3] <= _WIRE_15[2][3] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][0] <= _WIRE_15[3][0] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][1] <= _WIRE_15[3][1] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][2] <= _WIRE_15[3][2] @[DIstribution.scala 99:21]
        part3.io.PreMat[3][3] <= _WIRE_15[3][3] @[DIstribution.scala 99:21]
        part3.io.IDex <= UInt<1>("h0") @[DIstribution.scala 100:19]
        part3.io.JDex <= UInt<1>("h0") @[DIstribution.scala 101:19]
        node _T_25 = eq(i, UInt<2>("h3")) @[DIstribution.scala 102:14]
        node _T_26 = eq(j, UInt<2>("h3")) @[DIstribution.scala 102:46]
        node _T_27 = and(_T_25, _T_26) @[DIstribution.scala 102:40]
        node _T_28 = sub(count, UInt<1>("h1")) @[DIstribution.scala 102:82]
        node _T_29 = tail(_T_28, 1) @[DIstribution.scala 102:82]
        node _T_30 = lt(_T_29, io.s) @[DIstribution.scala 102:88]
        node _T_31 = and(_T_27, _T_30) @[DIstribution.scala 102:72]
        when _T_31 : @[DIstribution.scala 102:96]
          wire _WIRE_16 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_16[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_16[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_17 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_17[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_17[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_18 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_18[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_18[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_19 : UInt<1>[4] @[DIstribution.scala 103:68]
          _WIRE_19[0] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[1] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[2] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          _WIRE_19[3] <= UInt<1>("h0") @[DIstribution.scala 103:68]
          wire _WIRE_20 : UInt<1>[4][4] @[DIstribution.scala 103:35]
          _WIRE_20[0] <= _WIRE_16 @[DIstribution.scala 103:35]
          _WIRE_20[1] <= _WIRE_17 @[DIstribution.scala 103:35]
          _WIRE_20[2] <= _WIRE_18 @[DIstribution.scala 103:35]
          _WIRE_20[3] <= _WIRE_19 @[DIstribution.scala 103:35]
          wire _WIRE_21 : UInt<1>[4][4]
          _WIRE_21 <= _WIRE_20
          io.out <= _WIRE_21 @[DIstribution.scala 103:16]
        else :
          io.out <= part2.io.OutMat @[DIstribution.scala 105:12]
        io.ProcessValid <= part2.io.Ovalid @[DIstribution.scala 106:21]
      node _T_32 = lt(i, UInt<2>("h3")) @[DIstribution.scala 113:14]
      node _T_33 = eq(j, UInt<2>("h3")) @[DIstribution.scala 113:43]
      node _T_34 = and(_T_32, _T_33) @[DIstribution.scala 113:37]
      when _T_34 : @[DIstribution.scala 113:69]
        node _i_T = add(i, UInt<1>("h1")) @[DIstribution.scala 114:16]
        node _i_T_1 = tail(_i_T, 1) @[DIstribution.scala 114:16]
        i <= _i_T_1 @[DIstribution.scala 114:11]
      node _ab_T = leq(i, UInt<2>("h3")) @[DIstribution.scala 117:18]
      node _ab_T_1 = lt(j, UInt<2>("h3")) @[DIstribution.scala 117:48]
      node ab = and(_ab_T, _ab_T_1) @[DIstribution.scala 117:42]
      node _T_35 = leq(i, UInt<2>("h3")) @[DIstribution.scala 119:14]
      node _T_36 = lt(j, UInt<2>("h3")) @[DIstribution.scala 119:44]
      node _T_37 = and(_T_35, _T_36) @[DIstribution.scala 119:38]
      when _T_37 : @[DIstribution.scala 119:68]
        node _j_T = add(j, UInt<1>("h1")) @[DIstribution.scala 120:16]
        node _j_T_1 = tail(_j_T, 1) @[DIstribution.scala 120:16]
        j <= _j_T_1 @[DIstribution.scala 120:11]
      else :
        node _T_38 = eq(i, UInt<2>("h3")) @[DIstribution.scala 121:18]
        node _T_39 = eq(j, UInt<2>("h3")) @[DIstribution.scala 121:49]
        node _T_40 = and(_T_38, _T_39) @[DIstribution.scala 121:43]
        when _T_40 : @[DIstribution.scala 121:75]
          j <= j @[DIstribution.scala 122:11]
        else :
          j <= UInt<1>("h0") @[DIstribution.scala 124:11]
    else :
      wire _WIRE_22 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_22[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_22[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_23 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_23[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_23[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_24 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_24[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_24[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_25 : UInt<1>[4] @[DIstribution.scala 131:68]
      _WIRE_25[0] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[1] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[2] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      _WIRE_25[3] <= UInt<1>("h0") @[DIstribution.scala 131:68]
      wire _WIRE_26 : UInt<1>[4][4] @[DIstribution.scala 131:35]
      _WIRE_26[0] <= _WIRE_22 @[DIstribution.scala 131:35]
      _WIRE_26[1] <= _WIRE_23 @[DIstribution.scala 131:35]
      _WIRE_26[2] <= _WIRE_24 @[DIstribution.scala 131:35]
      _WIRE_26[3] <= _WIRE_25 @[DIstribution.scala 131:35]
      wire _WIRE_27 : UInt<1>[4][4]
      _WIRE_27 <= _WIRE_26
      io.out <= _WIRE_27 @[DIstribution.scala 131:16]
      io.ProcessValid <= UInt<1>("h0") @[DIstribution.scala 132:25]
      io.iteration <= UInt<1>("h0") @[DIstribution.scala 133:22]
      io.validIteration <= UInt<1>("h0") @[DIstribution.scala 134:27]

  module PathFinder_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], PF_Valid : UInt<1>, flip NoDPE : UInt<32>, flip DataValid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}

    when io.DataValid : @[PathFinder.scala 20:20]
      wire _counterRegs1_WIRE : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_1 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_1[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_2 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_2[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_3 : UInt<16>[4] @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[0] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[1] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[2] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      _counterRegs1_WIRE_3[3] <= UInt<16>("h0") @[PathFinder.scala 21:70]
      wire _counterRegs1_WIRE_4 : UInt<16>[4][4] @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[0] <= _counterRegs1_WIRE @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[1] <= _counterRegs1_WIRE_1 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[2] <= _counterRegs1_WIRE_2 @[PathFinder.scala 21:37]
      _counterRegs1_WIRE_4[3] <= _counterRegs1_WIRE_3 @[PathFinder.scala 21:37]
      reg counterRegs1 : UInt<16>[4][4], clock with :
        reset => (reset, _counterRegs1_WIRE_4) @[PathFinder.scala 21:29]
      wire _counterRegs2_WIRE : UInt<16>[4] @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[0] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[1] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[2] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      _counterRegs2_WIRE[3] <= UInt<16>("h0") @[PathFinder.scala 22:37]
      reg counterRegs2 : UInt<16>[4], clock with :
        reset => (reset, _counterRegs2_WIRE) @[PathFinder.scala 22:29]
      reg delay : UInt<32>, clock with :
        reset => (reset, UInt<32>("h0")) @[PathFinder.scala 25:22]
      inst myMuxes of Muxes_3 @[PathFinder.scala 26:23]
      myMuxes.clock <= clock
      myMuxes.reset <= reset
      inst myCounter of SourceDestination_3 @[PathFinder.scala 32:25]
      myCounter.clock <= clock
      myCounter.reset <= reset
      reg myCounter_io_start_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), myCounter_io_start_REG) @[PathFinder.scala 33:32]
      myCounter_io_start_REG <= io.DataValid @[PathFinder.scala 33:32]
      myCounter.io.start <= myCounter_io_start_REG @[PathFinder.scala 33:22]
      myCounter.io.Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 34:34]
      myCounter.io.Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 34:34]
      myCounter.io.Streaming_matrix[0] <= io.Streaming_matrix[0] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[1] <= io.Streaming_matrix[1] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[2] <= io.Streaming_matrix[2] @[PathFinder.scala 35:33]
      myCounter.io.Streaming_matrix[3] <= io.Streaming_matrix[3] @[PathFinder.scala 35:33]
      inst Distribution of Distribution_3 @[PathFinder.scala 37:28]
      Distribution.clock <= clock
      Distribution.reset <= reset
      Distribution.io.valid <= myCounter.io.valid @[PathFinder.scala 39:25]
      Distribution.io.s <= io.NoDPE @[PathFinder.scala 40:21]
      io.iteration <= Distribution.io.iteration @[PathFinder.scala 41:16]
      io.validIteration <= Distribution.io.validIteration @[PathFinder.scala 42:21]
      Distribution.io.matrix[0][0] <= myCounter.io.counterMatrix1.bits[0][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][1] <= myCounter.io.counterMatrix1.bits[0][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][2] <= myCounter.io.counterMatrix1.bits[0][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[0][3] <= myCounter.io.counterMatrix1.bits[0][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][0] <= myCounter.io.counterMatrix1.bits[1][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][1] <= myCounter.io.counterMatrix1.bits[1][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][2] <= myCounter.io.counterMatrix1.bits[1][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[1][3] <= myCounter.io.counterMatrix1.bits[1][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][0] <= myCounter.io.counterMatrix1.bits[2][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][1] <= myCounter.io.counterMatrix1.bits[2][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][2] <= myCounter.io.counterMatrix1.bits[2][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[2][3] <= myCounter.io.counterMatrix1.bits[2][3] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][0] <= myCounter.io.counterMatrix1.bits[3][0] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][1] <= myCounter.io.counterMatrix1.bits[3][1] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][2] <= myCounter.io.counterMatrix1.bits[3][2] @[PathFinder.scala 43:26]
      Distribution.io.matrix[3][3] <= myCounter.io.counterMatrix1.bits[3][3] @[PathFinder.scala 43:26]
      when Distribution.io.ProcessValid : @[PathFinder.scala 52:40]
        myCounter.io.counterMatrix1.ready <= UInt<1>("h1") @[PathFinder.scala 53:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h1") @[PathFinder.scala 54:39]
        myMuxes.io.mat1[0][0] <= io.Stationary_matrix[0][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][1] <= io.Stationary_matrix[0][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][2] <= io.Stationary_matrix[0][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[0][3] <= io.Stationary_matrix[0][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][0] <= io.Stationary_matrix[1][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][1] <= io.Stationary_matrix[1][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][2] <= io.Stationary_matrix[1][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[1][3] <= io.Stationary_matrix[1][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][0] <= io.Stationary_matrix[2][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][1] <= io.Stationary_matrix[2][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][2] <= io.Stationary_matrix[2][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[2][3] <= io.Stationary_matrix[2][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][0] <= io.Stationary_matrix[3][0] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][1] <= io.Stationary_matrix[3][1] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][2] <= io.Stationary_matrix[3][2] @[PathFinder.scala 55:21]
        myMuxes.io.mat1[3][3] <= io.Stationary_matrix[3][3] @[PathFinder.scala 55:21]
        myMuxes.io.mat2[0] <= io.Streaming_matrix[0] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[1] <= io.Streaming_matrix[1] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[2] <= io.Streaming_matrix[2] @[PathFinder.scala 57:21]
        myMuxes.io.mat2[3] <= io.Streaming_matrix[3] @[PathFinder.scala 57:21]
        myMuxes.io.counterMatrix1 <= Distribution.io.out @[PathFinder.scala 58:31]
        myMuxes.io.counterMatrix2 <= myCounter.io.counterMatrix2.bits @[PathFinder.scala 59:31]
      else :
        myCounter.io.counterMatrix1.ready <= UInt<1>("h0") @[PathFinder.scala 62:39]
        myCounter.io.counterMatrix2.ready <= UInt<1>("h0") @[PathFinder.scala 64:39]
        myMuxes.io.mat1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 65:21]
        myMuxes.io.mat1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 65:21]
        myMuxes.io.mat2[0] <= counterRegs2[0] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[1] <= counterRegs2[1] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[2] <= counterRegs2[2] @[PathFinder.scala 66:21]
        myMuxes.io.mat2[3] <= counterRegs2[3] @[PathFinder.scala 66:21]
        myMuxes.io.counterMatrix1[0][0] <= counterRegs1[0][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][1] <= counterRegs1[0][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][2] <= counterRegs1[0][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[0][3] <= counterRegs1[0][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][0] <= counterRegs1[1][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][1] <= counterRegs1[1][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][2] <= counterRegs1[1][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[1][3] <= counterRegs1[1][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][0] <= counterRegs1[2][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][1] <= counterRegs1[2][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][2] <= counterRegs1[2][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[2][3] <= counterRegs1[2][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][0] <= counterRegs1[3][0] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][1] <= counterRegs1[3][1] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][2] <= counterRegs1[3][2] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix1[3][3] <= counterRegs1[3][3] @[PathFinder.scala 67:31]
        myMuxes.io.counterMatrix2[0] <= counterRegs2[0] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[1] <= counterRegs2[1] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[2] <= counterRegs2[2] @[PathFinder.scala 68:31]
        myMuxes.io.counterMatrix2[3] <= counterRegs2[3] @[PathFinder.scala 68:31]
      io.PF_Valid <= myMuxes.io.valid @[PathFinder.scala 74:15]
      io.i_mux_bus <= myMuxes.io.i_mux_bus @[PathFinder.scala 75:16]
      io.Source <= myMuxes.io.Source @[PathFinder.scala 76:13]
      io.destination <= myMuxes.io.destination @[PathFinder.scala 77:18]
    else :
      io.validIteration <= UInt<1>("h0") @[PathFinder.scala 79:21]
      io.iteration <= UInt<1>("h0") @[PathFinder.scala 80:16]
      io.PF_Valid <= UInt<1>("h0") @[PathFinder.scala 81:15]
      wire _WIRE : UInt<32>[16] @[PathFinder.scala 82:35]
      _WIRE[0] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[1] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[2] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[3] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[4] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[5] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[6] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[7] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[8] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[9] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[10] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[11] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[12] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[13] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[14] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      _WIRE[15] <= UInt<32>("h0") @[PathFinder.scala 82:35]
      wire _WIRE_1 : UInt<32>[16]
      _WIRE_1 <= _WIRE
      io.i_mux_bus <= _WIRE_1 @[PathFinder.scala 82:16]
      wire _WIRE_2 : UInt<32>[16] @[PathFinder.scala 83:32]
      _WIRE_2[0] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[1] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[2] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[3] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[4] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[5] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[6] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[7] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[8] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[9] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[10] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[11] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[12] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[13] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[14] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      _WIRE_2[15] <= UInt<32>("h0") @[PathFinder.scala 83:32]
      wire _WIRE_3 : UInt<32>[16]
      _WIRE_3 <= _WIRE_2
      io.Source <= _WIRE_3 @[PathFinder.scala 83:13]
      wire _WIRE_4 : UInt<32>[16] @[PathFinder.scala 84:37]
      _WIRE_4[0] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[1] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[2] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[3] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[4] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[5] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[6] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[7] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[8] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[9] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[10] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[11] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[12] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[13] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[14] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      _WIRE_4[15] <= UInt<32>("h0") @[PathFinder.scala 84:37]
      wire _WIRE_5 : UInt<32>[16]
      _WIRE_5 <= _WIRE_4
      io.destination <= _WIRE_5 @[PathFinder.scala 84:18]

  module FlexDPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip CalFDE : UInt<32>, flip i_vn : UInt<5>[4], flip i_stationary : UInt<1>, flip i_data_valid : UInt<1>, flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4][4]}

    reg used_FlexDPE : UInt<32>[2], clock with :
      reset => (UInt<1>("h0"), used_FlexDPE) @[FlexDPU.scala 16:27]
    node equalDistribution = div(io.CalFDE, UInt<2>("h2")) @[FlexDPU.scala 18:39]
    node remainingDistribution = rem(io.CalFDE, UInt<2>("h2")) @[FlexDPU.scala 19:43]
    wire equalArray : UInt<32>[2] @[FlexDPU.scala 20:29]
    equalArray[0] <= equalDistribution @[FlexDPU.scala 20:29]
    equalArray[1] <= equalDistribution @[FlexDPU.scala 20:29]
    node _used_FlexDPE_0_T = lt(UInt<1>("h0"), remainingDistribution) @[FlexDPU.scala 22:34]
    node _used_FlexDPE_0_T_1 = add(equalArray[0], UInt<1>("h1")) @[FlexDPU.scala 22:73]
    node _used_FlexDPE_0_T_2 = tail(_used_FlexDPE_0_T_1, 1) @[FlexDPU.scala 22:73]
    node _used_FlexDPE_0_T_3 = mux(_used_FlexDPE_0_T, _used_FlexDPE_0_T_2, equalArray[0]) @[FlexDPU.scala 22:29]
    used_FlexDPE[0] <= _used_FlexDPE_0_T_3 @[FlexDPU.scala 22:23]
    node _used_FlexDPE_1_T = lt(UInt<1>("h1"), remainingDistribution) @[FlexDPU.scala 22:34]
    node _used_FlexDPE_1_T_1 = add(equalArray[1], UInt<1>("h1")) @[FlexDPU.scala 22:73]
    node _used_FlexDPE_1_T_2 = tail(_used_FlexDPE_1_T_1, 1) @[FlexDPU.scala 22:73]
    node _used_FlexDPE_1_T_3 = mux(_used_FlexDPE_1_T, _used_FlexDPE_1_T_2, equalArray[1]) @[FlexDPU.scala 22:29]
    used_FlexDPE[1] <= _used_FlexDPE_1_T_3 @[FlexDPU.scala 22:23]
    node sumOfUsedFlexDPE = add(used_FlexDPE[0], used_FlexDPE[1]) @[FlexDPU.scala 24:50]
    wire _nonZeroValues_WIRE : UInt<32>[16] @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[0] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[1] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[2] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[3] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[4] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[5] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[6] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[7] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[8] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[9] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[10] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[11] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[12] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[13] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[14] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    _nonZeroValues_WIRE[15] <= UInt<32>("h0") @[FlexDPU.scala 28:40]
    reg nonZeroValues : UInt<32>[16], clock with :
      reset => (reset, _nonZeroValues_WIRE) @[FlexDPU.scala 28:32]
    reg index : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 29:24]
    reg iloop : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 30:24]
    reg jloop : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 31:24]
    reg Statvalid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FlexDPU.scala 32:28]
    node _Statvalid_T = eq(iloop, UInt<2>("h3")) @[FlexDPU.scala 34:25]
    node _Statvalid_T_1 = eq(jloop, UInt<2>("h3")) @[FlexDPU.scala 34:61]
    node _Statvalid_T_2 = and(_Statvalid_T, _Statvalid_T_1) @[FlexDPU.scala 34:51]
    Statvalid <= _Statvalid_T_2 @[FlexDPU.scala 34:15]
    node _T = bits(iloop, 1, 0)
    node _T_1 = bits(jloop, 1, 0)
    node _T_2 = neq(io.Stationary_matrix[_T][_T_1], UInt<1>("h0")) @[FlexDPU.scala 35:46]
    when _T_2 : @[FlexDPU.scala 35:54]
      node _T_3 = bits(index, 3, 0)
      node _nonZeroValues_T = bits(iloop, 1, 0)
      node _nonZeroValues_T_1 = bits(jloop, 1, 0)
      nonZeroValues[_T_3] <= io.Stationary_matrix[_nonZeroValues_T][_nonZeroValues_T_1] @[FlexDPU.scala 36:30]
      node _index_T = add(index, UInt<1>("h1")) @[FlexDPU.scala 37:24]
      node _index_T_1 = tail(_index_T, 1) @[FlexDPU.scala 37:24]
      index <= _index_T_1 @[FlexDPU.scala 37:15]
    node _T_4 = lt(iloop, UInt<2>("h3")) @[FlexDPU.scala 40:18]
    node _T_5 = eq(jloop, UInt<2>("h3")) @[FlexDPU.scala 40:51]
    node _T_6 = and(_T_4, _T_5) @[FlexDPU.scala 40:41]
    when _T_6 : @[FlexDPU.scala 40:77]
      node _iloop_T = add(iloop, UInt<1>("h1")) @[FlexDPU.scala 41:24]
      node _iloop_T_1 = tail(_iloop_T, 1) @[FlexDPU.scala 41:24]
      iloop <= _iloop_T_1 @[FlexDPU.scala 41:15]
    node _T_7 = leq(iloop, UInt<2>("h3")) @[FlexDPU.scala 44:18]
    node _T_8 = lt(jloop, UInt<2>("h3")) @[FlexDPU.scala 44:52]
    node _T_9 = and(_T_7, _T_8) @[FlexDPU.scala 44:42]
    when _T_9 : @[FlexDPU.scala 44:76]
      node _jloop_T = add(jloop, UInt<1>("h1")) @[FlexDPU.scala 45:24]
      node _jloop_T_1 = tail(_jloop_T, 1) @[FlexDPU.scala 45:24]
      jloop <= _jloop_T_1 @[FlexDPU.scala 45:15]
    else :
      node _T_10 = eq(iloop, UInt<2>("h3")) @[FlexDPU.scala 46:22]
      node _T_11 = eq(jloop, UInt<2>("h3")) @[FlexDPU.scala 46:57]
      node _T_12 = and(_T_10, _T_11) @[FlexDPU.scala 46:47]
      when _T_12 : @[FlexDPU.scala 46:83]
        jloop <= jloop @[FlexDPU.scala 47:15]
      else :
        jloop <= UInt<1>("h0") @[FlexDPU.scala 49:15]
    wire _PF1mux_WIRE : UInt<4>[16] @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[0] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[1] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[2] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[3] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[4] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[5] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[6] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[7] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[8] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[9] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[10] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[11] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[12] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[13] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[14] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    _PF1mux_WIRE[15] <= UInt<4>("h0") @[FlexDPU.scala 54:34]
    wire PF1mux : UInt<4>[16]
    PF1mux <= _PF1mux_WIRE
    wire _PF1src_WIRE : UInt<16>[16] @[FlexDPU.scala 55:34]
    _PF1src_WIRE[0] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[1] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[2] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[3] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[4] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[5] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[6] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[7] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[8] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[9] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[10] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[11] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[12] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[13] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[14] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    _PF1src_WIRE[15] <= UInt<16>("h0") @[FlexDPU.scala 55:34]
    wire PF1src : UInt<16>[16]
    PF1src <= _PF1src_WIRE
    wire _PF1dest_WIRE : UInt<16>[16] @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[0] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[1] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[2] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[3] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[4] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[5] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[6] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[7] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[8] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[9] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[10] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[11] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[12] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[13] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[14] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    _PF1dest_WIRE[15] <= UInt<16>("h0") @[FlexDPU.scala 56:35]
    wire PF1dest : UInt<16>[16]
    PF1dest <= _PF1dest_WIRE
    reg PF1CountIteration : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 57:36]
    wire _PF1_Stream_Col_WIRE : UInt<32>[4] @[FlexDPU.scala 58:41]
    _PF1_Stream_Col_WIRE[0] <= UInt<32>("h0") @[FlexDPU.scala 58:41]
    _PF1_Stream_Col_WIRE[1] <= UInt<32>("h0") @[FlexDPU.scala 58:41]
    _PF1_Stream_Col_WIRE[2] <= UInt<32>("h0") @[FlexDPU.scala 58:41]
    _PF1_Stream_Col_WIRE[3] <= UInt<32>("h0") @[FlexDPU.scala 58:41]
    reg PF1_Stream_Col : UInt<32>[4], clock with :
      reset => (reset, _PF1_Stream_Col_WIRE) @[FlexDPU.scala 58:33]
    reg ModuleIndex : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 59:30]
    reg cc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 60:21]
    reg IterationIndex : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[FlexDPU.scala 71:33]
    inst PathFinder of PathFinder @[FlexDPU.scala 74:40]
    PathFinder.clock <= clock
    PathFinder.reset <= reset
    inst PathFinder_1 of PathFinder_1 @[FlexDPU.scala 74:40]
    PathFinder_1.clock <= clock
    PathFinder_1.reset <= reset
    inst PathFinder_2 of PathFinder_2 @[FlexDPU.scala 74:40]
    PathFinder_2.clock <= clock
    PathFinder_2.reset <= reset
    inst PathFinder_3 of PathFinder_3 @[FlexDPU.scala 74:40]
    PathFinder_3.clock <= clock
    PathFinder_3.reset <= reset
    wire PF : { flip Stationary_matrix : UInt<16>[4][4], flip Streaming_matrix : UInt<16>[4], i_mux_bus : UInt<4>[16], Source : UInt<16>[16], destination : UInt<16>[16], PF_Valid : UInt<1>, flip NoDPE : UInt<32>, flip DataValid : UInt<1>, iteration : UInt<32>, validIteration : UInt<1>}[4] @[FlexDPU.scala 74:21]
    PF[0].validIteration <= PathFinder.io.validIteration @[FlexDPU.scala 74:21]
    PF[0].iteration <= PathFinder.io.iteration @[FlexDPU.scala 74:21]
    PathFinder.io.DataValid <= PF[0].DataValid @[FlexDPU.scala 74:21]
    PathFinder.io.NoDPE <= PF[0].NoDPE @[FlexDPU.scala 74:21]
    PF[0].PF_Valid <= PathFinder.io.PF_Valid @[FlexDPU.scala 74:21]
    PF[0].destination <= PathFinder.io.destination @[FlexDPU.scala 74:21]
    PF[0].Source <= PathFinder.io.Source @[FlexDPU.scala 74:21]
    PF[0].i_mux_bus <= PathFinder.io.i_mux_bus @[FlexDPU.scala 74:21]
    PathFinder.io.Streaming_matrix[0] <= PF[0].Streaming_matrix[0] @[FlexDPU.scala 74:21]
    PathFinder.io.Streaming_matrix[1] <= PF[0].Streaming_matrix[1] @[FlexDPU.scala 74:21]
    PathFinder.io.Streaming_matrix[2] <= PF[0].Streaming_matrix[2] @[FlexDPU.scala 74:21]
    PathFinder.io.Streaming_matrix[3] <= PF[0].Streaming_matrix[3] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[0][0] <= PF[0].Stationary_matrix[0][0] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[0][1] <= PF[0].Stationary_matrix[0][1] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[0][2] <= PF[0].Stationary_matrix[0][2] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[0][3] <= PF[0].Stationary_matrix[0][3] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[1][0] <= PF[0].Stationary_matrix[1][0] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[1][1] <= PF[0].Stationary_matrix[1][1] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[1][2] <= PF[0].Stationary_matrix[1][2] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[1][3] <= PF[0].Stationary_matrix[1][3] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[2][0] <= PF[0].Stationary_matrix[2][0] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[2][1] <= PF[0].Stationary_matrix[2][1] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[2][2] <= PF[0].Stationary_matrix[2][2] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[2][3] <= PF[0].Stationary_matrix[2][3] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[3][0] <= PF[0].Stationary_matrix[3][0] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[3][1] <= PF[0].Stationary_matrix[3][1] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[3][2] <= PF[0].Stationary_matrix[3][2] @[FlexDPU.scala 74:21]
    PathFinder.io.Stationary_matrix[3][3] <= PF[0].Stationary_matrix[3][3] @[FlexDPU.scala 74:21]
    PF[1].validIteration <= PathFinder_1.io.validIteration @[FlexDPU.scala 74:21]
    PF[1].iteration <= PathFinder_1.io.iteration @[FlexDPU.scala 74:21]
    PathFinder_1.io.DataValid <= PF[1].DataValid @[FlexDPU.scala 74:21]
    PathFinder_1.io.NoDPE <= PF[1].NoDPE @[FlexDPU.scala 74:21]
    PF[1].PF_Valid <= PathFinder_1.io.PF_Valid @[FlexDPU.scala 74:21]
    PF[1].destination <= PathFinder_1.io.destination @[FlexDPU.scala 74:21]
    PF[1].Source <= PathFinder_1.io.Source @[FlexDPU.scala 74:21]
    PF[1].i_mux_bus <= PathFinder_1.io.i_mux_bus @[FlexDPU.scala 74:21]
    PathFinder_1.io.Streaming_matrix[0] <= PF[1].Streaming_matrix[0] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Streaming_matrix[1] <= PF[1].Streaming_matrix[1] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Streaming_matrix[2] <= PF[1].Streaming_matrix[2] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Streaming_matrix[3] <= PF[1].Streaming_matrix[3] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[0][0] <= PF[1].Stationary_matrix[0][0] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[0][1] <= PF[1].Stationary_matrix[0][1] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[0][2] <= PF[1].Stationary_matrix[0][2] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[0][3] <= PF[1].Stationary_matrix[0][3] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[1][0] <= PF[1].Stationary_matrix[1][0] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[1][1] <= PF[1].Stationary_matrix[1][1] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[1][2] <= PF[1].Stationary_matrix[1][2] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[1][3] <= PF[1].Stationary_matrix[1][3] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[2][0] <= PF[1].Stationary_matrix[2][0] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[2][1] <= PF[1].Stationary_matrix[2][1] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[2][2] <= PF[1].Stationary_matrix[2][2] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[2][3] <= PF[1].Stationary_matrix[2][3] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[3][0] <= PF[1].Stationary_matrix[3][0] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[3][1] <= PF[1].Stationary_matrix[3][1] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[3][2] <= PF[1].Stationary_matrix[3][2] @[FlexDPU.scala 74:21]
    PathFinder_1.io.Stationary_matrix[3][3] <= PF[1].Stationary_matrix[3][3] @[FlexDPU.scala 74:21]
    PF[2].validIteration <= PathFinder_2.io.validIteration @[FlexDPU.scala 74:21]
    PF[2].iteration <= PathFinder_2.io.iteration @[FlexDPU.scala 74:21]
    PathFinder_2.io.DataValid <= PF[2].DataValid @[FlexDPU.scala 74:21]
    PathFinder_2.io.NoDPE <= PF[2].NoDPE @[FlexDPU.scala 74:21]
    PF[2].PF_Valid <= PathFinder_2.io.PF_Valid @[FlexDPU.scala 74:21]
    PF[2].destination <= PathFinder_2.io.destination @[FlexDPU.scala 74:21]
    PF[2].Source <= PathFinder_2.io.Source @[FlexDPU.scala 74:21]
    PF[2].i_mux_bus <= PathFinder_2.io.i_mux_bus @[FlexDPU.scala 74:21]
    PathFinder_2.io.Streaming_matrix[0] <= PF[2].Streaming_matrix[0] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Streaming_matrix[1] <= PF[2].Streaming_matrix[1] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Streaming_matrix[2] <= PF[2].Streaming_matrix[2] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Streaming_matrix[3] <= PF[2].Streaming_matrix[3] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[0][0] <= PF[2].Stationary_matrix[0][0] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[0][1] <= PF[2].Stationary_matrix[0][1] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[0][2] <= PF[2].Stationary_matrix[0][2] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[0][3] <= PF[2].Stationary_matrix[0][3] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[1][0] <= PF[2].Stationary_matrix[1][0] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[1][1] <= PF[2].Stationary_matrix[1][1] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[1][2] <= PF[2].Stationary_matrix[1][2] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[1][3] <= PF[2].Stationary_matrix[1][3] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[2][0] <= PF[2].Stationary_matrix[2][0] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[2][1] <= PF[2].Stationary_matrix[2][1] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[2][2] <= PF[2].Stationary_matrix[2][2] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[2][3] <= PF[2].Stationary_matrix[2][3] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[3][0] <= PF[2].Stationary_matrix[3][0] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[3][1] <= PF[2].Stationary_matrix[3][1] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[3][2] <= PF[2].Stationary_matrix[3][2] @[FlexDPU.scala 74:21]
    PathFinder_2.io.Stationary_matrix[3][3] <= PF[2].Stationary_matrix[3][3] @[FlexDPU.scala 74:21]
    PF[3].validIteration <= PathFinder_3.io.validIteration @[FlexDPU.scala 74:21]
    PF[3].iteration <= PathFinder_3.io.iteration @[FlexDPU.scala 74:21]
    PathFinder_3.io.DataValid <= PF[3].DataValid @[FlexDPU.scala 74:21]
    PathFinder_3.io.NoDPE <= PF[3].NoDPE @[FlexDPU.scala 74:21]
    PF[3].PF_Valid <= PathFinder_3.io.PF_Valid @[FlexDPU.scala 74:21]
    PF[3].destination <= PathFinder_3.io.destination @[FlexDPU.scala 74:21]
    PF[3].Source <= PathFinder_3.io.Source @[FlexDPU.scala 74:21]
    PF[3].i_mux_bus <= PathFinder_3.io.i_mux_bus @[FlexDPU.scala 74:21]
    PathFinder_3.io.Streaming_matrix[0] <= PF[3].Streaming_matrix[0] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Streaming_matrix[1] <= PF[3].Streaming_matrix[1] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Streaming_matrix[2] <= PF[3].Streaming_matrix[2] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Streaming_matrix[3] <= PF[3].Streaming_matrix[3] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[0][0] <= PF[3].Stationary_matrix[0][0] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[0][1] <= PF[3].Stationary_matrix[0][1] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[0][2] <= PF[3].Stationary_matrix[0][2] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[0][3] <= PF[3].Stationary_matrix[0][3] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[1][0] <= PF[3].Stationary_matrix[1][0] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[1][1] <= PF[3].Stationary_matrix[1][1] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[1][2] <= PF[3].Stationary_matrix[1][2] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[1][3] <= PF[3].Stationary_matrix[1][3] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[2][0] <= PF[3].Stationary_matrix[2][0] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[2][1] <= PF[3].Stationary_matrix[2][1] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[2][2] <= PF[3].Stationary_matrix[2][2] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[2][3] <= PF[3].Stationary_matrix[2][3] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[3][0] <= PF[3].Stationary_matrix[3][0] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[3][1] <= PF[3].Stationary_matrix[3][1] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[3][2] <= PF[3].Stationary_matrix[3][2] @[FlexDPU.scala 74:21]
    PathFinder_3.io.Stationary_matrix[3][3] <= PF[3].Stationary_matrix[3][3] @[FlexDPU.scala 74:21]
    PF[0].DataValid <= UInt<1>("h0") @[FlexDPU.scala 78:25]
    wire _WIRE : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_1 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_1[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_1[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_1[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_1[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_2 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_2[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_2[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_2[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_2[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_3 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_3[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_3[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_3[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_3[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_4 : UInt<16>[4][4] @[FlexDPU.scala 79:52]
    _WIRE_4[0] <= _WIRE @[FlexDPU.scala 79:52]
    _WIRE_4[1] <= _WIRE_1 @[FlexDPU.scala 79:52]
    _WIRE_4[2] <= _WIRE_2 @[FlexDPU.scala 79:52]
    _WIRE_4[3] <= _WIRE_3 @[FlexDPU.scala 79:52]
    wire _WIRE_5 : UInt<16>[4][4]
    _WIRE_5 <= _WIRE_4
    PF[0].Stationary_matrix[0][0] <= _WIRE_5[0][0] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[0][1] <= _WIRE_5[0][1] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[0][2] <= _WIRE_5[0][2] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[0][3] <= _WIRE_5[0][3] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[1][0] <= _WIRE_5[1][0] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[1][1] <= _WIRE_5[1][1] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[1][2] <= _WIRE_5[1][2] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[1][3] <= _WIRE_5[1][3] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[2][0] <= _WIRE_5[2][0] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[2][1] <= _WIRE_5[2][1] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[2][2] <= _WIRE_5[2][2] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[2][3] <= _WIRE_5[2][3] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[3][0] <= _WIRE_5[3][0] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[3][1] <= _WIRE_5[3][1] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[3][2] <= _WIRE_5[3][2] @[FlexDPU.scala 79:33]
    PF[0].Stationary_matrix[3][3] <= _WIRE_5[3][3] @[FlexDPU.scala 79:33]
    PF[0].NoDPE <= UInt<1>("h0") @[FlexDPU.scala 80:21]
    wire _WIRE_6 : UInt<32>[4] @[FlexDPU.scala 81:51]
    _WIRE_6[0] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_6[1] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_6[2] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_6[3] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    wire _WIRE_7 : UInt<32>[4]
    _WIRE_7 <= _WIRE_6
    PF[0].Streaming_matrix[0] <= _WIRE_7[0] @[FlexDPU.scala 81:32]
    PF[0].Streaming_matrix[1] <= _WIRE_7[1] @[FlexDPU.scala 81:32]
    PF[0].Streaming_matrix[2] <= _WIRE_7[2] @[FlexDPU.scala 81:32]
    PF[0].Streaming_matrix[3] <= _WIRE_7[3] @[FlexDPU.scala 81:32]
    PF[1].DataValid <= UInt<1>("h0") @[FlexDPU.scala 78:25]
    wire _WIRE_8 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_8[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_8[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_8[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_8[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_9 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_9[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_9[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_9[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_9[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_10 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_10[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_10[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_10[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_10[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_11 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_11[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_11[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_11[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_11[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_12 : UInt<16>[4][4] @[FlexDPU.scala 79:52]
    _WIRE_12[0] <= _WIRE_8 @[FlexDPU.scala 79:52]
    _WIRE_12[1] <= _WIRE_9 @[FlexDPU.scala 79:52]
    _WIRE_12[2] <= _WIRE_10 @[FlexDPU.scala 79:52]
    _WIRE_12[3] <= _WIRE_11 @[FlexDPU.scala 79:52]
    wire _WIRE_13 : UInt<16>[4][4]
    _WIRE_13 <= _WIRE_12
    PF[1].Stationary_matrix[0][0] <= _WIRE_13[0][0] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[0][1] <= _WIRE_13[0][1] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[0][2] <= _WIRE_13[0][2] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[0][3] <= _WIRE_13[0][3] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[1][0] <= _WIRE_13[1][0] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[1][1] <= _WIRE_13[1][1] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[1][2] <= _WIRE_13[1][2] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[1][3] <= _WIRE_13[1][3] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[2][0] <= _WIRE_13[2][0] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[2][1] <= _WIRE_13[2][1] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[2][2] <= _WIRE_13[2][2] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[2][3] <= _WIRE_13[2][3] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[3][0] <= _WIRE_13[3][0] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[3][1] <= _WIRE_13[3][1] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[3][2] <= _WIRE_13[3][2] @[FlexDPU.scala 79:33]
    PF[1].Stationary_matrix[3][3] <= _WIRE_13[3][3] @[FlexDPU.scala 79:33]
    PF[1].NoDPE <= UInt<1>("h0") @[FlexDPU.scala 80:21]
    wire _WIRE_14 : UInt<32>[4] @[FlexDPU.scala 81:51]
    _WIRE_14[0] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_14[1] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_14[2] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_14[3] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    wire _WIRE_15 : UInt<32>[4]
    _WIRE_15 <= _WIRE_14
    PF[1].Streaming_matrix[0] <= _WIRE_15[0] @[FlexDPU.scala 81:32]
    PF[1].Streaming_matrix[1] <= _WIRE_15[1] @[FlexDPU.scala 81:32]
    PF[1].Streaming_matrix[2] <= _WIRE_15[2] @[FlexDPU.scala 81:32]
    PF[1].Streaming_matrix[3] <= _WIRE_15[3] @[FlexDPU.scala 81:32]
    PF[2].DataValid <= UInt<1>("h0") @[FlexDPU.scala 78:25]
    wire _WIRE_16 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_16[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_16[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_16[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_16[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_17 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_17[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_17[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_17[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_17[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_18 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_18[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_18[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_18[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_18[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_19 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_19[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_19[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_19[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_19[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_20 : UInt<16>[4][4] @[FlexDPU.scala 79:52]
    _WIRE_20[0] <= _WIRE_16 @[FlexDPU.scala 79:52]
    _WIRE_20[1] <= _WIRE_17 @[FlexDPU.scala 79:52]
    _WIRE_20[2] <= _WIRE_18 @[FlexDPU.scala 79:52]
    _WIRE_20[3] <= _WIRE_19 @[FlexDPU.scala 79:52]
    wire _WIRE_21 : UInt<16>[4][4]
    _WIRE_21 <= _WIRE_20
    PF[2].Stationary_matrix[0][0] <= _WIRE_21[0][0] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[0][1] <= _WIRE_21[0][1] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[0][2] <= _WIRE_21[0][2] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[0][3] <= _WIRE_21[0][3] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[1][0] <= _WIRE_21[1][0] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[1][1] <= _WIRE_21[1][1] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[1][2] <= _WIRE_21[1][2] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[1][3] <= _WIRE_21[1][3] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[2][0] <= _WIRE_21[2][0] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[2][1] <= _WIRE_21[2][1] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[2][2] <= _WIRE_21[2][2] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[2][3] <= _WIRE_21[2][3] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[3][0] <= _WIRE_21[3][0] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[3][1] <= _WIRE_21[3][1] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[3][2] <= _WIRE_21[3][2] @[FlexDPU.scala 79:33]
    PF[2].Stationary_matrix[3][3] <= _WIRE_21[3][3] @[FlexDPU.scala 79:33]
    PF[2].NoDPE <= UInt<1>("h0") @[FlexDPU.scala 80:21]
    wire _WIRE_22 : UInt<32>[4] @[FlexDPU.scala 81:51]
    _WIRE_22[0] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_22[1] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_22[2] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_22[3] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    wire _WIRE_23 : UInt<32>[4]
    _WIRE_23 <= _WIRE_22
    PF[2].Streaming_matrix[0] <= _WIRE_23[0] @[FlexDPU.scala 81:32]
    PF[2].Streaming_matrix[1] <= _WIRE_23[1] @[FlexDPU.scala 81:32]
    PF[2].Streaming_matrix[2] <= _WIRE_23[2] @[FlexDPU.scala 81:32]
    PF[2].Streaming_matrix[3] <= _WIRE_23[3] @[FlexDPU.scala 81:32]
    PF[3].DataValid <= UInt<1>("h0") @[FlexDPU.scala 78:25]
    wire _WIRE_24 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_24[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_24[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_24[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_24[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_25 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_25[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_25[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_25[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_25[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_26 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_26[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_26[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_26[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_26[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_27 : UInt<16>[4] @[FlexDPU.scala 79:85]
    _WIRE_27[0] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_27[1] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_27[2] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    _WIRE_27[3] <= UInt<16>("h0") @[FlexDPU.scala 79:85]
    wire _WIRE_28 : UInt<16>[4][4] @[FlexDPU.scala 79:52]
    _WIRE_28[0] <= _WIRE_24 @[FlexDPU.scala 79:52]
    _WIRE_28[1] <= _WIRE_25 @[FlexDPU.scala 79:52]
    _WIRE_28[2] <= _WIRE_26 @[FlexDPU.scala 79:52]
    _WIRE_28[3] <= _WIRE_27 @[FlexDPU.scala 79:52]
    wire _WIRE_29 : UInt<16>[4][4]
    _WIRE_29 <= _WIRE_28
    PF[3].Stationary_matrix[0][0] <= _WIRE_29[0][0] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[0][1] <= _WIRE_29[0][1] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[0][2] <= _WIRE_29[0][2] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[0][3] <= _WIRE_29[0][3] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[1][0] <= _WIRE_29[1][0] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[1][1] <= _WIRE_29[1][1] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[1][2] <= _WIRE_29[1][2] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[1][3] <= _WIRE_29[1][3] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[2][0] <= _WIRE_29[2][0] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[2][1] <= _WIRE_29[2][1] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[2][2] <= _WIRE_29[2][2] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[2][3] <= _WIRE_29[2][3] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[3][0] <= _WIRE_29[3][0] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[3][1] <= _WIRE_29[3][1] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[3][2] <= _WIRE_29[3][2] @[FlexDPU.scala 79:33]
    PF[3].Stationary_matrix[3][3] <= _WIRE_29[3][3] @[FlexDPU.scala 79:33]
    PF[3].NoDPE <= UInt<1>("h0") @[FlexDPU.scala 80:21]
    wire _WIRE_30 : UInt<32>[4] @[FlexDPU.scala 81:51]
    _WIRE_30[0] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_30[1] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_30[2] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    _WIRE_30[3] <= UInt<32>("h0") @[FlexDPU.scala 81:51]
    wire _WIRE_31 : UInt<32>[4]
    _WIRE_31 <= _WIRE_30
    PF[3].Streaming_matrix[0] <= _WIRE_31[0] @[FlexDPU.scala 81:32]
    PF[3].Streaming_matrix[1] <= _WIRE_31[1] @[FlexDPU.scala 81:32]
    PF[3].Streaming_matrix[2] <= _WIRE_31[2] @[FlexDPU.scala 81:32]
    PF[3].Streaming_matrix[3] <= _WIRE_31[3] @[FlexDPU.scala 81:32]
    when Statvalid : @[FlexDPU.scala 95:20]
      PF[0].DataValid <= Statvalid @[FlexDPU.scala 98:25]
      PF[0].Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[FlexDPU.scala 99:33]
      PF[0].Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[FlexDPU.scala 99:33]
      PF[0].NoDPE <= UInt<1>("h0") @[FlexDPU.scala 100:21]
      PF[0].Streaming_matrix[0] <= PF1_Stream_Col[0] @[FlexDPU.scala 101:32]
      PF[0].Streaming_matrix[1] <= PF1_Stream_Col[1] @[FlexDPU.scala 101:32]
      PF[0].Streaming_matrix[2] <= PF1_Stream_Col[2] @[FlexDPU.scala 101:32]
      PF[0].Streaming_matrix[3] <= PF1_Stream_Col[3] @[FlexDPU.scala 101:32]
      PF1mux <= PF[0].i_mux_bus @[FlexDPU.scala 102:16]
      PF1src <= PF[0].Source @[FlexDPU.scala 103:16]
      PF1dest <= PF[0].destination @[FlexDPU.scala 104:17]
      PF[1].DataValid <= Statvalid @[FlexDPU.scala 98:25]
      PF[1].Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[FlexDPU.scala 99:33]
      PF[1].Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[FlexDPU.scala 99:33]
      PF[1].NoDPE <= UInt<1>("h1") @[FlexDPU.scala 100:21]
      PF[1].Streaming_matrix[0] <= PF1_Stream_Col[0] @[FlexDPU.scala 101:32]
      PF[1].Streaming_matrix[1] <= PF1_Stream_Col[1] @[FlexDPU.scala 101:32]
      PF[1].Streaming_matrix[2] <= PF1_Stream_Col[2] @[FlexDPU.scala 101:32]
      PF[1].Streaming_matrix[3] <= PF1_Stream_Col[3] @[FlexDPU.scala 101:32]
      PF1mux <= PF[1].i_mux_bus @[FlexDPU.scala 102:16]
      PF1src <= PF[1].Source @[FlexDPU.scala 103:16]
      PF1dest <= PF[1].destination @[FlexDPU.scala 104:17]
      PF[2].DataValid <= Statvalid @[FlexDPU.scala 98:25]
      PF[2].Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[FlexDPU.scala 99:33]
      PF[2].Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[FlexDPU.scala 99:33]
      PF[2].NoDPE <= UInt<2>("h2") @[FlexDPU.scala 100:21]
      PF[2].Streaming_matrix[0] <= PF1_Stream_Col[0] @[FlexDPU.scala 101:32]
      PF[2].Streaming_matrix[1] <= PF1_Stream_Col[1] @[FlexDPU.scala 101:32]
      PF[2].Streaming_matrix[2] <= PF1_Stream_Col[2] @[FlexDPU.scala 101:32]
      PF[2].Streaming_matrix[3] <= PF1_Stream_Col[3] @[FlexDPU.scala 101:32]
      PF1mux <= PF[2].i_mux_bus @[FlexDPU.scala 102:16]
      PF1src <= PF[2].Source @[FlexDPU.scala 103:16]
      PF1dest <= PF[2].destination @[FlexDPU.scala 104:17]
      PF[3].DataValid <= Statvalid @[FlexDPU.scala 98:25]
      PF[3].Stationary_matrix[0][0] <= io.Stationary_matrix[0][0] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[0][1] <= io.Stationary_matrix[0][1] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[0][2] <= io.Stationary_matrix[0][2] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[0][3] <= io.Stationary_matrix[0][3] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[1][0] <= io.Stationary_matrix[1][0] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[1][1] <= io.Stationary_matrix[1][1] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[1][2] <= io.Stationary_matrix[1][2] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[1][3] <= io.Stationary_matrix[1][3] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[2][0] <= io.Stationary_matrix[2][0] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[2][1] <= io.Stationary_matrix[2][1] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[2][2] <= io.Stationary_matrix[2][2] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[2][3] <= io.Stationary_matrix[2][3] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[3][0] <= io.Stationary_matrix[3][0] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[3][1] <= io.Stationary_matrix[3][1] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[3][2] <= io.Stationary_matrix[3][2] @[FlexDPU.scala 99:33]
      PF[3].Stationary_matrix[3][3] <= io.Stationary_matrix[3][3] @[FlexDPU.scala 99:33]
      PF[3].NoDPE <= UInt<2>("h3") @[FlexDPU.scala 100:21]
      PF[3].Streaming_matrix[0] <= PF1_Stream_Col[0] @[FlexDPU.scala 101:32]
      PF[3].Streaming_matrix[1] <= PF1_Stream_Col[1] @[FlexDPU.scala 101:32]
      PF[3].Streaming_matrix[2] <= PF1_Stream_Col[2] @[FlexDPU.scala 101:32]
      PF[3].Streaming_matrix[3] <= PF1_Stream_Col[3] @[FlexDPU.scala 101:32]
      PF1mux <= PF[3].i_mux_bus @[FlexDPU.scala 102:16]
      PF1src <= PF[3].Source @[FlexDPU.scala 103:16]
      PF1dest <= PF[3].destination @[FlexDPU.scala 104:17]
      when PF[0].PF_Valid : @[FlexDPU.scala 148:29]
        node _ModuleIndex_T = add(ModuleIndex, UInt<1>("h1")) @[FlexDPU.scala 150:40]
        node _ModuleIndex_T_1 = tail(_ModuleIndex_T, 1) @[FlexDPU.scala 150:40]
        ModuleIndex <= _ModuleIndex_T_1 @[FlexDPU.scala 150:25]
      node _T_13 = eq(ModuleIndex, UInt<2>("h3")) @[FlexDPU.scala 153:27]
      node _T_14 = and(_T_13, PF[0].PF_Valid) @[FlexDPU.scala 153:53]
      when _T_14 : @[FlexDPU.scala 153:71]
        ModuleIndex <= ModuleIndex @[FlexDPU.scala 154:25]
      node _PF1_Stream_Col_0_T = bits(ModuleIndex, 1, 0)
      PF1_Stream_Col[0] <= io.Streaming_matrix[0][_PF1_Stream_Col_0_T] @[FlexDPU.scala 160:31]
      node _PF1_Stream_Col_1_T = bits(ModuleIndex, 1, 0)
      PF1_Stream_Col[1] <= io.Streaming_matrix[1][_PF1_Stream_Col_1_T] @[FlexDPU.scala 160:31]
      node _PF1_Stream_Col_2_T = bits(ModuleIndex, 1, 0)
      PF1_Stream_Col[2] <= io.Streaming_matrix[2][_PF1_Stream_Col_2_T] @[FlexDPU.scala 160:31]
      node _PF1_Stream_Col_3_T = bits(ModuleIndex, 1, 0)
      PF1_Stream_Col[3] <= io.Streaming_matrix[3][_PF1_Stream_Col_3_T] @[FlexDPU.scala 160:31]
      node _T_15 = eq(PF1CountIteration, UInt<2>("h3")) @[FlexDPU.scala 176:33]
      when _T_15 : @[FlexDPU.scala 176:58]
        wire reserve : UInt<32>
        reserve <= UInt<32>("h0")

