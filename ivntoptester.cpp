#include <verilated.h>
#include <verilated_vcd_c.h>
#include "Vivntop.h"  // This header is generated by Chisel

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);
    
    // Initialize Verilator traces
    Verilated::traceEverOn(true);
    VerilatedVcdC* tfp = new VerilatedVcdC;

    // Create an instance of the generated Verilog module
    Vivntop* top = new Vivntop;

    // Trace the signals
    top->trace(tfp, 99);
    tfp->open("dump.vcd");

    // Initialize signals
    top->reset = 1;

    // for (int i = 0; i < 32; i++) {
    //     switch(i) {
               top->io_Stationary_matrix_0_0 = 11;
              top->io_Stationary_matrix_0_1 = 12; 
             top->io_Stationary_matrix_0_2 = 13; 
               top->io_Stationary_matrix_0_3 = 14; 
                top->io_Stationary_matrix_0_4 = 11;
              top->io_Stationary_matrix_0_5 = 12; 
             top->io_Stationary_matrix_0_6 = 13; 
               top->io_Stationary_matrix_0_7 = 14; 
               top->io_Stationary_matrix_1_0 = 3; 
               top->io_Stationary_matrix_1_1 = 4; 
               top->io_Stationary_matrix_1_2 = 5; 
               top->io_Stationary_matrix_1_3 = 6; 
               top->io_Stationary_matrix_1_4 = 3; 
               top->io_Stationary_matrix_1_5 = 4; 
               top->io_Stationary_matrix_1_6 = 5; 
               top->io_Stationary_matrix_1_7 = 6; 
               top->io_Stationary_matrix_2_0 = 7; 
               top->io_Stationary_matrix_2_1 = 8; 
               top->io_Stationary_matrix_2_2 = 9; 
               top->io_Stationary_matrix_2_3 = 10; 
                top->io_Stationary_matrix_2_4 = 7; 
               top->io_Stationary_matrix_2_5 = 8; 
               top->io_Stationary_matrix_2_6 = 9; 
               top->io_Stationary_matrix_2_7 = 10; 
               top->io_Stationary_matrix_3_0 = 21; 
               top->io_Stationary_matrix_3_1 = 23; 
               top->io_Stationary_matrix_3_2 = 24;
              top->io_Stationary_matrix_3_3 = 25;
              top->io_Stationary_matrix_3_4 = 21; 
               top->io_Stationary_matrix_3_5 = 23; 
               top->io_Stationary_matrix_3_6 = 24;
              top->io_Stationary_matrix_3_7 = 25;
               top->io_Stationary_matrix_4_0 = 11;
              top->io_Stationary_matrix_4_1 = 12; 
             top->io_Stationary_matrix_4_2 = 13; 
               top->io_Stationary_matrix_4_3 = 14; 
                top->io_Stationary_matrix_4_4 = 11;
              top->io_Stationary_matrix_4_5 = 12; 
             top->io_Stationary_matrix_4_6 = 13; 
               top->io_Stationary_matrix_4_7 = 14; 
               top->io_Stationary_matrix_5_0 = 3; 
               top->io_Stationary_matrix_5_1 = 4; 
               top->io_Stationary_matrix_5_2 = 5; 
               top->io_Stationary_matrix_5_3 = 6; 
               top->io_Stationary_matrix_5_4 = 3; 
               top->io_Stationary_matrix_5_5 = 4; 
               top->io_Stationary_matrix_5_6 = 5; 
               top->io_Stationary_matrix_5_7 = 6; 
               top->io_Stationary_matrix_6_0 = 7; 
               top->io_Stationary_matrix_6_1 = 8; 
               top->io_Stationary_matrix_6_2 = 9; 
               top->io_Stationary_matrix_6_3 = 10; 
                top->io_Stationary_matrix_6_4 = 7; 
               top->io_Stationary_matrix_6_5 = 8; 
               top->io_Stationary_matrix_6_6 = 9; 
               top->io_Stationary_matrix_6_7 = 10; 
               top->io_Stationary_matrix_7_0 = 21; 
               top->io_Stationary_matrix_7_1 = 23; 
               top->io_Stationary_matrix_7_2 = 24;
              top->io_Stationary_matrix_7_3 = 25;
              top->io_Stationary_matrix_7_4 = 21; 
               top->io_Stationary_matrix_7_5 = 23; 
               top->io_Stationary_matrix_7_6 = 24;
              top->io_Stationary_matrix_7_7 = 25;
        
    

    // for (int i = 0; i < 32; i++) {
    //     switch(i) {
          
    //}

    // Simulation steps
    for (int cycle = 0; cycle < 2000; cycle++) {
        // Toggle clock
        top->clock = 1;
        top->eval();
        tfp->dump(cycle * 10 + 5);

        top->clock = 0;
        top->eval();
        tfp->dump(cycle * 10 + 10);

        if (cycle >= 2){
            top-> reset = 0;
        }
    }

    // ...


    // Close VCD
    tfp->close();
    delete top;
    return 0;
}
